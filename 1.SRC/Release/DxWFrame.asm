; Listing generated by Microsoft (R) Optimizing Compiler Version 19.16.27034.0 

	TITLE	C:\Users\Administrator\Desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.SRC\DxWFrame.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	?gAppSet@@3UtagAPP_SET@@A			; gAppSet
PUBLIC	?gbIsGod@@3HA					; gbIsGod
PUBLIC	?gbIsFirst@@3HA					; gbIsFirst
PUBLIC	?gbIsFull@@3HA					; gbIsFull
PUBLIC	?gFont@@3PAUHFONT__@@A				; gFont
PUBLIC	?gHdc@@3PAUHDC__@@A				; gHdc
PUBLIC	?g_Pos@@3UtagPOINT@@A				; g_Pos
PUBLIC	?g_BPos@@3UtagPOINT@@A				; g_BPos
PUBLIC	?g_bFadeIn@@3HA					; g_bFadeIn
PUBLIC	?g_bFadeOut@@3HA				; g_bFadeOut
PUBLIC	?g_bFadeLoop@@3HA				; g_bFadeLoop
PUBLIC	?g_bInc@@3HA					; g_bInc
PUBLIC	?g_bJump@@3HA					; g_bJump
PUBLIC	?g_bAccel@@3HA					; g_bAccel
PUBLIC	?g_bJaccel@@3HA					; g_bJaccel
PUBLIC	?g_bRight@@3HA					; g_bRight
PUBLIC	?g_bLeft@@3HA					; g_bLeft
PUBLIC	?g_bJRight@@3HA					; g_bJRight
PUBLIC	?g_bJLeft@@3HA					; g_bJLeft
PUBLIC	?g_bSetSpeed@@3HA				; g_bSetSpeed
PUBLIC	?g_bGrayScale@@3HA				; g_bGrayScale
PUBLIC	?g_bColorize@@3HA				; g_bColorize
PUBLIC	?g_bLookR@@3HA					; g_bLookR
PUBLIC	?g_bLookL@@3HA					; g_bLookL
PUBLIC	?g_bBLR@@3HA					; g_bBLR
PUBLIC	?g_bBLL@@3HA					; g_bBLL
PUBLIC	?g_bRush@@3HA					; g_bRush
PUBLIC	?g_bAR@@3HA					; g_bAR
PUBLIC	?g_bAL@@3HA					; g_bAL
PUBLIC	?g_bAtt@@3HA					; g_bAtt
PUBLIC	?g_bRushR@@3HA					; g_bRushR
PUBLIC	?g_bRushL@@3HA					; g_bRushL
PUBLIC	?musicstart@@3HA				; musicstart
PUBLIC	?bossimmu@@3HA					; bossimmu
PUBLIC	?g_bBAT@@3HA					; g_bBAT
PUBLIC	?Delay@@3HA					; Delay
PUBLIC	?g_dwFadeRate@@3KA				; g_dwFadeRate
PUBLIC	?g_dwR@@3KA					; g_dwR
PUBLIC	?g_dwG@@3KA					; g_dwG
PUBLIC	?g_dwB@@3KA					; g_dwB
PUBLIC	?g_dwFADELUT@@3PAY0GF@KA			; g_dwFADELUT
PUBLIC	?g_ddsd@@3U_DDSURFACEDESC2@@A			; g_ddsd
PUBLIC	?g_dwPixelFormat@@3KA				; g_dwPixelFormat
PUBLIC	?g_dwRGBBitCount@@3KA				; g_dwRGBBitCount
PUBLIC	?g_pDS@@3PAPAUIDirectSoundBuffer@@A		; g_pDS
PUBLIC	?g_pDD@@3PAUIDirectDraw7@@A			; g_pDD
PUBLIC	?g_pDDSPrimary@@3PAUIDirectDrawSurface7@@A	; g_pDDSPrimary
PUBLIC	?g_pDDSBack@@3PAUIDirectDrawSurface7@@A		; g_pDDSBack
PUBLIC	?g_pDDSOne@@3PAUIDirectDrawSurface7@@A		; g_pDDSOne
PUBLIC	?g_pDDSOneR@@3PAUIDirectDrawSurface7@@A		; g_pDDSOneR
PUBLIC	?g_pDDSTwo@@3PAUIDirectDrawSurface7@@A		; g_pDDSTwo
PUBLIC	?g_pDDSTwoR@@3PAUIDirectDrawSurface7@@A		; g_pDDSTwoR
PUBLIC	?g_pDDSSkill@@3PAUIDirectDrawSurface7@@A	; g_pDDSSkill
PUBLIC	?g_pDDSSkillR@@3PAUIDirectDrawSurface7@@A	; g_pDDSSkillR
PUBLIC	?g_pDDSHP@@3PAUIDirectDrawSurface7@@A		; g_pDDSHP
PUBLIC	?g_pDDSTITLE@@3PAUIDirectDrawSurface7@@A	; g_pDDSTITLE
PUBLIC	?g_BossAtt@@3PAUIDirectDrawSurface7@@A		; g_BossAtt
PUBLIC	?g_BossAtt2@@3PAUIDirectDrawSurface7@@A		; g_BossAtt2
PUBLIC	?g_pDDSHPbar@@3PAUIDirectDrawSurface7@@A	; g_pDDSHPbar
PUBLIC	?g_pDDSPHP@@3PAUIDirectDrawSurface7@@A		; g_pDDSPHP
PUBLIC	?g_pDDSCHARGE@@3PAUIDirectDrawSurface7@@A	; g_pDDSCHARGE
PUBLIC	?g_pDDSCHARGER@@3PAUIDirectDrawSurface7@@A	; g_pDDSCHARGER
PUBLIC	?g_pDDSPHPbar@@3PAUIDirectDrawSurface7@@A	; g_pDDSPHPbar
PUBLIC	?g_pDDSBG@@3PAUIDirectDrawSurface7@@A		; g_pDDSBG
PUBLIC	?g_pDDSBG2@@3PAUIDirectDrawSurface7@@A		; g_pDDSBG2
PUBLIC	?g_pDDSBG3@@3PAUIDirectDrawSurface7@@A		; g_pDDSBG3
PUBLIC	?g_pDDSCast@@3PAUIDirectDrawSurface7@@A		; g_pDDSCast
PUBLIC	?g_pDDSCast2@@3PAUIDirectDrawSurface7@@A	; g_pDDSCast2
PUBLIC	?g_pDDSCastAtt@@3PAUIDirectDrawSurface7@@A	; g_pDDSCastAtt
PUBLIC	?g_pDDSBossAtt@@3PAUIDirectDrawSurface7@@A	; g_pDDSBossAtt
PUBLIC	?g_pDDSBossAttR@@3PAUIDirectDrawSurface7@@A	; g_pDDSBossAttR
PUBLIC	?g_pDDSBoss3Att@@3PAUIDirectDrawSurface7@@A	; g_pDDSBoss3Att
PUBLIC	?g_pDDSBoss3AttR@@3PAUIDirectDrawSurface7@@A	; g_pDDSBoss3AttR
PUBLIC	?g_pDDSBoss3Att2@@3PAUIDirectDrawSurface7@@A	; g_pDDSBoss3Att2
PUBLIC	?g_pDDSBoss3AttR2@@3PAUIDirectDrawSurface7@@A	; g_pDDSBoss3AttR2
PUBLIC	?g_pDDSBoss3Att3@@3PAUIDirectDrawSurface7@@A	; g_pDDSBoss3Att3
PUBLIC	?g_pDDSBoss3AttR3@@3PAUIDirectDrawSurface7@@A	; g_pDDSBoss3AttR3
PUBLIC	?g_pDDSGroundAtt@@3PAUIDirectDrawSurface7@@A	; g_pDDSGroundAtt
PUBLIC	?g_pDDSDragAtt@@3PAUIDirectDrawSurface7@@A	; g_pDDSDragAtt
PUBLIC	?g_pDDSDragAttR@@3PAUIDirectDrawSurface7@@A	; g_pDDSDragAttR
PUBLIC	?g_pDDSP3standL@@3PAUIDirectDrawSurface7@@A	; g_pDDSP3standL
PUBLIC	?g_pDDSDHole@@3PAUIDirectDrawSurface7@@A	; g_pDDSDHole
PUBLIC	?g_pDDSP3standR@@3PAUIDirectDrawSurface7@@A	; g_pDDSP3standR
PUBLIC	?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A	; g_pDDSDBossHit
PUBLIC	?g_pDDSDPlayerHit@@3PAUIDirectDrawSurface7@@A	; g_pDDSDPlayerHit
PUBLIC	?g_pDDSEnd@@3PAUIDirectDrawSurface7@@A		; g_pDDSEnd
PUBLIC	?g_pDDSGameover@@3PAUIDirectDrawSurface7@@A	; g_pDDSGameover
PUBLIC	?g_pDDSPlayerskill@@3PAUIDirectDrawSurface7@@A	; g_pDDSPlayerskill
PUBLIC	?g_pDDSSkillBut@@3PAUIDirectDrawSurface7@@A	; g_pDDSSkillBut
PUBLIC	?g_pDDSSkillCool@@3PAUIDirectDrawSurface7@@A	; g_pDDSSkillCool
PUBLIC	?g_pDDPal@@3PAUIDirectDrawPalette@@A		; g_pDDPal
PUBLIC	?g_pDDClipper@@3PAUIDirectDrawClipper@@A	; g_pDDClipper
PUBLIC	?g_pDDSVBuffer@@3PAUIDirectDrawSurface7@@A	; g_pDDSVBuffer
PUBLIC	?g_pDDSSBuffer@@3PAUIDirectDrawSurface7@@A	; g_pDDSSBuffer
PUBLIC	?g_pDDSSBuffer2@@3PAUIDirectDrawSurface7@@A	; g_pDDSSBuffer2
PUBLIC	?Bx@@3HA					; Bx
PUBLIC	?Gravity@@3HA					; Gravity
PUBLIC	?Hspeed@@3HA					; Hspeed
PUBLIC	?P1MHP@@3HA					; P1MHP
PUBLIC	?P2MHP@@3HA					; P2MHP
PUBLIC	?P3MHP@@3HA					; P3MHP
PUBLIC	?cx@@3HA					; cx
PUBLIC	?cy@@3HA					; cy
PUBLIC	?o@@3HA						; o
PUBLIC	?P3randpat@@3HA					; P3randpat
PUBLIC	?P3randpat2@@3HA				; P3randpat2
PUBLIC	?isSafe@@3HA					; isSafe
PUBLIC	?g_bCast@@3HA					; g_bCast
PUBLIC	?g_bCRight@@3HA					; g_bCRight
PUBLIC	?g_bCLeft@@3HA					; g_bCLeft
PUBLIC	?g_bCFire@@3HA					; g_bCFire
PUBLIC	?g_bHit@@3HA					; g_bHit
PUBLIC	?Mirror@@3HA					; Mirror
PUBLIC	?BossAtt@@3HA					; BossAtt
PUBLIC	?BAR@@3HA					; BAR
PUBLIC	?BAL@@3HA					; BAL
PUBLIC	?BARR@@3HA					; BARR
PUBLIC	?BALL@@3HA					; BALL
PUBLIC	?Muffle@@3HA					; Muffle
PUBLIC	?P5Mus@@3HA					; P5Mus
PUBLIC	?CastHit@@3HA					; CastHit
PUBLIC	?Skilluse@@3HA					; Skilluse
PUBLIC	?BigHit@@3HA					; BigHit
PUBLIC	?PlayerMHP@@3HA					; PlayerMHP
PUBLIC	?Randpat@@3HA					; Randpat
PUBLIC	?Randpat2@@3HA					; Randpat2
PUBLIC	?P2musicstart@@3HA				; P2musicstart
PUBLIC	?RandNum@@3PAHA					; RandNum
PUBLIC	?Maximum@@3HA					; Maximum
PUBLIC	?Knockspd@@3HA					; Knockspd
PUBLIC	?PlayerHPrate@@3MA				; PlayerHPrate
PUBLIC	?P1HPrate@@3MA					; P1HPrate
PUBLIC	?P2HPrate@@3MA					; P2HPrate
PUBLIC	?P3HPrate@@3MA					; P3HPrate
PUBLIC	?KnockHspeed@@3HA				; KnockHspeed
PUBLIC	?Bframe@@3HA					; Bframe
PUBLIC	?BAframe@@3HA					; BAframe
PUBLIC	?Aframe@@3HA					; Aframe
PUBLIC	?Cframe@@3HA					; Cframe
PUBLIC	?CAframe@@3HA					; CAframe
PUBLIC	?CAAframe@@3HA					; CAAframe
PUBLIC	?BKframe@@3HA					; BKframe
PUBLIC	?DRframe@@3HA					; DRframe
PUBLIC	?GAframe@@3HA					; GAframe
PUBLIC	?SPframe@@3HA					; SPframe
PUBLIC	?PHframe@@3HA					; PHframe
PUBLIC	?BHframe@@3PAHA					; BHframe
PUBLIC	?PSframe@@3HA					; PSframe
PUBLIC	?SpikeX@@3PAHA					; SpikeX
PUBLIC	?SpikeY@@3HA					; SpikeY
PUBLIC	?MaxTime@@3HA					; MaxTime
PUBLIC	?Skillcheat@@3HA				; Skillcheat
PUBLIC	?Timerrate@@3MA					; Timerrate
PUBLIC	?Pimmune@@3HA					; Pimmune
PUBLIC	?HIT@@3UtagRECT@@A				; HIT
PUBLIC	?BOSS@@3UtagRECT@@A				; BOSS
PUBLIC	?rcDest@@3UtagRECT@@A				; rcDest
PUBLIC	?BAHIT@@3PAUtagRECT@@A				; BAHIT
PUBLIC	?PHIT@@3UtagRECT@@A				; PHIT
PUBLIC	?Cast@@3UtagRECT@@A				; Cast
PUBLIC	?Knock@@3UtagRECT@@A				; Knock
PUBLIC	?Spike@@3PAUtagRECT@@A				; Spike
PUBLIC	?p1die@@3HA					; p1die
PUBLIC	?p2die@@3HA					; p2die
PUBLIC	?p3die@@3HA					; p3die
PUBLIC	?Drag@@3HA					; Drag
PUBLIC	?Knockback@@3HA					; Knockback
PUBLIC	?KnockHIT@@3HA					; KnockHIT
PUBLIC	?p3musicstart@@3HA				; p3musicstart
PUBLIC	?P4Mus@@3HA					; P4Mus
PUBLIC	?g_bGatt@@3HA					; g_bGatt
PUBLIC	?g_bSpike@@3HA					; g_bSpike
PUBLIC	?PHplay@@3HA					; PHplay
PUBLIC	?BHplay@@3PAHA					; BHplay
PUBLIC	?BHMPlay@@3HA					; BHMPlay
PUBLIC	?g_nPhaze@@3HA					; g_nPhaze
PUBLIC	?Timer@@3PAHA					; Timer
_BSS	SEGMENT
?gAppSet@@3UtagAPP_SET@@A DB 014H DUP (?)		; gAppSet
?gbIsGod@@3HA DD 01H DUP (?)				; gbIsGod
?gFont@@3PAUHFONT__@@A DD 01H DUP (?)			; gFont
?gHdc@@3PAUHDC__@@A DD 01H DUP (?)			; gHdc
?g_Pos@@3UtagPOINT@@A DQ 01H DUP (?)			; g_Pos
?g_BPos@@3UtagPOINT@@A DQ 01H DUP (?)			; g_BPos
?g_bFadeIn@@3HA DD 01H DUP (?)				; g_bFadeIn
?g_bFadeOut@@3HA DD 01H DUP (?)				; g_bFadeOut
?g_bFadeLoop@@3HA DD 01H DUP (?)			; g_bFadeLoop
?g_bInc@@3HA DD	01H DUP (?)				; g_bInc
?g_bJump@@3HA DD 01H DUP (?)				; g_bJump
?g_bAccel@@3HA DD 01H DUP (?)				; g_bAccel
?g_bJaccel@@3HA DD 01H DUP (?)				; g_bJaccel
?g_bRight@@3HA DD 01H DUP (?)				; g_bRight
?g_bLeft@@3HA DD 01H DUP (?)				; g_bLeft
?g_bJRight@@3HA DD 01H DUP (?)				; g_bJRight
?g_bJLeft@@3HA DD 01H DUP (?)				; g_bJLeft
?g_bSetSpeed@@3HA DD 01H DUP (?)			; g_bSetSpeed
?g_bGrayScale@@3HA DD 01H DUP (?)			; g_bGrayScale
?g_bColorize@@3HA DD 01H DUP (?)			; g_bColorize
?g_bLookL@@3HA DD 01H DUP (?)				; g_bLookL
?g_bBLL@@3HA DD	01H DUP (?)				; g_bBLL
?g_bRush@@3HA DD 01H DUP (?)				; g_bRush
?g_bAR@@3HA DD	01H DUP (?)				; g_bAR
?g_bAL@@3HA DD	01H DUP (?)				; g_bAL
?g_bAtt@@3HA DD	01H DUP (?)				; g_bAtt
?g_bRushR@@3HA DD 01H DUP (?)				; g_bRushR
?g_bRushL@@3HA DD 01H DUP (?)				; g_bRushL
?musicstart@@3HA DD 01H DUP (?)				; musicstart
?bossimmu@@3HA DD 01H DUP (?)				; bossimmu
?g_bBAT@@3HA DD	01H DUP (?)				; g_bBAT
?Delay@@3HA DD	01H DUP (?)				; Delay
?g_dwFadeRate@@3KA DD 01H DUP (?)			; g_dwFadeRate
?g_dwR@@3KA DD	01H DUP (?)				; g_dwR
?g_dwG@@3KA DD	01H DUP (?)				; g_dwG
?g_dwB@@3KA DD	01H DUP (?)				; g_dwB
?g_dwFADELUT@@3PAY0GF@KA DD 01940H DUP (?)		; g_dwFADELUT
?g_ddsd@@3U_DDSURFACEDESC2@@A DB 07cH DUP (?)		; g_ddsd
?g_dwPixelFormat@@3KA DD 01H DUP (?)			; g_dwPixelFormat
?g_dwRGBBitCount@@3KA DD 01H DUP (?)			; g_dwRGBBitCount
?g_pDS@@3PAPAUIDirectSoundBuffer@@A DD 07H DUP (?)	; g_pDS
?g_pDD@@3PAUIDirectDraw7@@A DD 01H DUP (?)		; g_pDD
?g_pDDSPrimary@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSPrimary
?g_pDDSBack@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_pDDSBack
?g_pDDSOne@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_pDDSOne
?g_pDDSOneR@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_pDDSOneR
?g_pDDSTwo@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_pDDSTwo
?g_pDDSTwoR@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_pDDSTwoR
?g_pDDSSkill@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_pDDSSkill
?g_pDDSSkillR@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSSkillR
?g_pDDSHP@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_pDDSHP
?g_pDDSTITLE@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_pDDSTITLE
?g_BossAtt@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_BossAtt
?g_BossAtt2@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_BossAtt2
?g_pDDSHPbar@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_pDDSHPbar
?g_pDDSPHP@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_pDDSPHP
?g_pDDSCHARGE@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSCHARGE
?g_pDDSCHARGER@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSCHARGER
?g_pDDSPHPbar@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSPHPbar
?g_pDDSBG@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_pDDSBG
?g_pDDSBG2@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_pDDSBG2
?g_pDDSBG3@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_pDDSBG3
?g_pDDSCast@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_pDDSCast
?g_pDDSCast2@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_pDDSCast2
?g_pDDSCastAtt@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSCastAtt
?g_pDDSBossAtt@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSBossAtt
?g_pDDSBossAttR@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSBossAttR
?g_pDDSBoss3Att@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSBoss3Att
?g_pDDSBoss3AttR@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSBoss3AttR
?g_pDDSBoss3Att2@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSBoss3Att2
?g_pDDSBoss3AttR2@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSBoss3AttR2
?g_pDDSBoss3Att3@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSBoss3Att3
?g_pDDSBoss3AttR3@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSBoss3AttR3
?g_pDDSGroundAtt@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSGroundAtt
?g_pDDSDragAtt@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSDragAtt
?g_pDDSDragAttR@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSDragAttR
?g_pDDSP3standL@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSP3standL
?g_pDDSDHole@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_pDDSDHole
?g_pDDSP3standR@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSP3standR
?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSDBossHit
?g_pDDSDPlayerHit@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSDPlayerHit
?g_pDDSEnd@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?)	; g_pDDSEnd
?g_pDDSGameover@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSGameover
?g_pDDSPlayerskill@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSPlayerskill
?g_pDDSSkillBut@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSSkillBut
?g_pDDSSkillCool@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSSkillCool
?g_pDDPal@@3PAUIDirectDrawPalette@@A DD 01H DUP (?)	; g_pDDPal
?g_pDDClipper@@3PAUIDirectDrawClipper@@A DD 01H DUP (?)	; g_pDDClipper
?g_pDDSVBuffer@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSVBuffer
?g_pDDSSBuffer@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSSBuffer
?g_pDDSSBuffer2@@3PAUIDirectDrawSurface7@@A DD 01H DUP (?) ; g_pDDSSBuffer2
?Bx@@3HA DD	01H DUP (?)				; Bx
?Hspeed@@3HA DD	01H DUP (?)				; Hspeed
?cx@@3HA DD	01H DUP (?)				; cx
?cy@@3HA DD	01H DUP (?)				; cy
?o@@3HA	DD	01H DUP (?)				; o
?P3randpat@@3HA DD 01H DUP (?)				; P3randpat
?P3randpat2@@3HA DD 01H DUP (?)				; P3randpat2
?isSafe@@3HA DD	01H DUP (?)				; isSafe
?g_bCast@@3HA DD 01H DUP (?)				; g_bCast
?g_bCRight@@3HA DD 01H DUP (?)				; g_bCRight
?g_bCLeft@@3HA DD 01H DUP (?)				; g_bCLeft
?g_bCFire@@3HA DD 01H DUP (?)				; g_bCFire
?g_bHit@@3HA DD	01H DUP (?)				; g_bHit
?Mirror@@3HA DD	01H DUP (?)				; Mirror
?BossAtt@@3HA DD 01H DUP (?)				; BossAtt
?BAR@@3HA DD	01H DUP (?)				; BAR
?BAL@@3HA DD	01H DUP (?)				; BAL
?BARR@@3HA DD	01H DUP (?)				; BARR
?BALL@@3HA DD	01H DUP (?)				; BALL
?Muffle@@3HA DD	01H DUP (?)				; Muffle
?P5Mus@@3HA DD	01H DUP (?)				; P5Mus
?CastHit@@3HA DD 01H DUP (?)				; CastHit
?Skilluse@@3HA DD 01H DUP (?)				; Skilluse
?BigHit@@3HA DD	01H DUP (?)				; BigHit
?Randpat@@3HA DD 01H DUP (?)				; Randpat
?Randpat2@@3HA DD 01H DUP (?)				; Randpat2
?P2musicstart@@3HA DD 01H DUP (?)			; P2musicstart
?RandNum@@3PAHA DD 05H DUP (?)				; RandNum
?Maximum@@3HA DD 01H DUP (?)				; Maximum
?Knockspd@@3HA DD 01H DUP (?)				; Knockspd
?KnockHspeed@@3HA DD 01H DUP (?)			; KnockHspeed
?Bframe@@3HA DD	01H DUP (?)				; Bframe
?BAframe@@3HA DD 01H DUP (?)				; BAframe
?Aframe@@3HA DD	01H DUP (?)				; Aframe
?Cframe@@3HA DD	01H DUP (?)				; Cframe
?CAframe@@3HA DD 01H DUP (?)				; CAframe
?CAAframe@@3HA DD 01H DUP (?)				; CAAframe
?BKframe@@3HA DD 01H DUP (?)				; BKframe
?DRframe@@3HA DD 01H DUP (?)				; DRframe
?GAframe@@3HA DD 01H DUP (?)				; GAframe
?SPframe@@3HA DD 01H DUP (?)				; SPframe
?PHframe@@3HA DD 01H DUP (?)				; PHframe
?BHframe@@3PAHA DD 03H DUP (?)				; BHframe
?PSframe@@3HA DD 01H DUP (?)				; PSframe
?SpikeX@@3PAHA DD 0aH DUP (?)				; SpikeX
?SpikeY@@3HA DD	01H DUP (?)				; SpikeY
?Skillcheat@@3HA DD 01H DUP (?)				; Skillcheat
?Pimmune@@3HA DD 01H DUP (?)				; Pimmune
?HIT@@3UtagRECT@@A DB 010H DUP (?)			; HIT
?BOSS@@3UtagRECT@@A DB 010H DUP (?)			; BOSS
?rcDest@@3UtagRECT@@A DB 010H DUP (?)			; rcDest
?BAHIT@@3PAUtagRECT@@A DB 050H DUP (?)			; BAHIT
?PHIT@@3UtagRECT@@A DB 010H DUP (?)			; PHIT
?Cast@@3UtagRECT@@A DB 010H DUP (?)			; Cast
?Knock@@3UtagRECT@@A DB 010H DUP (?)			; Knock
?Spike@@3PAUtagRECT@@A DB 0a0H DUP (?)			; Spike
?p1die@@3HA DD	01H DUP (?)				; p1die
?p2die@@3HA DD	01H DUP (?)				; p2die
?p3die@@3HA DD	01H DUP (?)				; p3die
?Drag@@3HA DD	01H DUP (?)				; Drag
?Knockback@@3HA DD 01H DUP (?)				; Knockback
?KnockHIT@@3HA DD 01H DUP (?)				; KnockHIT
?p3musicstart@@3HA DD 01H DUP (?)			; p3musicstart
?P4Mus@@3HA DD	01H DUP (?)				; P4Mus
?g_bGatt@@3HA DD 01H DUP (?)				; g_bGatt
?g_bSpike@@3HA DD 01H DUP (?)				; g_bSpike
?PHplay@@3HA DD	01H DUP (?)				; PHplay
?BHplay@@3PAHA DD 03H DUP (?)				; BHplay
?BHMPlay@@3HA DD 01H DUP (?)				; BHMPlay
?g_nPhaze@@3HA DD 01H DUP (?)				; g_nPhaze
?Timer@@3PAHA DD 020H DUP (?)				; Timer
_BSS	ENDS
_DATA	SEGMENT
?gbIsFirst@@3HA DD 01H					; gbIsFirst
?gbIsFull@@3HA DD 01H					; gbIsFull
?g_bLookR@@3HA DD 01H					; g_bLookR
?g_bBLR@@3HA DD	01H					; g_bBLR
?Gravity@@3HA DD 0dH					; Gravity
?P1MHP@@3HA DD	0bb8H					; P1MHP
?P2MHP@@3HA DD	01388H					; P2MHP
?P3MHP@@3HA DD	02710H					; P3MHP
?PlayerMHP@@3HA DD 09c40H				; PlayerMHP
?PlayerHPrate@@3MA DD 03f800000r		; 1	; PlayerHPrate
?P1HPrate@@3MA DD 03f800000r			; 1	; P1HPrate
?P2HPrate@@3MA DD 03f800000r			; 1	; P2HPrate
?P3HPrate@@3MA DD 03f800000r			; 1	; P3HPrate
?MaxTime@@3HA DD 01f4H					; MaxTime
?Timerrate@@3MA DD 03f800000r			; 1	; Timerrate
_DATA	ENDS
PUBLIC	_WinMain@16
PUBLIC	___local_stdio_printf_options
PUBLIC	?DXW_Init@@YAHXZ				; DXW_Init
PUBLIC	?DXW_MainLoop@@YAXXZ				; DXW_MainLoop
PUBLIC	?DXW_DisplayInfo@@YAXXZ				; DXW_DisplayInfo
PUBLIC	?DXW_ReleaseWinMode@@YAXXZ			; DXW_ReleaseWinMode
PUBLIC	?__WndProc@@YGJPAUHWND__@@IIJ@Z			; __WndProc
PUBLIC	?__WinKeyDown@@YAXPAUHWND__@@I@Z		; __WinKeyDown
PUBLIC	?__WinDestroy@@YAXXZ				; __WinDestroy
PUBLIC	?__DDInit@@YAHXZ				; __DDInit
PUBLIC	?__DDInitWin@@YAHH@Z				; __DDInitWin
PUBLIC	?__DDSWBlt@@YAJXZ				; __DDSWBlt
PUBLIC	?__ReleaseAllObjects@@YAXXZ			; __ReleaseAllObjects
PUBLIC	?__CreateSurface@@YAPAUIDirectDrawSurface7@@KKH@Z ; __CreateSurface
PUBLIC	?__DDCSetClipperWin@@YAHXZ			; __DDCSetClipperWin
PUBLIC	?__DDCSetClipper@@YAHPAUIDirectDrawSurface7@@HHHH@Z ; __DDCSetClipper
PUBLIC	?__DDCSetClipperList@@YAHPAUIDirectDrawSurface7@@PAUtagRECT@@H@Z ; __DDCSetClipperList
PUBLIC	?__CreateFont@@YAXPBDHH@Z			; __CreateFont
PUBLIC	?__DestroyFont@@YAXXZ				; __DestroyFont
PUBLIC	?__PutText@@YAXHHKPBD@Z				; __PutText
PUBLIC	?__PutTextf@@YAXHHKPADZZ			; __PutTextf
PUBLIC	?__GetDC@@YAXPAUIDirectDrawSurface7@@@Z		; __GetDC
PUBLIC	?__ReleaseDC@@YAXPAUIDirectDrawSurface7@@@Z	; __ReleaseDC
PUBLIC	?__Lock@@YAHPAUIDirectDrawSurface7@@@Z		; __Lock
PUBLIC	?__Unlock@@YAHPAUIDirectDrawSurface7@@@Z	; __Unlock
PUBLIC	?__PutPixel32@@YAXHHK@Z				; __PutPixel32
PUBLIC	?__PutPixel16@@YAXHHG@Z				; __PutPixel16
PUBLIC	?__PutPixel8@@YAXHHE@Z				; __PutPixel8
PUBLIC	?__GetPixel16@@YAGHH@Z				; __GetPixel16
PUBLIC	?__DrawVLine16@@YAXHHHG@Z			; __DrawVLine16
PUBLIC	?__DrawHLine16@@YAXHHHG@Z			; __DrawHLine16
PUBLIC	?__DrawRect16@@YAXHHHHG@Z			; __DrawRect16
PUBLIC	?__CheckRGBBit@@YAKPAUIDirectDrawSurface7@@@Z	; __CheckRGBBit
PUBLIC	?__GetPixelRGB16@@YAGHHH@Z			; __GetPixelRGB16
PUBLIC	?__CPYDDS@@YAXHHPAUtagRECT@@@Z			; __CPYDDS
PUBLIC	?__DDLoadBin@@YAPAUIDirectDrawSurface7@@PBDH@Z	; __DDLoadBin
PUBLIC	?__MEM2DDS@@YAHPAUIDirectDrawSurface7@@PAEHH@Z	; __MEM2DDS
PUBLIC	?__PutImage@@YAXPAUIDirectDrawSurface7@@HH@Z	; __PutImage
PUBLIC	?__PutSprite@@YAXPAUIDirectDrawSurface7@@HH@Z	; __PutSprite
PUBLIC	?__Putbar@@YAXPAUIDirectDrawSurface7@@HHHHM@Z	; __Putbar
PUBLIC	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
PUBLIC	?__PutImageLock@@YAXPAUIDirectDrawSurface7@@HH@Z ; __PutImageLock
PUBLIC	?__PutSpriteLock16@@YAXPAUIDirectDrawSurface7@@HH@Z ; __PutSpriteLock16
PUBLIC	?__PutSpriteLock32@@YAXPAUIDirectDrawSurface7@@HH@Z ; __PutSpriteLock32
PUBLIC	?__PutImageEx@@YAXPAUIDirectDrawSurface7@@HH@Z	; __PutImageEx
PUBLIC	?__PutSpriteEx@@YAXPAUIDirectDrawSurface7@@HH@Z	; __PutSpriteEx
PUBLIC	?__PutSpriteLockFast16@@YAXPAUIDirectDrawSurface7@@HH@Z ; __PutSpriteLockFast16
PUBLIC	?__PutSpriteLockFastEx16@@YAXPAUIDirectDrawSurface7@@HH@Z ; __PutSpriteLockFastEx16
PUBLIC	?__DDSSetColorKeyEx@@YAHPAUIDirectDrawSurface7@@KK@Z ; __DDSSetColorKeyEx
PUBLIC	?__GetClipRect@@YAHHHHHPAUtagRECT@@0@Z		; __GetClipRect
PUBLIC	?__CreateFastVBuffer@@YAHKKK@Z			; __CreateFastVBuffer
PUBLIC	?__CreateFastSBuffer@@YAHKKK@Z			; __CreateFastSBuffer
PUBLIC	?__CreateFastSBuffer2@@YAHKKK@Z			; __CreateFastSBuffer2
PUBLIC	?__PutSpriteCk@@YAXPAUIDirectDrawSurface7@@HH@Z	; __PutSpriteCk
PUBLIC	?__PutSpriteLockFastCkEx16@@YAXPAUIDirectDrawSurface7@@HHK@Z ; __PutSpriteLockFastCkEx16
PUBLIC	?DXW_LUTInit@@YAXXZ				; DXW_LUTInit
PUBLIC	?__FxFadeIn@@YAXPAUIDirectDrawSurface7@@0K@Z	; __FxFadeIn
PUBLIC	?__FxFadeOut@@YAXPAUIDirectDrawSurface7@@0K@Z	; __FxFadeOut
PUBLIC	?__FxFadeInOutEx@@YAXPAUIDirectDrawSurface7@@0K@Z ; __FxFadeInOutEx
PUBLIC	?__FxFadeTo@@YAXPAUIDirectDrawSurface7@@0KKK@Z	; __FxFadeTo
PUBLIC	?__FxGrayScale@@YAXPAUIDirectDrawSurface7@@0@Z	; __FxGrayScale
PUBLIC	?__FxColorize@@YAXPAUIDirectDrawSurface7@@0KKK@Z ; __FxColorize
PUBLIC	?_ChangeDisplayMode@@YAHKKG@Z			; _ChangeDisplayMode
PUBLIC	?__Init@@YAHPAUHINSTANCE__@@H@Z			; __Init
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	?gFpsMng@@3VCFpsMng@@A				; gFpsMng
PUBLIC	?m_HHSound@@3VCHHSound@@A			; m_HHSound
PUBLIC	?P1HP@@3HA					; P1HP
PUBLIC	?P2HP@@3HA					; P2HP
PUBLIC	?P3HP@@3HA					; P3HP
PUBLIC	?PlayerHP@@3HA					; PlayerHP
PUBLIC	??_C@_08ICEDOJGP@DxWFrame@			; `string'
PUBLIC	??_C@_0BG@JAJIBLHA@music?1Diffraction?4wav@	; `string'
PUBLIC	??_C@_0BF@IOJJCNGD@music?1MirrorCage?4wav@	; `string'
PUBLIC	??_C@_0BE@PCCFIAPH@music?1BloodCage?4wav@	; `string'
PUBLIC	??_C@_0BF@PLJGCCMO@sound?1RagingBlow?4wav@	; `string'
PUBLIC	??_C@_0BB@OGFBJJAC@sound?1Charge?4wav@		; `string'
PUBLIC	??_C@_0BG@LFOPIDOF@sound?1Worldreaver?4wav@	; `string'
PUBLIC	??_C@_0BJ@DDLHJIFA@sound?1WorldreaverHit?4wav@	; `string'
PUBLIC	??_C@_0P@MIMHEJLI@image?1Hero?4bmp@		; `string'
PUBLIC	??_C@_0P@MPHNJBIF@image?1Hole?4bmp@		; `string'
PUBLIC	??_C@_0BG@MCGLLKNE@image?1SkillButton?4bmp@	; `string'
PUBLIC	??_C@_0BE@EFMCEHEN@image?1SkillCool?4bmp@	; `string'
PUBLIC	??_C@_0BA@IIOEGDCI@image?1Cast3?4bmp@		; `string'
PUBLIC	??_C@_0BA@JFOBFDJA@image?1Cast4?4bmp@		; `string'
PUBLIC	??_C@_0BF@LBHFHDLC@image?1CastAttack?4bmp@	; `string'
PUBLIC	??_C@_0BM@EFMPOJLK@image?1BossAttackMotionL?4bmp@ ; `string'
PUBLIC	??_C@_0BM@HMBDIKFB@image?1BossAttackMotionR?4bmp@ ; `string'
PUBLIC	??_C@_0BH@PDGBKHPO@image?1BossAttack2R?4bmp@	; `string'
PUBLIC	??_C@_0BH@MKLNMEBF@image?1BossAttack2L?4bmp@	; `string'
PUBLIC	??_C@_0BG@MIHCLFFG@image?1Worldreaver?4bmp@	; `string'
PUBLIC	??_C@_0BH@BGEGJJDF@image?1Boss3AttackL?4bmp@	; `string'
PUBLIC	??_C@_0BH@CPJKPKNO@image?1Boss3AttackR?4bmp@	; `string'
PUBLIC	??_C@_0BJ@OPEOHJGM@image?1Boss3Attack33L?4bmp@	; `string'
PUBLIC	??_C@_0BJ@NGJCBKIH@image?1Boss3Attack33R?4bmp@	; `string'
PUBLIC	??_C@_0BH@OOONBDHA@image?1GroundAttack?4bmp@	; `string'
PUBLIC	??_C@_0BB@IGNNDELJ@image?1HeroRR?4bmp@		; `string'
PUBLIC	??_C@_0BD@JDMLGABL@image?1BossAtt2?4bmp@	; `string'
PUBLIC	??_C@_0BD@FIJHLDLO@image?1BossAtt3?4bmp@	; `string'
PUBLIC	??_C@_0BE@CJOBCKBE@image?1BossStand?4bmp@	; `string'
PUBLIC	??_C@_0BF@JILCBECG@image?1BossStandR?4bmp@	; `string'
PUBLIC	??_C@_0BB@MBFJKOFI@image?1BossHP?4bmp@		; `string'
PUBLIC	??_C@_0BB@MBNFNPOD@image?1Charge?4bmp@		; `string'
PUBLIC	??_C@_0BC@LLIDEHGM@image?1ChargeR?4bmp@		; `string'
PUBLIC	??_C@_0BE@IEPKBFCI@image?1BossHPbar?4bmp@	; `string'
PUBLIC	??_C@_0BD@OCDLPHOG@image?1PlayerHP?4bmp@	; `string'
PUBLIC	??_C@_0BG@IDPPCAHI@image?1PlayerHPbar?4bmp@	; `string'
PUBLIC	??_C@_0BF@GICFCKM@image?1RagingBlow?4bmp@	; `string'
PUBLIC	??_C@_0BG@FNCHEMOA@image?1RagingBlowR?4bmp@	; `string'
PUBLIC	??_C@_0BG@KKLAIKPC@image?1Boss3StandL?4bmp@	; `string'
PUBLIC	??_C@_0BG@JDGMOJBJ@image?1Boss3StandR?4bmp@	; `string'
PUBLIC	??_C@_0BC@LDOKHLD@image?1BossHit?4bmp@		; `string'
PUBLIC	??_C@_0BE@CHMEFLGB@image?1PlayerHit?4bmp@	; `string'
PUBLIC	??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@ ; `string'
PUBLIC	??_C@_0BD@CJHDELKA@?$LP?$MA?G?A?$LN?$LK?E?$KJ?$LI?$LA?$LL?$PN?$LM?$LK?$LN?G?F?P@ ; `string'
PUBLIC	??_C@_0BA@HCGNGLPL@image?1Title?4bmp@		; `string'
PUBLIC	??_C@_0O@MJENNBBN@image?1MI1?4bmp@		; `string'
PUBLIC	??_C@_0O@EPNJKDLD@image?1MI2?4bmp@		; `string'
PUBLIC	??_C@_0O@IEIFHABG@image?1MI3?4bmp@		; `string'
PUBLIC	??_C@_0BD@PFPDFPIN@image?1GameOver?4bmp@	; `string'
PUBLIC	??_C@_0O@EMPBFEPO@image?1End?4bmp@		; `string'
PUBLIC	??_C@_0M@DJJLNBDH@bahnschrift@			; `string'
PUBLIC	??_C@_0M@JLGAMLOF@P3PAT?5?$CFd?1?$CFd@		; `string'
PUBLIC	??_C@_06KJFAFILI@FPS?5?$CFd@			; `string'
PUBLIC	??_C@_05LCKIIOJE@?$CFd?1?$CFd@			; `string'
PUBLIC	??_C@_02JDPG@rb@				; `string'
PUBLIC	??_C@_0L@EKKCFCMM@_DDLoadBin@			; `string'
PUBLIC	___isa_available_default
PUBLIC	__xmm@00000000000000010000000000000001
PUBLIC	__xmm@00000001000000000000000100000000
PUBLIC	__xmm@00000001000000010000000000000000
PUBLIC	__xmm@00000003000000020000000100000000
PUBLIC	__xmm@000002bc00000073000000c800000023
PUBLIC	__xmm@000002bc0000014f000000c8000000ff
PUBLIC	__xmm@000002bc0000022b000000c8000001db
PUBLIC	__xmm@000002bc00000307000000c8000002b7
PUBLIC	__xmm@000002bc000003e3000000c800000393
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@51eb851f51eb851f51eb851f51eb851f
EXTRN	_atexit:PROC
EXTRN	__imp__GetCurrentProcess@0:PROC
EXTRN	__imp__SetPriorityClass@8:PROC
EXTRN	__imp__CreateFontA@56:PROC
EXTRN	__imp__DeleteObject@4:PROC
EXTRN	__imp__GetDeviceCaps@8:PROC
EXTRN	__imp__SelectObject@8:PROC
EXTRN	__imp__SetBkMode@8:PROC
EXTRN	__imp__SetTextColor@8:PROC
EXTRN	__imp__TextOutA@20:PROC
EXTRN	__imp__GetMessageA@16:PROC
EXTRN	__imp__TranslateMessage@4:PROC
EXTRN	__imp__DispatchMessageA@4:PROC
EXTRN	__imp__PeekMessageA@20:PROC
EXTRN	__imp__PostMessageA@16:PROC
EXTRN	__imp__WaitMessage@0:PROC
EXTRN	__imp__DefWindowProcA@16:PROC
EXTRN	__imp__PostQuitMessage@4:PROC
EXTRN	__imp__RegisterClassA@4:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__GetKeyState@4:PROC
EXTRN	__imp__UpdateWindow@4:PROC
EXTRN	__imp__GetDC@4:PROC
EXTRN	__imp__ReleaseDC@8:PROC
EXTRN	__imp__GetClientRect@8:PROC
EXTRN	__imp__SetCursor@4:PROC
EXTRN	__imp__ClientToScreen@8:PROC
EXTRN	__imp__SetRect@20:PROC
EXTRN	__imp__IntersectRect@12:PROC
EXTRN	__imp__OffsetRect@12:PROC
EXTRN	__imp__LoadCursorA@8:PROC
EXTRN	__imp__LoadIconA@8:PROC
EXTRN	__imp__ChangeDisplaySettingsA@8:PROC
EXTRN	_free:PROC
EXTRN	_malloc:PROC
EXTRN	_srand:PROC
EXTRN	_rand:PROC
EXTRN	_fclose:PROC
EXTRN	_fopen:PROC
EXTRN	_fread:PROC
EXTRN	___stdio_common_vsprintf:PROC
EXTRN	__time64:PROC
EXTRN	_DirectDrawCreate@12:PROC
EXTRN	_DirectDrawCreateEx@16:PROC
EXTRN	_DirectDrawCreateClipper@12:PROC
EXTRN	?___Error@@YAHPAD0H@Z:PROC			; ___Error
EXTRN	?___DDError@@YAHJPADH@Z:PROC			; ___DDError
EXTRN	_DDLoadBitmap:PROC
EXTRN	_DDColorMatch:PROC
EXTRN	_DDSetColorKey:PROC
EXTRN	??0CFpsMng@@QAE@XZ:PROC				; CFpsMng::CFpsMng
EXTRN	??1CFpsMng@@UAE@XZ:PROC				; CFpsMng::~CFpsMng
EXTRN	?SetFPS@CFpsMng@@QAEXK@Z:PROC			; CFpsMng::SetFPS
EXTRN	?GetFPS@CFpsMng@@QAEKXZ:PROC			; CFpsMng::GetFPS
EXTRN	?FrameTuningEx@CFpsMng@@QAEXXZ:PROC		; CFpsMng::FrameTuningEx
EXTRN	?Init@CHHSound@@QAEXPAUHWND__@@@Z:PROC		; CHHSound::Init
EXTRN	?LoadWave@CHHSound@@QAE_NPADPAPAUIDirectSoundBuffer@@@Z:PROC ; CHHSound::LoadWave
EXTRN	?Play@CHHSound@@QAEXPAUIDirectSoundBuffer@@_N@Z:PROC ; CHHSound::Play
EXTRN	?Stop@CHHSound@@QAEXPAUIDirectSoundBuffer@@@Z:PROC ; CHHSound::Stop
EXTRN	?SetVolume@CHHSound@@QAEXPAUIDirectSoundBuffer@@J@Z:PROC ; CHHSound::SetVolume
EXTRN	??0CHHSound@@QAE@XZ:PROC			; CHHSound::CHHSound
EXTRN	??1CHHSound@@QAE@XZ:PROC			; CHHSound::~CHHSound
EXTRN	@__security_check_cookie@4:PROC
EXTRN	_memcpy:PROC
EXTRN	_memset:PROC
EXTRN	_IID_IDirectDraw7:BYTE
EXTRN	?hWnd@@3PAUHWND__@@A:DWORD			; hWnd
EXTRN	___isa_available:DWORD
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?gFpsMng@@3VCFpsMng@@A DB 038H DUP (?)			; gFpsMng
?m_HHSound@@3VCHHSound@@A DD 01H DUP (?)		; m_HHSound
?P1HP@@3HA DD	01H DUP (?)				; P1HP
?P2HP@@3HA DD	01H DUP (?)				; P2HP
?P3HP@@3HA DD	01H DUP (?)				; P3HP
?PlayerHP@@3HA DD 01H DUP (?)				; PlayerHP
_BSS	ENDS
;	COMDAT ?bIsFpsMax@?1??__WinKeyDown@@YAXPAUHWND__@@I@Z@4HA
_BSS	SEGMENT
?bIsFpsMax@?1??__WinKeyDown@@YAXPAUHWND__@@I@Z@4HA DD 01H DUP (?) ; `__WinKeyDown'::`2'::bIsFpsMax
_BSS	ENDS
;	COMDAT ___isa_available_default
_BSS	SEGMENT
___isa_available_default DD 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
?gFpsMng$initializer$@@3P6AXXZA DD FLAT:??__EgFpsMng@@YAXXZ ; gFpsMng$initializer$
CRT$XCU	ENDS
;	COMDAT __xmm@51eb851f51eb851f51eb851f51eb851f
CONST	SEGMENT
__xmm@51eb851f51eb851f51eb851f51eb851f DB 01fH, 085H, 0ebH, 'Q', 01fH, 085H
	DB	0ebH, 'Q', 01fH, 085H, 0ebH, 'Q', 01fH, 085H, 0ebH, 'Q'
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __xmm@000002bc000003e3000000c800000393
CONST	SEGMENT
__xmm@000002bc000003e3000000c800000393 DB 093H, 03H, 00H, 00H, 0c8H, 00H, 00H
	DB	00H, 0e3H, 03H, 00H, 00H, 0bcH, 02H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@000002bc00000307000000c8000002b7
CONST	SEGMENT
__xmm@000002bc00000307000000c8000002b7 DB 0b7H, 02H, 00H, 00H, 0c8H, 00H, 00H
	DB	00H, 07H, 03H, 00H, 00H, 0bcH, 02H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@000002bc0000022b000000c8000001db
CONST	SEGMENT
__xmm@000002bc0000022b000000c8000001db DB 0dbH, 01H, 00H, 00H, 0c8H, 00H, 00H
	DB	00H, '+', 02H, 00H, 00H, 0bcH, 02H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@000002bc0000014f000000c8000000ff
CONST	SEGMENT
__xmm@000002bc0000014f000000c8000000ff DB 0ffH, 00H, 00H, 00H, 0c8H, 00H, 00H
	DB	00H, 'O', 01H, 00H, 00H, 0bcH, 02H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@000002bc00000073000000c800000023
CONST	SEGMENT
__xmm@000002bc00000073000000c800000023 DB '#', 00H, 00H, 00H, 0c8H, 00H, 00H
	DB	00H, 's', 00H, 00H, 00H, 0bcH, 02H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000003000000020000000100000000
CONST	SEGMENT
__xmm@00000003000000020000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 02H, 00H, 00H, 00H, 03H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000001000000010000000000000000
CONST	SEGMENT
__xmm@00000001000000010000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 01H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000001000000000000000100000000
CONST	SEGMENT
__xmm@00000001000000000000000100000000 DB 00H, 00H, 00H, 00H, 01H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 01H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT __xmm@00000000000000010000000000000001
CONST	SEGMENT
__xmm@00000000000000010000000000000001 DB 01H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 01H, 00H, 00H, 00H, 00H, 00H, 00H, 00H
CONST	ENDS
;	COMDAT ??_C@_0L@EKKCFCMM@_DDLoadBin@
CONST	SEGMENT
??_C@_0L@EKKCFCMM@_DDLoadBin@ DB '_DDLoadBin', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02JDPG@rb@
CONST	SEGMENT
??_C@_02JDPG@rb@ DB 'rb', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCKIIOJE@?$CFd?1?$CFd@
CONST	SEGMENT
??_C@_05LCKIIOJE@?$CFd?1?$CFd@ DB '%d/%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06KJFAFILI@FPS?5?$CFd@
CONST	SEGMENT
??_C@_06KJFAFILI@FPS?5?$CFd@ DB 'FPS %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@JLGAMLOF@P3PAT?5?$CFd?1?$CFd@
CONST	SEGMENT
??_C@_0M@JLGAMLOF@P3PAT?5?$CFd?1?$CFd@ DB 'P3PAT %d/%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DJJLNBDH@bahnschrift@
CONST	SEGMENT
??_C@_0M@DJJLNBDH@bahnschrift@ DB 'bahnschrift', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EMPBFEPO@image?1End?4bmp@
CONST	SEGMENT
??_C@_0O@EMPBFEPO@image?1End?4bmp@ DB 'image/End.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PFPDFPIN@image?1GameOver?4bmp@
CONST	SEGMENT
??_C@_0BD@PFPDFPIN@image?1GameOver?4bmp@ DB 'image/GameOver.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IEIFHABG@image?1MI3?4bmp@
CONST	SEGMENT
??_C@_0O@IEIFHABG@image?1MI3?4bmp@ DB 'image/MI3.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EPNJKDLD@image?1MI2?4bmp@
CONST	SEGMENT
??_C@_0O@EPNJKDLD@image?1MI2?4bmp@ DB 'image/MI2.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MJENNBBN@image?1MI1?4bmp@
CONST	SEGMENT
??_C@_0O@MJENNBBN@image?1MI1?4bmp@ DB 'image/MI1.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HCGNGLPL@image?1Title?4bmp@
CONST	SEGMENT
??_C@_0BA@HCGNGLPL@image?1Title?4bmp@ DB 'image/Title.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CJHDELKA@?$LP?$MA?G?A?$LN?$LK?E?$KJ?$LI?$LA?$LL?$PN?$LM?$LK?$LN?G?F?P@
CONST	SEGMENT
??_C@_0BD@CJHDELKA@?$LP?$MA?G?A?$LN?$LK?E?$KJ?$LI?$LA?$LL?$PN?$LM?$LK?$LN?G?F?P@ DB 0bfH
	DB	0c0H, 0c7H, 0c1H, 0bdH, 0baH, 0c5H, 0a9H, 0b8H, 0b0H, 0bbH, 0fdH
	DB	0bcH, 0baH, 0bdH, 0c7H, 0c6H, 0d0H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
CONST	SEGMENT
??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@ DB 'c:\users\adm'
	DB	'inistrator\desktop\', 0b1H, 0e8H, 0c1H, 0f6H, 0c8H, 0c6H, ' -'
	DB	' ', 0b9H, 0ccH, 0b7H, 0afH, 0bfH, 0f9H, 0b5H, 0e5H, '\1.src\d'
	DB	'xwframe.cpp', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CHMEFLGB@image?1PlayerHit?4bmp@
CONST	SEGMENT
??_C@_0BE@CHMEFLGB@image?1PlayerHit?4bmp@ DB 'image/PlayerHit.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LDOKHLD@image?1BossHit?4bmp@
CONST	SEGMENT
??_C@_0BC@LDOKHLD@image?1BossHit?4bmp@ DB 'image/BossHit.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JDGMOJBJ@image?1Boss3StandR?4bmp@
CONST	SEGMENT
??_C@_0BG@JDGMOJBJ@image?1Boss3StandR?4bmp@ DB 'image/Boss3StandR.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KKLAIKPC@image?1Boss3StandL?4bmp@
CONST	SEGMENT
??_C@_0BG@KKLAIKPC@image?1Boss3StandL?4bmp@ DB 'image/Boss3StandL.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FNCHEMOA@image?1RagingBlowR?4bmp@
CONST	SEGMENT
??_C@_0BG@FNCHEMOA@image?1RagingBlowR?4bmp@ DB 'image/RagingBlowR.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GICFCKM@image?1RagingBlow?4bmp@
CONST	SEGMENT
??_C@_0BF@GICFCKM@image?1RagingBlow?4bmp@ DB 'image/RagingBlow.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@IDPPCAHI@image?1PlayerHPbar?4bmp@
CONST	SEGMENT
??_C@_0BG@IDPPCAHI@image?1PlayerHPbar?4bmp@ DB 'image/PlayerHPbar.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OCDLPHOG@image?1PlayerHP?4bmp@
CONST	SEGMENT
??_C@_0BD@OCDLPHOG@image?1PlayerHP?4bmp@ DB 'image/PlayerHP.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@IEPKBFCI@image?1BossHPbar?4bmp@
CONST	SEGMENT
??_C@_0BE@IEPKBFCI@image?1BossHPbar?4bmp@ DB 'image/BossHPbar.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LLIDEHGM@image?1ChargeR?4bmp@
CONST	SEGMENT
??_C@_0BC@LLIDEHGM@image?1ChargeR?4bmp@ DB 'image/ChargeR.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MBNFNPOD@image?1Charge?4bmp@
CONST	SEGMENT
??_C@_0BB@MBNFNPOD@image?1Charge?4bmp@ DB 'image/Charge.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MBFJKOFI@image?1BossHP?4bmp@
CONST	SEGMENT
??_C@_0BB@MBFJKOFI@image?1BossHP?4bmp@ DB 'image/BossHP.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@JILCBECG@image?1BossStandR?4bmp@
CONST	SEGMENT
??_C@_0BF@JILCBECG@image?1BossStandR?4bmp@ DB 'image/BossStandR.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CJOBCKBE@image?1BossStand?4bmp@
CONST	SEGMENT
??_C@_0BE@CJOBCKBE@image?1BossStand?4bmp@ DB 'image/BossStand.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@FIJHLDLO@image?1BossAtt3?4bmp@
CONST	SEGMENT
??_C@_0BD@FIJHLDLO@image?1BossAtt3?4bmp@ DB 'image/BossAtt3.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JDMLGABL@image?1BossAtt2?4bmp@
CONST	SEGMENT
??_C@_0BD@JDMLGABL@image?1BossAtt2?4bmp@ DB 'image/BossAtt2.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IGNNDELJ@image?1HeroRR?4bmp@
CONST	SEGMENT
??_C@_0BB@IGNNDELJ@image?1HeroRR?4bmp@ DB 'image/HeroRR.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OOONBDHA@image?1GroundAttack?4bmp@
CONST	SEGMENT
??_C@_0BH@OOONBDHA@image?1GroundAttack?4bmp@ DB 'image/GroundAttack.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@NGJCBKIH@image?1Boss3Attack33R?4bmp@
CONST	SEGMENT
??_C@_0BJ@NGJCBKIH@image?1Boss3Attack33R?4bmp@ DB 'image/Boss3Attack33R.b'
	DB	'mp', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@OPEOHJGM@image?1Boss3Attack33L?4bmp@
CONST	SEGMENT
??_C@_0BJ@OPEOHJGM@image?1Boss3Attack33L?4bmp@ DB 'image/Boss3Attack33L.b'
	DB	'mp', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@CPJKPKNO@image?1Boss3AttackR?4bmp@
CONST	SEGMENT
??_C@_0BH@CPJKPKNO@image?1Boss3AttackR?4bmp@ DB 'image/Boss3AttackR.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BGEGJJDF@image?1Boss3AttackL?4bmp@
CONST	SEGMENT
??_C@_0BH@BGEGJJDF@image?1Boss3AttackL?4bmp@ DB 'image/Boss3AttackL.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MIHCLFFG@image?1Worldreaver?4bmp@
CONST	SEGMENT
??_C@_0BG@MIHCLFFG@image?1Worldreaver?4bmp@ DB 'image/Worldreaver.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@MKLNMEBF@image?1BossAttack2L?4bmp@
CONST	SEGMENT
??_C@_0BH@MKLNMEBF@image?1BossAttack2L?4bmp@ DB 'image/BossAttack2L.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@PDGBKHPO@image?1BossAttack2R?4bmp@
CONST	SEGMENT
??_C@_0BH@PDGBKHPO@image?1BossAttack2R?4bmp@ DB 'image/BossAttack2R.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HMBDIKFB@image?1BossAttackMotionR?4bmp@
CONST	SEGMENT
??_C@_0BM@HMBDIKFB@image?1BossAttackMotionR?4bmp@ DB 'image/BossAttackMot'
	DB	'ionR.bmp', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EFMPOJLK@image?1BossAttackMotionL?4bmp@
CONST	SEGMENT
??_C@_0BM@EFMPOJLK@image?1BossAttackMotionL?4bmp@ DB 'image/BossAttackMot'
	DB	'ionL.bmp', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LBHFHDLC@image?1CastAttack?4bmp@
CONST	SEGMENT
??_C@_0BF@LBHFHDLC@image?1CastAttack?4bmp@ DB 'image/CastAttack.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JFOBFDJA@image?1Cast4?4bmp@
CONST	SEGMENT
??_C@_0BA@JFOBFDJA@image?1Cast4?4bmp@ DB 'image/Cast4.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IIOEGDCI@image?1Cast3?4bmp@
CONST	SEGMENT
??_C@_0BA@IIOEGDCI@image?1Cast3?4bmp@ DB 'image/Cast3.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EFMCEHEN@image?1SkillCool?4bmp@
CONST	SEGMENT
??_C@_0BE@EFMCEHEN@image?1SkillCool?4bmp@ DB 'image/SkillCool.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MCGLLKNE@image?1SkillButton?4bmp@
CONST	SEGMENT
??_C@_0BG@MCGLLKNE@image?1SkillButton?4bmp@ DB 'image/SkillButton.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MPHNJBIF@image?1Hole?4bmp@
CONST	SEGMENT
??_C@_0P@MPHNJBIF@image?1Hole?4bmp@ DB 'image/Hole.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MIMHEJLI@image?1Hero?4bmp@
CONST	SEGMENT
??_C@_0P@MIMHEJLI@image?1Hero?4bmp@ DB 'image/Hero.bmp', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DDLHJIFA@sound?1WorldreaverHit?4wav@
CONST	SEGMENT
??_C@_0BJ@DDLHJIFA@sound?1WorldreaverHit?4wav@ DB 'sound/WorldreaverHit.w'
	DB	'av', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@LFOPIDOF@sound?1Worldreaver?4wav@
CONST	SEGMENT
??_C@_0BG@LFOPIDOF@sound?1Worldreaver?4wav@ DB 'sound/Worldreaver.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@OGFBJJAC@sound?1Charge?4wav@
CONST	SEGMENT
??_C@_0BB@OGFBJJAC@sound?1Charge?4wav@ DB 'sound/Charge.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PLJGCCMO@sound?1RagingBlow?4wav@
CONST	SEGMENT
??_C@_0BF@PLJGCCMO@sound?1RagingBlow?4wav@ DB 'sound/RagingBlow.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PCCFIAPH@music?1BloodCage?4wav@
CONST	SEGMENT
??_C@_0BE@PCCFIAPH@music?1BloodCage?4wav@ DB 'music/BloodCage.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@IOJJCNGD@music?1MirrorCage?4wav@
CONST	SEGMENT
??_C@_0BF@IOJJCNGD@music?1MirrorCage?4wav@ DB 'music/MirrorCage.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JAJIBLHA@music?1Diffraction?4wav@
CONST	SEGMENT
??_C@_0BG@JAJIBLHA@music?1Diffraction?4wav@ DB 'music/Diffraction.wav', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08ICEDOJGP@DxWFrame@
CONST	SEGMENT
??_C@_08ICEDOJGP@DxWFrame@ DB 'DxWFrame', 00H		; `string'
CONST	ENDS
CRT$XCU	SEGMENT
?m_HHSound$initializer$@@3P6AXXZA DD FLAT:??__Em_HHSound@@YAXXZ ; m_HHSound$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?P1HP$initializer$@@3P6AXXZA DD FLAT:??__EP1HP@@YAXXZ	; P1HP$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?P2HP$initializer$@@3P6AXXZA DD FLAT:??__EP2HP@@YAXXZ	; P2HP$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?P3HP$initializer$@@3P6AXXZA DD FLAT:??__EP3HP@@YAXXZ	; P3HP$initializer$
CRT$XCU	ENDS
CRT$XCU	SEGMENT
?PlayerHP$initializer$@@3P6AXXZA DD FLAT:??__EPlayerHP@@YAXXZ ; PlayerHP$initializer$
CRT$XCU	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__Init@@YAHPAUHINSTANCE__@@H@Z
_TEXT	SEGMENT
_wc$ = -40						; size = 40
_hInstance$ = 8						; size = 4
_nCmdShow$ = 12						; size = 4
?__Init@@YAHPAUHINSTANCE__@@H@Z PROC			; __Init, COMDAT

; 237  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 40					; 00000028H
	push	esi

; 238  : 	/////	
; 239  : 	gAppSet.bIsActive      = FALSE;
; 240  : 	gAppSet.bIsDisplayInfo = FALSE;
; 241  : 	gAppSet.bIsPause       = FALSE;	
; 242  : 	gAppSet.bIsRenderBlank = FALSE;
; 243  : 
; 244  :     /////
; 245  :     WNDCLASS  wc;
; 246  : 
; 247  :     wc.style = CS_HREDRAW | CS_VREDRAW;
; 248  :     wc.lpfnWndProc = __WndProc;
; 249  :     wc.cbClsExtra = 0;
; 250  :     wc.cbWndExtra = 0;
; 251  :     wc.hInstance = hInstance;

	mov	esi, DWORD PTR _hInstance$[ebp]

; 252  :     wc.hIcon = LoadIcon( hInstance, IDI_APPLICATION );

	push	32512					; 00007f00H
	push	esi
	mov	DWORD PTR ?gAppSet@@3UtagAPP_SET@@A+4, 0
	mov	DWORD PTR ?gAppSet@@3UtagAPP_SET@@A+8, 0
	mov	DWORD PTR ?gAppSet@@3UtagAPP_SET@@A, 0
	mov	DWORD PTR ?gAppSet@@3UtagAPP_SET@@A+12, 0
	mov	DWORD PTR _wc$[ebp], 3
	mov	DWORD PTR _wc$[ebp+4], OFFSET ?__WndProc@@YGJPAUHWND__@@IIJ@Z ; __WndProc
	mov	DWORD PTR _wc$[ebp+8], 0
	mov	DWORD PTR _wc$[ebp+12], 0
	mov	DWORD PTR _wc$[ebp+16], esi
	call	DWORD PTR __imp__LoadIconA@8

; 253  :     wc.hCursor = LoadCursor( NULL, IDC_ARROW );

	push	32512					; 00007f00H
	push	0
	mov	DWORD PTR _wc$[ebp+20], eax
	call	DWORD PTR __imp__LoadCursorA@8
	mov	DWORD PTR _wc$[ebp+24], eax

; 254  :     wc.hbrBackground = NULL;//GetStockObject(BLACK_BRUSH);
; 255  :     wc.lpszMenuName = NAME;
; 256  :     wc.lpszClassName = NAME;
; 257  :     RegisterClass( &wc );

	lea	eax, DWORD PTR _wc$[ebp]
	push	eax
	mov	DWORD PTR _wc$[ebp+28], 0
	mov	DWORD PTR _wc$[ebp+32], OFFSET ??_C@_08ICEDOJGP@DxWFrame@
	mov	DWORD PTR _wc$[ebp+36], OFFSET ??_C@_08ICEDOJGP@DxWFrame@
	call	DWORD PTR __imp__RegisterClassA@4

; 258  : 
; 259  :     DWORD ExWinStyle, WinStyle;
; 260  : 
; 261  :     #ifdef _DEBUG
; 262  :         ExWinStyle = NULL;
; 263  :         WinStyle = WS_POPUPWINDOW | WS_CAPTION;
; 264  :     #else
; 265  :         ExWinStyle = WS_EX_TOPMOST;
; 266  :         WinStyle = WS_POPUP;
; 267  :     #endif
; 268  : 
; 269  :     hWnd = CreateWindowEx(ExWinStyle,

	push	0
	push	esi
	push	0
	push	0
	push	793					; 00000319H
	push	1030					; 00000406H
	push	0
	push	0
	push	-2147483648				; 80000000H
	push	OFFSET ??_C@_08ICEDOJGP@DxWFrame@
	push	OFFSET ??_C@_08ICEDOJGP@DxWFrame@
	push	8
	call	DWORD PTR __imp__CreateWindowExA@48
	mov	DWORD PTR ?hWnd@@3PAUHWND__@@A, eax	; hWnd
	pop	esi

; 270  :                         NAME,
; 271  :                         TITLE,
; 272  :                         WinStyle,
; 273  :                         0,
; 274  :                         0,
; 275  :                         HRES + HEDGE,
; 276  :                         VRES + VEDGE,
; 277  :                         NULL,
; 278  :                         NULL,
; 279  :                         hInstance,
; 280  :                     	NULL);
; 281  : 
; 282  :     if( !hWnd )	return FALSE;

	test	eax, eax
	je	$LN5@Init

; 283  : 
; 284  :     ShowWindow( hWnd, nCmdShow );

	push	DWORD PTR _nCmdShow$[ebp]
	push	eax
	call	DWORD PTR __imp__ShowWindow@8

; 285  :     UpdateWindow( hWnd );

	push	DWORD PTR ?hWnd@@3PAUHWND__@@A		; hWnd
	call	DWORD PTR __imp__UpdateWindow@4

; 286  : 
; 287  :     /////
; 288  :     HANDLE hProc = ::GetCurrentProcess();

	call	DWORD PTR __imp__GetCurrentProcess@0

; 289  :     #ifdef _DEBUG
; 290  : 		::SetPriorityClass (hProc, NORMAL_PRIORITY_CLASS);
; 291  :     #else
; 292  : 		::SetPriorityClass (hProc, HIGH_PRIORITY_CLASS);

	push	128					; 00000080H
	push	eax
	call	DWORD PTR __imp__SetPriorityClass@8

; 293  :     #endif
; 294  : 		
; 295  : 	   m_HHSound.Init(hWnd);

	push	DWORD PTR ?hWnd@@3PAUHWND__@@A		; hWnd
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Init@CHHSound@@QAEXPAUHWND__@@@Z	; CHHSound::Init

; 296  : 
; 297  : 		//»ç¿îµå ÃÊ±âÈ­
; 298  : 		m_HHSound.LoadWave("music/Diffraction.wav", &g_pDS[0]);

	push	OFFSET ?g_pDS@@3PAPAUIDirectSoundBuffer@@A ; g_pDS
	push	OFFSET ??_C@_0BG@JAJIBLHA@music?1Diffraction?4wav@
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?LoadWave@CHHSound@@QAE_NPADPAPAUIDirectSoundBuffer@@@Z ; CHHSound::LoadWave

; 299  : 		m_HHSound.SetVolume(g_pDS[0], 100);

	push	100					; 00000064H
	push	DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?SetVolume@CHHSound@@QAEXPAUIDirectSoundBuffer@@J@Z ; CHHSound::SetVolume

; 300  : 
; 301  : 		m_HHSound.LoadWave("music/MirrorCage.wav", &g_pDS[1]);

	push	OFFSET ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+4
	push	OFFSET ??_C@_0BF@IOJJCNGD@music?1MirrorCage?4wav@
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?LoadWave@CHHSound@@QAE_NPADPAPAUIDirectSoundBuffer@@@Z ; CHHSound::LoadWave

; 302  : 		m_HHSound.SetVolume(g_pDS[1], 100);

	push	100					; 00000064H
	push	DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+4
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?SetVolume@CHHSound@@QAEXPAUIDirectSoundBuffer@@J@Z ; CHHSound::SetVolume

; 303  : 
; 304  : 		m_HHSound.LoadWave("music/BloodCage.wav", &g_pDS[2]);

	push	OFFSET ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+8
	push	OFFSET ??_C@_0BE@PCCFIAPH@music?1BloodCage?4wav@
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?LoadWave@CHHSound@@QAE_NPADPAPAUIDirectSoundBuffer@@@Z ; CHHSound::LoadWave

; 305  : 		m_HHSound.SetVolume(g_pDS[2], 100);

	push	100					; 00000064H
	push	DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+8
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?SetVolume@CHHSound@@QAEXPAUIDirectSoundBuffer@@J@Z ; CHHSound::SetVolume

; 306  : 
; 307  : 		m_HHSound.LoadWave("sound/RagingBlow.wav", &g_pDS[3]);

	push	OFFSET ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+12
	push	OFFSET ??_C@_0BF@PLJGCCMO@sound?1RagingBlow?4wav@
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?LoadWave@CHHSound@@QAE_NPADPAPAUIDirectSoundBuffer@@@Z ; CHHSound::LoadWave

; 308  : 		m_HHSound.SetVolume(g_pDS[3], 100);

	push	100					; 00000064H
	push	DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+12
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?SetVolume@CHHSound@@QAEXPAUIDirectSoundBuffer@@J@Z ; CHHSound::SetVolume

; 309  : 
; 310  : 		m_HHSound.LoadWave("sound/Charge.wav", &g_pDS[4]);

	push	OFFSET ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+16
	push	OFFSET ??_C@_0BB@OGFBJJAC@sound?1Charge?4wav@
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?LoadWave@CHHSound@@QAE_NPADPAPAUIDirectSoundBuffer@@@Z ; CHHSound::LoadWave

; 311  : 		m_HHSound.SetVolume(g_pDS[4], 100);

	push	100					; 00000064H
	push	DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+16
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?SetVolume@CHHSound@@QAEXPAUIDirectSoundBuffer@@J@Z ; CHHSound::SetVolume

; 312  : 
; 313  : 		m_HHSound.LoadWave("sound/Worldreaver.wav", &g_pDS[5]);

	push	OFFSET ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+20
	push	OFFSET ??_C@_0BG@LFOPIDOF@sound?1Worldreaver?4wav@
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?LoadWave@CHHSound@@QAE_NPADPAPAUIDirectSoundBuffer@@@Z ; CHHSound::LoadWave

; 314  : 		m_HHSound.SetVolume(g_pDS[5], 100);

	push	100					; 00000064H
	push	DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+20
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?SetVolume@CHHSound@@QAEXPAUIDirectSoundBuffer@@J@Z ; CHHSound::SetVolume

; 315  : 
; 316  : 		m_HHSound.LoadWave("sound/WorldreaverHit.wav", &g_pDS[6]);

	push	OFFSET ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+24
	push	OFFSET ??_C@_0BJ@DDLHJIFA@sound?1WorldreaverHit?4wav@
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?LoadWave@CHHSound@@QAE_NPADPAPAUIDirectSoundBuffer@@@Z ; CHHSound::LoadWave

; 317  : 		m_HHSound.SetVolume(g_pDS[6], 100);

	push	100					; 00000064H
	push	DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+24
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?SetVolume@CHHSound@@QAEXPAUIDirectSoundBuffer@@J@Z ; CHHSound::SetVolume

; 318  : 		
; 319  : 		///// ÀÔ·ÂÀåÄ¡ ÃÊ±âÈ­
; 320  : 	///// ÀÔ·ÂÀåÄ¡ ÃÊ±âÈ­
; 321  : 
; 322  : 
; 323  : 	/////
; 324  :     BOOL rval = DXW_Init();

	call	?DXW_Init@@YAHXZ			; DXW_Init

; 325  :     if (!rval) return FALSE;

	test	eax, eax
	je	SHORT $LN5@Init

; 326  : 
; 327  :     return TRUE;

	mov	eax, 1

; 328  : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@Init:

; 325  :     if (!rval) return FALSE;

	xor	eax, eax

; 328  : }

	mov	esp, ebp
	pop	ebp
	ret	0
?__Init@@YAHPAUHINSTANCE__@@H@Z ENDP			; __Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?_ChangeDisplayMode@@YAHKKG@Z
_TEXT	SEGMENT
_dm$ = -160						; size = 156
__$ArrayPad$ = -4					; size = 4
_dwWidth$ = 8						; size = 4
_dwHeight$ = 12						; size = 4
_wBPP$ = 16						; size = 2
?_ChangeDisplayMode@@YAHKKG@Z PROC			; _ChangeDisplayMode, COMDAT

; 221  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 222  : 	DEVMODE dm;
; 223  : 	LONG    rval;
; 224  : 	
; 225  : 	dm.dmPelsWidth  = dwWidth;

	mov	eax, DWORD PTR _dwWidth$[ebp]
	mov	DWORD PTR _dm$[ebp+108], eax

; 226  : 	dm.dmPelsHeight = dwHeight;

	mov	eax, DWORD PTR _dwHeight$[ebp]
	mov	DWORD PTR _dm$[ebp+112], eax

; 227  : 	dm.dmBitsPerPel = wBPP;

	movzx	eax, WORD PTR _wBPP$[ebp]
	mov	DWORD PTR _dm$[ebp+104], eax

; 228  : 	dm.dmFields     = DM_PELSWIDTH | DM_PELSHEIGHT | DM_BITSPERPEL;
; 229  : 
; 230  :     rval = ChangeDisplaySettings(&dm, 0);

	lea	eax, DWORD PTR _dm$[ebp]
	push	0
	push	eax
	mov	DWORD PTR _dm$[ebp+40], 1835008		; 001c0000H
	call	DWORD PTR __imp__ChangeDisplaySettingsA@8

; 231  :     if (rval != DISP_CHANGE_SUCCESSFUL) return FALSE;
; 232  : 
; 233  : 	return TRUE;
; 234  : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	neg	eax
	sbb	eax, eax
	xor	ecx, ebp
	inc	eax
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?_ChangeDisplayMode@@YAHKKG@Z ENDP			; _ChangeDisplayMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ??__EPlayerHP@@YAXXZ
text$di	SEGMENT
??__EPlayerHP@@YAXXZ PROC				; `dynamic initializer for 'PlayerHP'', COMDAT

; 169  : int PlayerHP = PlayerMHP;

	mov	eax, DWORD PTR ?PlayerMHP@@3HA		; PlayerMHP
	mov	DWORD PTR ?PlayerHP@@3HA, eax		; PlayerHP
	ret	0
??__EPlayerHP@@YAXXZ ENDP				; `dynamic initializer for 'PlayerHP''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ??__EP3HP@@YAXXZ
text$di	SEGMENT
??__EP3HP@@YAXXZ PROC					; `dynamic initializer for 'P3HP'', COMDAT

; 148  : int P3HP = P3MHP;

	mov	eax, DWORD PTR ?P3MHP@@3HA		; P3MHP
	mov	DWORD PTR ?P3HP@@3HA, eax		; P3HP
	ret	0
??__EP3HP@@YAXXZ ENDP					; `dynamic initializer for 'P3HP''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ??__EP2HP@@YAXXZ
text$di	SEGMENT
??__EP2HP@@YAXXZ PROC					; `dynamic initializer for 'P2HP'', COMDAT

; 146  : int P2HP = P2MHP;

	mov	eax, DWORD PTR ?P2MHP@@3HA		; P2MHP
	mov	DWORD PTR ?P2HP@@3HA, eax		; P2HP
	ret	0
??__EP2HP@@YAXXZ ENDP					; `dynamic initializer for 'P2HP''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ??__EP1HP@@YAXXZ
text$di	SEGMENT
??__EP1HP@@YAXXZ PROC					; `dynamic initializer for 'P1HP'', COMDAT

; 144  : int P1HP = P1MHP;

	mov	eax, DWORD PTR ?P1MHP@@3HA		; P1MHP
	mov	DWORD PTR ?P1HP@@3HA, eax		; P1HP
	ret	0
??__EP1HP@@YAXXZ ENDP					; `dynamic initializer for 'P1HP''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__Fm_HHSound@@YAXXZ
text$yd	SEGMENT
??__Fm_HHSound@@YAXXZ PROC				; `dynamic atexit destructor for 'm_HHSound'', COMDAT
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	jmp	??1CHHSound@@QAE@XZ			; CHHSound::~CHHSound
??__Fm_HHSound@@YAXXZ ENDP				; `dynamic atexit destructor for 'm_HHSound''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ??__Em_HHSound@@YAXXZ
text$di	SEGMENT
??__Em_HHSound@@YAXXZ PROC				; `dynamic initializer for 'm_HHSound'', COMDAT

; 83   : CHHSound m_HHSound;

	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	??0CHHSound@@QAE@XZ			; CHHSound::CHHSound
	push	OFFSET ??__Fm_HHSound@@YAXXZ		; `dynamic atexit destructor for 'm_HHSound''
	call	_atexit
	pop	ecx
	ret	0
??__Em_HHSound@@YAXXZ ENDP				; `dynamic initializer for 'm_HHSound''
text$di	ENDS
; Function compile flags: /Ogtp
;	COMDAT ??__FgFpsMng@@YAXXZ
text$yd	SEGMENT
??__FgFpsMng@@YAXXZ PROC				; `dynamic atexit destructor for 'gFpsMng'', COMDAT
	mov	ecx, OFFSET ?gFpsMng@@3VCFpsMng@@A	; gFpsMng
	jmp	??1CFpsMng@@UAE@XZ			; CFpsMng::~CFpsMng
??__FgFpsMng@@YAXXZ ENDP				; `dynamic atexit destructor for 'gFpsMng''
text$yd	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ??__EgFpsMng@@YAXXZ
text$di	SEGMENT
??__EgFpsMng@@YAXXZ PROC				; `dynamic initializer for 'gFpsMng'', COMDAT

; 47   : CFpsMng		gFpsMng;

	mov	ecx, OFFSET ?gFpsMng@@3VCFpsMng@@A	; gFpsMng
	call	??0CFpsMng@@QAE@XZ			; CFpsMng::CFpsMng
	push	OFFSET ??__FgFpsMng@@YAXXZ		; `dynamic atexit destructor for 'gFpsMng''
	call	_atexit
	pop	ecx
	ret	0
??__EgFpsMng@@YAXXZ ENDP				; `dynamic initializer for 'gFpsMng''
text$di	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__FxColorize@@YAXPAUIDirectDrawSurface7@@0KKK@Z
_TEXT	SEGMENT
_lpDDSDst$ = 8						; size = 4
_lpDDSSrc$ = 12						; size = 4
_R2$ = 16						; size = 4
_G2$ = 20						; size = 4
_B2$ = 24						; size = 4
?__FxColorize@@YAXPAUIDirectDrawSurface7@@0KKK@Z PROC	; __FxColorize, COMDAT

; 6231 : 	/*
; 6232 : 	DWORD R, G, B;
; 6233 : 	DWORD RGB1,RGB2;
; 6234 : 	DWORD RGBRGB;
; 6235 : 	DDSURFACEDESC2 ddsdEffectSrc, ddsdEffectDst;
; 6236 : 	HRESULT ddrval;
; 6237 : 	DWORD  ix, iy;
; 6238 : 	
; 6239 : 	if (g_dwRGBBitCount == 16)
; 6240 : 	{											
; 6241 : 		// R = R * R2 / 32
; 6242 : 		// G = G * G2 / 64
; 6243 : 		// B = B * B2 / 32				
; 6244 : 	}
; 6245 : 	*/
; 6246 : }

	ret	0
?__FxColorize@@YAXPAUIDirectDrawSurface7@@0KKK@Z ENDP	; __FxColorize
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__FxGrayScale@@YAXPAUIDirectDrawSurface7@@0@Z
_TEXT	SEGMENT
_lpDDSDst$ = 8						; size = 4
_lpDDSSrc$ = 12						; size = 4
?__FxGrayScale@@YAXPAUIDirectDrawSurface7@@0@Z PROC	; __FxGrayScale, COMDAT

; 6213 : 	/*
; 6214 : 	DWORD R, G, B;
; 6215 : 	DWORD RGB1,RGB2, Gray;
; 6216 : 	DWORD RGBRGB;
; 6217 : 	DDSURFACEDESC2 ddsdEffectSrc, ddsdEffectDst;
; 6218 : 	HRESULT ddrval;
; 6219 : 	DWORD  ix, iy;
; 6220 : 	
; 6221 : 	if (g_dwRGBBitCount == 16)
; 6222 : 	{
; 6223 : 		// Gray = (R + (G/2) + B) / 3;
; 6224 : 		// RGB1 = GetPixelRGB565(Gray, Gray*2, Gray);
; 6225 : 	}
; 6226 : 	*/
; 6227 : }

	ret	0
?__FxGrayScale@@YAXPAUIDirectDrawSurface7@@0@Z ENDP	; __FxGrayScale
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__FxFadeTo@@YAXPAUIDirectDrawSurface7@@0KKK@Z
_TEXT	SEGMENT
_lpDDSDst$ = 8						; size = 4
_lpDDSSrc$ = 12						; size = 4
_R2$ = 16						; size = 4
_G2$ = 20						; size = 4
_B2$ = 24						; size = 4
?__FxFadeTo@@YAXPAUIDirectDrawSurface7@@0KKK@Z PROC	; __FxFadeTo, COMDAT

; 6187 : 	/*
; 6188 : 	DWORD R, G, B;
; 6189 : 	DWORD RGB1;
; 6190 : 	DWORD RGB2;	
; 6191 : 	DWORD RGBRGB;
; 6192 : 	DDSURFACEDESC2 ddsdEffectSrc, ddsdEffectDst;
; 6193 : 	HRESULT ddrval;
; 6194 : 	DWORD  ix, iy, i;
; 6195 : 	
; 6196 : 	if (g_dwRGBBitCount == 16)
; 6197 : 	{		
; 6198 : 		RGBRGB = *(lpEffectSrc+ix);
; 6199 : 
; 6200 : 		// ÇÈ¼¿ º¯Çü ( RGB Áõ°¨ )
; 6201 : 
; 6202 : 		RGBRGB = (RGB2 << 16) | RGB1;
; 6203 : 		
; 6204 : 		*(lpEffectSrc+ix) = RGBRGB;
; 6205 : 		*(lpEffectDst+ix) = RGBRGB;		
; 6206 : 	}
; 6207 : 	*/
; 6208 : }

	ret	0
?__FxFadeTo@@YAXPAUIDirectDrawSurface7@@0KKK@Z ENDP	; __FxFadeTo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__FxFadeInOutEx@@YAXPAUIDirectDrawSurface7@@0K@Z
_TEXT	SEGMENT
_lpDDSDst$ = 8						; size = 4
_lpDDSSrc$ = 12						; size = 4
_dwRate$ = 16						; size = 4
?__FxFadeInOutEx@@YAXPAUIDirectDrawSurface7@@0K@Z PROC	; __FxFadeInOutEx, COMDAT

; 6164 : 	/*
; 6165 : 	DWORD RGB1;
; 6166 : 	DWORD RGB2;
; 6167 : 	DWORD R, G, B;
; 6168 : 	DWORD RGBRGB;
; 6169 : 	DDSURFACEDESC2 ddsdEffectSrc, ddsdEffectDst;
; 6170 : 	HRESULT ddrval;
; 6171 : 	DWORD  ix, iy;
; 6172 : 	
; 6173 : 	if (g_dwRGBBitCount == 16)
; 6174 : 	{
; 6175 : 		//// °í¼ÓÃ³¸®¸¦ À§ÇØ Look Up Table ÂüÁ¶ ( ¹Ì¸® °è»êµÈ °á°ú, DXW_LUTInit() )
; 6176 : 		R = g_dwFADELUT[R][dwRate];
; 6177 : 		G = g_dwFADELUT[G][dwRate];
; 6178 : 		B = g_dwFADELUT[B][dwRate];
; 6179 : 	}
; 6180 : 	*/
; 6181 : }

	ret	0
?__FxFadeInOutEx@@YAXPAUIDirectDrawSurface7@@0K@Z ENDP	; __FxFadeInOutEx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__FxFadeOut@@YAXPAUIDirectDrawSurface7@@0K@Z
_TEXT	SEGMENT
_lpDDSDst$ = 8						; size = 4
_lpDDSSrc$ = 12						; size = 4
_dwRateStep$ = 16					; size = 4
?__FxFadeOut@@YAXPAUIDirectDrawSurface7@@0K@Z PROC	; __FxFadeOut, COMDAT

; 6140 : 	/*
; 6141 : 	DWORD RGB1;
; 6142 : 	DWORD RGB2;
; 6143 : 	DWORD R, G, B;
; 6144 : 	DWORD RGBRGB;
; 6145 : 	DDSURFACEDESC2 ddsdEffectSrc, ddsdEffectDst;
; 6146 : 	HRESULT ddrval;
; 6147 : 	DWORD  ix, iy, dwRate;
; 6148 : 	
; 6149 : 	if (g_dwRGBBitCount == 16)
; 6150 : 	{
; 6151 : 										
; 6152 : 		R = R * dwRate/100; 
; 6153 : 		G = G * dwRate/100; 
; 6154 : 		B = B * dwRate/100; 					
; 6155 : 	}
; 6156 : 	*/
; 6157 : }

	ret	0
?__FxFadeOut@@YAXPAUIDirectDrawSurface7@@0K@Z ENDP	; __FxFadeOut
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__FxFadeIn@@YAXPAUIDirectDrawSurface7@@0K@Z
_TEXT	SEGMENT
_lpDDSDst$ = 8						; size = 4
_lpDDSSrc$ = 12						; size = 4
_dwRateStep$ = 16					; size = 4
?__FxFadeIn@@YAXPAUIDirectDrawSurface7@@0K@Z PROC	; __FxFadeIn, COMDAT

; 6120 : 	/*DWORD RGB1;
; 6121 : 	DWORD RGB2;
; 6122 : 	DWORD R, G, B;
; 6123 : 	DWORD RGBRGB;
; 6124 : 	DDSURFACEDESC2 ddsdEffectSrc, ddsdEffectDst;
; 6125 : 	HRESULT ddrval;
; 6126 : 	DWORD  ix, iy, dwRate;
; 6127 : 	
; 6128 : 	if (g_dwRGBBitCount == 16)
; 6129 : 	{										
; 6130 : 		R = R * dwRate/100; 
; 6131 : 		G = G * dwRate/100; 
; 6132 : 		B = B * dwRate/100;
; 6133 : 	}*/
; 6134 : }

	ret	0
?__FxFadeIn@@YAXPAUIDirectDrawSurface7@@0K@Z ENDP	; __FxFadeIn
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?DXW_LUTInit@@YAXXZ
_TEXT	SEGMENT
tv809 = -12						; size = 4
tv807 = -8						; size = 4
tv800 = -4						; size = 4
?DXW_LUTInit@@YAXXZ PROC				; DXW_LUTInit, COMDAT

; 486  : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	ebx

; 487  : 	//// Fade Look Up Table »ý¼º
; 488  : 	for (DWORD dwDepth=0; dwDepth < 64; dwDepth++)

	xor	ebx, ebx
	mov	DWORD PTR tv809[ebp], 64		; 00000040H
	push	esi
	push	edi
	xor	edi, edi
	mov	eax, OFFSET ?g_dwFADELUT@@3PAY0GF@KA+16
	mov	DWORD PTR tv807[ebp], edi
	lea	ecx, DWORD PTR [ebx+5]
	mov	DWORD PTR tv800[ebp], eax
$LL4@DXW_LUTIni:

; 489  : 	{
; 490  : 		for (DWORD dwRate=0; dwRate <= 100; dwRate++)

	movd	xmm0, ebx
	xor	edx, edx
	cmp	DWORD PTR ___isa_available, 2
	pshufd	xmm3, xmm0, 0
	jl	$LN25@DXW_LUTIni
	movaps	xmm4, XMMWORD PTR __xmm@00000003000000020000000100000000
	mov	esi, eax
	movaps	xmm2, XMMWORD PTR __xmm@51eb851f51eb851f51eb851f51eb851f
	movd	xmm5, ecx
	lea	ecx, DWORD PTR [edx+8]
$LL7@DXW_LUTIni:

; 491  : 		{
; 492  : 			g_dwFADELUT[dwDepth][dwRate] = dwDepth * dwRate/100;

	movd	xmm0, edx
	lea	eax, DWORD PTR [ecx-4]
	pshufd	xmm1, xmm0, 0
	lea	esi, DWORD PTR [esi+64]
	paddd	xmm1, xmm4
	add	edx, 16					; 00000010H
	pmulld	xmm1, xmm3
	movaps	xmm0, xmm1
	punpckldq xmm0, xmm1
	pmuludq	xmm0, xmm2
	punpckhdq xmm1, xmm1
	pmuludq	xmm1, xmm2
	shufps	xmm0, xmm1, 221				; 000000ddH
	psrld	xmm0, xmm5
	movups	XMMWORD PTR [esi-80], xmm0
	movd	xmm0, eax
	lea	eax, DWORD PTR [ecx+4]
	pshufd	xmm1, xmm0, 0
	paddd	xmm1, xmm4
	pmulld	xmm1, xmm3
	movaps	xmm0, xmm1
	punpckldq xmm0, xmm1
	pmuludq	xmm0, xmm2
	punpckhdq xmm1, xmm1
	pmuludq	xmm1, xmm2
	shufps	xmm0, xmm1, 221				; 000000ddH
	psrld	xmm0, xmm5
	movups	XMMWORD PTR [esi-64], xmm0
	movd	xmm0, ecx
	add	ecx, 16					; 00000010H
	pshufd	xmm1, xmm0, 0
	paddd	xmm1, xmm4
	pmulld	xmm1, xmm3
	movaps	xmm0, xmm1
	punpckldq xmm0, xmm1
	pmuludq	xmm0, xmm2
	punpckhdq xmm1, xmm1
	pmuludq	xmm1, xmm2
	shufps	xmm0, xmm1, 221				; 000000ddH
	psrld	xmm0, xmm5
	movups	XMMWORD PTR [esi-48], xmm0
	movd	xmm0, eax
	pshufd	xmm1, xmm0, 0
	paddd	xmm1, xmm4
	pmulld	xmm1, xmm3
	movaps	xmm0, xmm1
	punpckldq xmm0, xmm1
	punpckhdq xmm1, xmm1
	pmuludq	xmm0, xmm2
	pmuludq	xmm1, xmm2
	shufps	xmm0, xmm1, 221				; 000000ddH
	psrld	xmm0, xmm5
	movups	XMMWORD PTR [esi-32], xmm0
	cmp	ecx, 103				; 00000067H
	jbe	$LL7@DXW_LUTIni

; 489  : 	{
; 490  : 		for (DWORD dwRate=0; dwRate <= 100; dwRate++)

	cmp	edx, 100				; 00000064H
	ja	SHORT $LN2@DXW_LUTIni
$LN25@DXW_LUTIni:
	lea	eax, DWORD PTR [edi+edx]
	mov	ecx, edx
	mov	edi, 101				; 00000065H
	imul	ecx, ebx
	lea	esi, DWORD PTR ?g_dwFADELUT@@3PAY0GF@KA[eax*4]
	sub	edi, edx
	npad	8
$LL24@DXW_LUTIni:

; 491  : 		{
; 492  : 			g_dwFADELUT[dwDepth][dwRate] = dwDepth * dwRate/100;

	mov	eax, 1374389535				; 51eb851fH
	lea	esi, DWORD PTR [esi+4]
	mul	ecx
	add	ecx, ebx
	shr	edx, 5
	mov	DWORD PTR [esi-4], edx
	sub	edi, 1
	jne	SHORT $LL24@DXW_LUTIni
	mov	edi, DWORD PTR tv807[ebp]
$LN2@DXW_LUTIni:

; 487  : 	//// Fade Look Up Table »ý¼º
; 488  : 	for (DWORD dwDepth=0; dwDepth < 64; dwDepth++)

	mov	eax, DWORD PTR tv800[ebp]
	add	edi, 101				; 00000065H
	add	eax, 404				; 00000194H
	mov	DWORD PTR tv807[ebp], edi
	inc	ebx
	mov	DWORD PTR tv800[ebp], eax
	sub	DWORD PTR tv809[ebp], 1
	mov	ecx, 5
	jne	$LL4@DXW_LUTIni

; 493  : 		}
; 494  : 	}	
; 495  : }

	pop	edi
	pop	esi
	pop	ebx
	mov	esp, ebp
	pop	ebp
	ret	0
?DXW_LUTInit@@YAXXZ ENDP				; DXW_LUTInit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__PutSpriteLockFastCkEx16@@YAXPAUIDirectDrawSurface7@@HHK@Z
_TEXT	SEGMENT
tv770 = -456						; size = 4
tv771 = -452						; size = 4
tv768 = -448						; size = 4
_dwWidthSrc$1$ = -444					; size = 4
_dwColorSpaceLowValueMixed2$1$ = -440			; size = 4
_lpDDS$GSCopy$1$ = -436					; size = 4
_dwHeight$1$ = -432					; size = 4
_lpDDSSrc$1$ = -428					; size = 4
_lpDDSDst$1$ = -424					; size = 4
_dwColorSpaceLowValue$1$ = -420				; size = 4
_dwColorSpaceLowValueMixed$1$ = -416			; size = 4
_dwWidth$1$ = -412					; size = 4
_ddsdDst$ = -408					; size = 124
_ddsdSrc$ = -284					; size = 124
_ddsd$ = -160						; size = 124
_rcDst$ = -36						; size = 16
_rcSrc$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpDDS$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_dwColorKey2$ = 20					; size = 4
?__PutSpriteLockFastCkEx16@@YAXPAUIDirectDrawSurface7@@HHK@Z PROC ; __PutSpriteLockFastCkEx16, COMDAT

; 5216 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 456				; 000001c8H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _lpDDS$[ebp]

; 5217 : 	//// Å¬¸³ÇÎ ¿µ¿ª±¸ÇÏ±â
; 5218 : 	//// Ç¥¸éÀÇ Á¤º¸ ¾ò±â
; 5219 : 	DDSURFACEDESC2 ddsd;
; 5220 :     ddsd.dwSize = sizeof(ddsd);
; 5221 :     //ddsd.dwFlags = DDSD_HEIGHT | DDSD_WIDTH;
; 5222 : 	lpDDS->GetSurfaceDesc(&ddsd);

	lea	edx, DWORD PTR _ddsd$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR [ecx]
	push	edx
	push	ecx
	mov	DWORD PTR _lpDDS$GSCopy$1$[ebp], ecx
	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH
	call	DWORD PTR [eax+88]

; 5223 : 
; 5224 : 	//// ½ºÅ©¸°ÁÂÇ¥ÀÇ RECT¸¦ ±¸ÇÑ´Ù
; 5225 : 	RECT rcDst = { x, y, x+ddsd.dwWidth, y+ddsd.dwHeight };

	mov	esi, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _ddsd$[ebp+12]
	mov	ecx, DWORD PTR _ddsd$[ebp+8]
	mov	DWORD PTR _rcDst$[ebp], esi
	mov	DWORD PTR _rcDst$[ebp+4], eax

; 5226 : 	RECT rcSrc = { 0, 0, ddsd.dwWidth, ddsd.dwHeight };

	mov	DWORD PTR _rcSrc$[ebp], 0
	lea	ebx, DWORD PTR [edx+esi]
	mov	DWORD PTR _rcDst$[ebp+8], ebx
	lea	edi, DWORD PTR [ecx+eax]
	mov	DWORD PTR _rcDst$[ebp+12], edi
	mov	DWORD PTR _rcSrc$[ebp+4], 0
	mov	DWORD PTR _rcSrc$[ebp+8], edx
	mov	DWORD PTR _rcSrc$[ebp+12], ecx

; 5227 : 
; 5228 : 	//// ½ºÅ©¸° ¹ÛÀ¸·Î ³ª°¡¸é Ãâ·ÂÇÏÁö ¾Ê´Â´Ù
; 5229 : 	if (x >= HRES || y >= VRES) return;

	cmp	esi, 1024				; 00000400H
	jge	$LN13@PutSpriteL
	cmp	eax, 768				; 00000300H
	jge	$LN13@PutSpriteL

; 5230 : 	if (rcDst.right <= 0 || rcDst.bottom <= 0) return;

	test	ebx, ebx
	jle	$LN13@PutSpriteL
	test	edi, edi
	jle	$LN13@PutSpriteL

; 5231 : 	
; 5232 : 	//// ½ºÇÁ¶óÀÌÆ®°¡ ½ºÅ©¸° ¹ÛÀ¸·Î ³ª°£ ¸¸Å­ Ãâ·ÂÇÏÁö ¾Ê´Â´Ù
; 5233 : 	//// ¿ÀÇÁ ½ºÅ©¸°ÀÇ »ç°¢¿µ¿ªÀ» °¨¼Ò ½ÃÄÑ Å¬¸®ÇÎÀ» ±¸ÇöÇÑ´Ù	
; 5234 : 
; 5235 : 	//// ¼öÆò º¸Á¤
; 5236 : 	if (x < 0)

	test	esi, esi
	jns	SHORT $LN14@PutSpriteL

; 5237 : 	{
; 5238 : 		// ÁÂº¯À» ÁÙÀÎ´Ù. rcSrc.left += ³Ñ¾î°£ Å©±â, abs(x)
; 5239 : 		rcSrc.left -= x;

	neg	esi

; 5240 : 		rcDst.left=x=0;		

	mov	DWORD PTR _rcDst$[ebp], 0
	mov	DWORD PTR _rcSrc$[ebp], esi
	jmp	SHORT $LN16@PutSpriteL
$LN14@PutSpriteL:

; 5241 : 	}
; 5242 : 	else if (rcDst.right >= HRES)

	cmp	ebx, 1024				; 00000400H
	jl	SHORT $LN16@PutSpriteL

; 5243 : 	{
; 5244 : 		// ¿ìº¯À» ÁÙÀÎ´Ù. rcSrc.right -= ³Ñ¾î°£ Å©±â
; 5245 : 		int nOverSize = (rcDst.right - HRES);		
; 5246 : 		rcSrc.right -= nOverSize;

	sub	edx, ebx

; 5247 : 		rcDst.right -= nOverSize;

	mov	DWORD PTR _rcDst$[ebp+8], 1024		; 00000400H
	add	edx, 1024				; 00000400H
	mov	DWORD PTR _rcSrc$[ebp+8], edx
$LN16@PutSpriteL:

; 5248 : 	}
; 5249 : 	//// ¼öÁ÷ º¸Á¤
; 5250 : 	if (y < 0)

	test	eax, eax
	jns	SHORT $LN17@PutSpriteL

; 5251 : 	{
; 5252 : 		// »óº¯À» ÁÙÀÎ´Ù. rcSrc.top += ³Ñ¾î°£ Å©±â, abs(y)
; 5253 : 		rcSrc.top -= y;

	neg	eax

; 5254 : 		rcDst.top=y=0;

	mov	DWORD PTR _rcDst$[ebp+4], 0
	mov	DWORD PTR _rcSrc$[ebp+4], eax
	jmp	SHORT $LN19@PutSpriteL
$LN17@PutSpriteL:

; 5255 : 	}
; 5256 : 	else if (rcDst.bottom >= VRES )

	cmp	edi, 768				; 00000300H
	jl	SHORT $LN19@PutSpriteL

; 5257 : 	{
; 5258 : 		// ÇÏº¯À» ÁÙÀÎ´Ù. rcSrc.bottom -= ³Ñ¾î°£ Å©±â 
; 5259 : 		int nOverSize = (rcDst.bottom - VRES);
; 5260 : 		rcSrc.bottom -= nOverSize;

	sub	ecx, edi

; 5261 : 		rcDst.bottom -= nOverSize;

	mov	DWORD PTR _rcDst$[ebp+12], 768		; 00000300H
	add	ecx, 768				; 00000300H
	mov	DWORD PTR _rcSrc$[ebp+12], ecx
$LN19@PutSpriteL:

; 5262 : 	}
; 5263 : 
; 5264 : 	////////////////////// 
; 5265 : 	DWORD RGBRGB;
; 5266 : 	DWORD sRGB1, sRGB2;
; 5267 : 
; 5268 : 	DWORD ix, iy;
; 5269 :     DDSURFACEDESC2 ddsdSrc, ddsdDst;
; 5270 : 
; 5271 : 	//// ¼Ò½ºÇ¥¸é Lock
; 5272 : 	ZeroMemory(&ddsdSrc, sizeof(ddsdSrc));	

	push	120					; 00000078H
	lea	eax, DWORD PTR _ddsdSrc$[ebp+4]
	push	0
	push	eax
	call	_memset

; 5273 : 	ddsdSrc.dwSize = sizeof(ddsdSrc);
; 5274 : 	HRESULT ddrval = lpDDS->Lock(&rcSrc, &ddsdSrc, DDLOCK_READONLY|DDLOCK_WAIT, NULL);

	mov	ebx, DWORD PTR _lpDDS$GSCopy$1$[ebp]
	lea	ecx, DWORD PTR _ddsdSrc$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ddsdSrc$[ebp], 124		; 0000007cH
	mov	eax, DWORD PTR [ebx]
	push	0
	push	17					; 00000011H
	push	ecx
	lea	ecx, DWORD PTR _rcSrc$[ebp]
	push	ecx
	push	ebx
	call	DWORD PTR [eax+100]

; 5275 :     if (ddrval != DD_OK) { DDERRCHK(ddrval); return; }

	test	eax, eax
	je	SHORT $LN20@PutSpriteL
	push	5275					; 0000149bH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
	pop	edi

; 5398 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@PutSpriteL:

; 5276 :     
; 5277 :     //// ¸ñÀûÇ¥¸éÀÇ RECT
; 5278 :     //RECT rcDest = { x, y, x+ddsdSrc.dwWidth, y+ddsdSrc.dwHeight };
; 5279 : 
; 5280 : 	//// ¸ñÀûÇ¥¸é Lock
; 5281 : 	ZeroMemory(&ddsdDst, sizeof(ddsdDst));	

	push	120					; 00000078H
	lea	eax, DWORD PTR _ddsdDst$[ebp+4]
	push	0
	push	eax
	call	_memset

; 5282 : 	ddsdDst.dwSize = sizeof(ddsdDst);
; 5283 : 	ddrval = g_pDDSBack->Lock(&rcDst, &ddsdDst, DDLOCK_WRITEONLY|DDLOCK_WAIT, NULL);

	mov	eax, DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	lea	edx, DWORD PTR _ddsdDst$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ddsdDst$[ebp], 124		; 0000007cH
	mov	ecx, DWORD PTR [eax]
	push	0
	push	33					; 00000021H
	push	edx
	lea	edx, DWORD PTR _rcDst$[ebp]
	push	edx
	push	eax
	call	DWORD PTR [ecx+100]
	mov	esi, eax

; 5284 :     if (ddrval != DD_OK)

	test	esi, esi
	je	SHORT $LN21@PutSpriteL

; 5285 :     {
; 5286 :     	//// ¼Ò½ºÇ¥¸éÀº Lock »óÅÂÀÌ¹Ç·Î Unlock
; 5287 :         lpDDS->Unlock(&rcSrc);

	mov	ecx, DWORD PTR [ebx]
	lea	eax, DWORD PTR _rcSrc$[ebp]
	push	eax
	push	ebx
	call	DWORD PTR [ecx+128]

; 5288 :         DDERRCHK(ddrval);

	push	5288					; 000014a8H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	esi
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
	pop	edi

; 5398 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@PutSpriteL:

; 5289 :         return;
; 5290 :     }
; 5291 : 
; 5292 : 	//// Ç¥¸éÀÇ ÁÖ¼Ò
; 5293 : 	DWORD* lpDDSSrc = (DWORD*) ddsdSrc.lpSurface;
; 5294 : 	DWORD* lpDDSDst = (DWORD*) ddsdDst.lpSurface;
; 5295 : 	WORD*  lpDDSDstTemp;
; 5296 : 
; 5297 : 	//TRACE1("%x\n", lpDDSSrc);
; 5298 : 
; 5299 : 	//// ¼Ò½ºÇ¥¸éÀÇ ÄÃ·¯Å° ÂüÁ¶
; 5300 : 	DWORD dwColorSpaceLowValue = ddsdSrc.ddckCKSrcBlt.dwColorSpaceLowValue;
; 5301 : 	
; 5302 : 	////
; 5303 : 	DWORD dwSrcPitch = ddsdSrc.lPitch >> 2; // 4¹ÙÀÌÆ® Á¤·Ä, /4
; 5304 : 	DWORD dwDstPitch = ddsdDst.lPitch >> 2;
; 5305 : 
; 5306 : 	DWORD dwWidthSrc = rcSrc.right-rcSrc.left;

	mov	edi, DWORD PTR _rcSrc$[ebp+8]
	sub	edi, DWORD PTR _rcSrc$[ebp]
	mov	ecx, DWORD PTR _ddsdDst$[ebp+16]

; 5307 : 	DWORD dwWidth  = dwWidthSrc >> 1;       // 2°³ÀÇ ÇÈ¼¿À» ÀÐÀ¸¹Ç·Î /2

	mov	ebx, edi
	mov	eax, DWORD PTR _ddsdDst$[ebp+36]

; 5308 : 	DWORD dwHeight = rcSrc.bottom-rcSrc.top;
; 5309 : 	//// È¦¼öÆøÀÎ °æ¿ì ³ª¸ÓÁö ÇÃ·¡±× ( 1 ÇÈ¼¿ )
; 5310 : 	BOOL bIsRemain = FALSE;
; 5311 : 	if (dwWidthSrc % 2) bIsRemain = TRUE;

	and	edi, 1
	mov	edx, DWORD PTR _ddsdSrc$[ebp+36]
	mov	esi, DWORD PTR _ddsdSrc$[ebp+64]
	shr	ebx, 1
	mov	DWORD PTR _dwWidth$1$[ebp], ebx
	mov	ebx, DWORD PTR _rcSrc$[ebp+12]
	sub	ebx, DWORD PTR _rcSrc$[ebp+4]
	sar	ecx, 2

; 5312 : 
; 5313 : 	//// BPP
; 5314 : 	switch(g_dwRGBBitCount)

	cmp	DWORD PTR ?g_dwRGBBitCount@@3KA, 16	; g_dwRGBBitCount, 00000010H
	mov	DWORD PTR _lpDDSDst$1$[ebp], eax
	mov	eax, DWORD PTR _ddsdSrc$[ebp+16]
	mov	DWORD PTR _lpDDSSrc$1$[ebp], edx
	mov	DWORD PTR _dwColorSpaceLowValue$1$[ebp], esi
	mov	DWORD PTR _dwHeight$1$[ebp], ebx
	mov	DWORD PTR _dwWidthSrc$1$[ebp], edi
	jne	$LN5@PutSpriteL

; 5315 : 	{
; 5316 : 	case 16 :
; 5317 : 		{
; 5318 : 			//// µÎ°³ÀÇ ÇÈ¼¿¿¡ ´ëÇÑ ÄÃ·¯Å° °ªÀ» ±¸ÇÑ´Ù. °í¼Ó ÆÇÁ¤À» À§ÇÑ OR ¿¬»ê
; 5319 : 			DWORD dwColorSpaceLowValueMixed = dwColorSpaceLowValue << 16 | dwColorSpaceLowValue;

	mov	ebx, esi
	shl	ebx, 16					; 00000010H
	or	ebx, esi
	mov	DWORD PTR _dwColorSpaceLowValueMixed$1$[ebp], ebx

; 5320 : 			DWORD dwColorSpaceLowValueMixed2 = dwColorKey2 << 16 | dwColorKey2;

	mov	ebx, DWORD PTR _dwColorKey2$[ebp]
	mov	esi, ebx
	shl	esi, 16					; 00000010H
	or	esi, ebx

; 5321 : 
; 5322 : 			if (g_dwPixelFormat == RGB565)

	cmp	DWORD PTR ?g_dwPixelFormat@@3KA, 565	; g_dwPixelFormat, 00000235H
	mov	DWORD PTR _dwColorSpaceLowValueMixed2$1$[ebp], esi
	jne	$LN5@PutSpriteL

; 5323 : 			{
; 5324 : 				for (iy=0; iy < dwHeight; iy++)

	mov	esi, DWORD PTR _dwHeight$1$[ebp]
	test	esi, esi
	je	$LN5@PutSpriteL
	and	eax, -4					; fffffffcH
	mov	DWORD PTR tv771[ebp], eax
	lea	eax, DWORD PTR [ecx*4]
	mov	ecx, DWORD PTR _lpDDSDst$1$[ebp]
	mov	DWORD PTR tv770[ebp], eax
	mov	eax, DWORD PTR _dwWidth$1$[ebp]
	npad	3
$LL6@PutSpriteL:

; 5325 : 				{
; 5326 : 					for (ix=0; ix < dwWidth; ix++)

	xor	edi, edi
	test	eax, eax
	je	$LN8@PutSpriteL
	mov	esi, edx
	add	ecx, 4
	sub	esi, DWORD PTR _lpDDSDst$1$[ebp]
	mov	DWORD PTR tv768[ebp], esi
	mov	esi, DWORD PTR _dwColorSpaceLowValueMixed$1$[ebp]
$LL9@PutSpriteL:

; 5327 : 					{
; 5328 : 						//// µÎ°³ÀÇ ÇÈ¼¿À» ¾ò¾î¿Â´Ù
; 5329 : 						//memcpy(&RGBRGB, lpDDSSrc+ix, 4);
; 5330 : 						RGBRGB = *(lpDDSSrc+ix);

	mov	edx, DWORD PTR [edx+edi*4]

; 5331 : 						
; 5332 : 						//// µÎ°³ÀÇ ÇÈ¼¿ÀÌ ÄÃ·¯Å°ÀÌ¸é ·çÇÁ¹Ýº¹ ( ´ÙÀ½ ÇÈ¼¿ ±×·ìÀ» ¾ò´Â´Ù )
; 5333 : 						if (RGBRGB == dwColorSpaceLowValueMixed) continue;

	cmp	edx, esi
	je	$LN7@PutSpriteL

; 5334 : 						if (RGBRGB == dwColorSpaceLowValueMixed2) continue;

	cmp	edx, DWORD PTR _dwColorSpaceLowValueMixed2$1$[ebp]
	je	$LN7@PutSpriteL

; 5335 : 						
; 5336 : 						//// ÇÈ¼¿À» ºÐ¸®ÇÑ´Ù
; 5337 : 						sRGB1 = RGBRGB & 0x0000FFFF;
; 5338 : 						sRGB2 = RGBRGB >> 16;

	mov	eax, edx
	movzx	esi, dx
	shr	eax, 16					; 00000010H

; 5339 : 						
; 5340 : 						//// ¼Ò½ºÇ¥¸éÀÇ ÇÈ¼¿ sRGB1,2°¡ ÀÌ¹ÌÁöÀÎ °æ¿ì
; 5341 : 						if ((sRGB1 != dwColorSpaceLowValue && sRGB2 != dwColorSpaceLowValue) &&

	cmp	esi, DWORD PTR _dwColorSpaceLowValue$1$[ebp]
	je	SHORT $LN30@PutSpriteL
	cmp	eax, DWORD PTR _dwColorSpaceLowValue$1$[ebp]
	je	SHORT $LN28@PutSpriteL
	cmp	esi, ebx
	je	SHORT $LN30@PutSpriteL
	cmp	eax, ebx
	je	SHORT $LN28@PutSpriteL

; 5342 : 							(sRGB1 != dwColorKey2          && sRGB2 != dwColorKey2))
; 5343 : 						{
; 5344 : 							//memcpy(lpDDSDst+ix, &RGBRGB, 4);
; 5345 : 							*(lpDDSDst+ix) = RGBRGB;							

	mov	esi, DWORD PTR _dwColorSpaceLowValue$1$[ebp]
	mov	DWORD PTR [ecx-4], edx
	jmp	SHORT $LN32@PutSpriteL
$LN28@PutSpriteL:

; 5346 : 						}
; 5347 : 						//// ¼Ò½ºÇ¥¸éÀÇ ÇÈ¼¿ sRGB1ÀÌ ÀÌ¹ÌÁö ÇÈ¼¿ÀÎ °æ¿ì
; 5348 : 						// else if (sRGB1 != dwColorSpaceLowValue && sRGB2 == dwColorSpaceLowValue )
; 5349 : 						else if (sRGB1 != dwColorSpaceLowValue && sRGB1 != dwColorKey2)

	cmp	esi, ebx
	je	SHORT $LN30@PutSpriteL

; 5350 : 						{							
; 5351 : 							lpDDSDstTemp = (WORD*)(lpDDSDst+ix);
; 5352 : 							*lpDDSDstTemp = (WORD)sRGB1;							

	mov	WORD PTR [ecx-4], si
	mov	esi, DWORD PTR _dwColorSpaceLowValue$1$[ebp]
	jmp	SHORT $LN32@PutSpriteL
$LN30@PutSpriteL:

; 5353 : 						}
; 5354 : 						//// ¼Ò½ºÇ¥¸éÀÇ ÇÈ¼¿ sRGB1ÀÌ ÀÌ¹ÌÁö ÇÈ¼¿ÀÎ °æ¿ì
; 5355 : 						// else if (sRGB1 == dwColorSpaceLowValue && sRGB2 != dwColorSpaceLowValue )
; 5356 : 						else if (sRGB2 != dwColorSpaceLowValue && sRGB2 != dwColorKey2)

	mov	esi, DWORD PTR _dwColorSpaceLowValue$1$[ebp]
	cmp	eax, esi
	je	SHORT $LN32@PutSpriteL
	cmp	eax, ebx
	je	SHORT $LN32@PutSpriteL

; 5357 : 						//else 
; 5358 : 						{
; 5359 : 							lpDDSDstTemp = (WORD*)(lpDDSDst+ix);
; 5360 : 							*(lpDDSDstTemp+1) = (WORD)sRGB2;

	mov	WORD PTR [ecx-2], ax
$LN32@PutSpriteL:

; 5361 : 						}
; 5362 : 
; 5363 : 
; 5364 : 						//// È¦¼öÆø, 1 ÇÈ¼¿
; 5365 : 						// if (bIsRemain && ix == dwWidth-1)						
; 5366 : 						if (ix == dwWidth-1)

	mov	eax, DWORD PTR _dwWidth$1$[ebp]
	dec	eax
	cmp	edi, eax
	jne	SHORT $LN52@PutSpriteL

; 5367 : 						{
; 5368 : 							if (bIsRemain)

	cmp	DWORD PTR _dwWidthSrc$1$[ebp], 0
	je	SHORT $LN52@PutSpriteL

; 5369 : 							{								
; 5370 : 								sRGB1 = *(lpDDSSrc+ix+1) & 0x0000FFFF;

	mov	eax, DWORD PTR tv768[ebp]
	movzx	eax, WORD PTR [eax+ecx]

; 5371 : 								if (sRGB1 != dwColorSpaceLowValue && sRGB1 != dwColorKey2)

	cmp	eax, esi
	je	SHORT $LN52@PutSpriteL
	mov	esi, DWORD PTR _dwColorSpaceLowValueMixed$1$[ebp]
	cmp	eax, ebx
	je	SHORT $LN54@PutSpriteL

; 5372 : 								{
; 5373 : 									lpDDSDstTemp = (WORD*)(lpDDSDst+ix+1);
; 5374 : 									*lpDDSDstTemp = (WORD)sRGB1;

	mov	WORD PTR [ecx], ax
	jmp	SHORT $LN54@PutSpriteL
$LN52@PutSpriteL:

; 5325 : 				{
; 5326 : 					for (ix=0; ix < dwWidth; ix++)

	mov	esi, DWORD PTR _dwColorSpaceLowValueMixed$1$[ebp]
$LN54@PutSpriteL:
	mov	eax, DWORD PTR _dwWidth$1$[ebp]
$LN7@PutSpriteL:
	mov	edx, DWORD PTR _lpDDSSrc$1$[ebp]
	inc	edi
	add	ecx, 4
	cmp	edi, eax
	jb	$LL9@PutSpriteL
	mov	ecx, DWORD PTR _lpDDSDst$1$[ebp]
	mov	esi, DWORD PTR _dwHeight$1$[ebp]
$LN8@PutSpriteL:

; 5375 : 								}
; 5376 : 							}
; 5377 : 						}
; 5378 : 					}
; 5379 : 					lpDDSSrc += dwSrcPitch;

	add	edx, DWORD PTR tv771[ebp]

; 5380 : 					lpDDSDst += dwDstPitch;

	add	ecx, DWORD PTR tv770[ebp]
	sub	esi, 1
	mov	DWORD PTR _lpDDSSrc$1$[ebp], edx
	mov	DWORD PTR _lpDDSDst$1$[ebp], ecx
	mov	DWORD PTR _dwHeight$1$[ebp], esi
	jne	$LL6@PutSpriteL
$LN5@PutSpriteL:

; 5381 : 				}
; 5382 : 			}	
; 5383 : 			else if (g_dwPixelFormat == BGR565)
; 5384 : 			{
; 5385 : 			}
; 5386 : 			else if (g_dwPixelFormat == RGB555)
; 5387 : 			{
; 5388 : 			}
; 5389 : 			break;
; 5390 : 		}
; 5391 : 	case 24 :
; 5392 : 	case 32 : break;
; 5393 : 	}
; 5394 : 	
; 5395 : 	//// Ç¥¸é Unlock
; 5396 :     g_pDDSBack->Unlock(&rcDst);

	mov	eax, DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	lea	edx, DWORD PTR _rcDst$[ebp]
	push	edx
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+128]

; 5397 :     lpDDS->Unlock(&rcSrc);	

	mov	ecx, DWORD PTR _lpDDS$GSCopy$1$[ebp]
	lea	edx, DWORD PTR _rcSrc$[ebp]
	push	edx
	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+128]
$LN13@PutSpriteL:

; 5398 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?__PutSpriteLockFastCkEx16@@YAXPAUIDirectDrawSurface7@@HHK@Z ENDP ; __PutSpriteLockFastCkEx16
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__PutSpriteCk@@YAXPAUIDirectDrawSurface7@@HH@Z
_TEXT	SEGMENT
_ddbltfx$1 = -384					; size = 100
_ddsdVBF$ = -284					; size = 124
_ddsdSrc$ = -160					; size = 124
_rcDst$ = -36						; size = 16
_rSrc$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpDDS$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?__PutSpriteCk@@YAXPAUIDirectDrawSurface7@@HH@Z PROC	; __PutSpriteCk, COMDAT

; 6065 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 384				; 00000180H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	edi
	mov	edi, DWORD PTR _lpDDS$[ebp]

; 6066 : 	ASSERT(lpDDS != NULL);
; 6067 : 
; 6068 : 	//// Ç¥¸éÀÇ Å©±â Á¤º¸¸¦ ¾ò´Â´Ù ( ÀÓ½ÃÄÚµå )
; 6069 : 	DDSURFACEDESC2 ddsdSrc, ddsdVBF;
; 6070 :     ddsdSrc.dwSize = sizeof(ddsdSrc);
; 6071 : 	ddsdVBF.dwSize = sizeof(ddsdVBF);
; 6072 : 	lpDDS->GetSurfaceDesc(&ddsdSrc);

	lea	ecx, DWORD PTR _ddsdSrc$[ebp]
	push	ecx
	push	edi
	mov	DWORD PTR _ddsdSrc$[ebp], 124		; 0000007cH
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR _ddsdVBF$[ebp], 124		; 0000007cH
	call	DWORD PTR [eax+88]

; 6073 : 	g_pDDSVBuffer->GetSurfaceDesc(&ddsdVBF);

	mov	eax, DWORD PTR ?g_pDDSVBuffer@@3PAUIDirectDrawSurface7@@A ; g_pDDSVBuffer
	lea	edx, DWORD PTR _ddsdVBF$[ebp]
	push	edx
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+88]

; 6074 : 
; 6075 : 	//// Å¬¸³ÇÎ ¿µ¿ªÀ» ±¸ÇÑ´Ù
; 6076 : 	// Ç¥¸é ÀçÀü¼ÛÀÇ ÃÖ¼ÒÈ­ ( src -> vbuff )
; 6077 :     RECT rSrc, rcDst;
; 6078 :     if (!__GetClipRect(x, y, ddsdSrc.dwWidth, ddsdSrc.dwHeight, &rSrc, &rcDst)) return;

	lea	eax, DWORD PTR _rcDst$[ebp]
	push	eax
	lea	eax, DWORD PTR _rSrc$[ebp]
	push	eax
	push	DWORD PTR _ddsdSrc$[ebp+8]
	push	DWORD PTR _ddsdSrc$[ebp+12]
	push	DWORD PTR _y$[ebp]
	push	DWORD PTR _x$[ebp]
	call	?__GetClipRect@@YAHHHHHPAUtagRECT@@0@Z	; __GetClipRect
	add	esp, 24					; 00000018H
	test	eax, eax
	je	$LN6@PutSpriteC

; 6079 : 
; 6080 :     /////
; 6081 :     if (g_pDDSVBuffer)

	push	esi
	mov	esi, DWORD PTR ?g_pDDSVBuffer@@3PAUIDirectDrawSurface7@@A ; g_pDDSVBuffer
	test	esi, esi
	je	$LN11@PutSpriteC

; 5926 : 	ZeroMemory(&ddbltfx, sizeof(ddbltfx));

	push	100					; 00000064H
	lea	eax, DWORD PTR _ddbltfx$1[ebp]
	push	0
	push	eax
	call	_memset

; 5927 : 	ddbltfx.dwSize = sizeof(ddbltfx);
; 5928 : 	ddbltfx.dwFillColor = dwColor;

	mov	eax, DWORD PTR _ddsdVBF$[ebp+64]

; 5929 : 
; 5930 : 	HRESULT ddrval = lpDDSDest->Blt(lpRect, NULL, NULL, DDBLT_WAIT | DDBLT_COLORFILL, &ddbltfx);

	lea	ecx, DWORD PTR _ddbltfx$1[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ddbltfx$1[ebp+80], eax
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR _ddbltfx$1[ebp], 100		; 00000064H
	push	ecx
	push	16778240				; 01000400H
	push	0
	push	0
	lea	ecx, DWORD PTR _rSrc$[ebp]
	push	ecx
	push	esi
	call	DWORD PTR [eax+20]

; 5931 : 	if (ddrval != DD_OK) DDERRCHK(ddrval);

	test	eax, eax
	je	SHORT $LN9@PutSpriteC
	push	5931					; 0000172bH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN9@PutSpriteC:

; 6082 :     {
; 6083 : 		//// DDSVBuffer¸¦ ÄÃ·¯Å°·Î Ã¤¿î´Ù ( Clean Up )
; 6084 :         _FillRectEx(g_pDDSVBuffer, &rSrc, ddsdVBF.ddckCKSrcBlt.dwColorSpaceLowValue);
; 6085 : 
; 6086 : 		//// ¼Ò½ºÇ¥¸éÀ» DDSVBuffer·Î Àü¼Û ( ÄÃ·¯Å°1 )
; 6087 :         HRESULT ddrval = g_pDDSVBuffer->Blt(&rSrc, lpDDS, &rSrc, DDBLT_KEYSRC|DDBLT_WAIT, NULL);

	mov	eax, DWORD PTR ?g_pDDSVBuffer@@3PAUIDirectDrawSurface7@@A ; g_pDDSVBuffer
	lea	edx, DWORD PTR _rSrc$[ebp]
	push	0
	push	16809984				; 01008000H
	push	edx
	mov	ecx, DWORD PTR [eax]
	push	edi
	push	edx
	push	eax
	call	DWORD PTR [ecx+20]

; 6088 :         if (ddrval != DD_OK) DDERRCHK(ddrval);

	test	eax, eax
	je	SHORT $LN5@PutSpriteC
	push	6088					; 000017c8H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN5@PutSpriteC:

; 6089 : 
; 6090 : 		//// DDSVBuffer¸¦ ¸ñÀûÇ¥¸é( 2Â÷Ç¥¸é )À¸·Î Àü¼Û ( ÄÃ·¯Å°2 )
; 6091 :         ddrval = g_pDDSBack->Blt(&rcDst, g_pDDSVBuffer, &rSrc, DDBLT_KEYSRC|DDBLT_WAIT, NULL);

	mov	eax, DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	lea	edx, DWORD PTR _rSrc$[ebp]
	push	0
	push	16809984				; 01008000H
	push	edx
	push	DWORD PTR ?g_pDDSVBuffer@@3PAUIDirectDrawSurface7@@A ; g_pDDSVBuffer
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _rcDst$[ebp]
	push	edx
	push	eax
	call	DWORD PTR [ecx+20]

; 6092 :         if (ddrval != DD_OK) DDERRCHK(ddrval);	

	test	eax, eax
	je	SHORT $LN11@PutSpriteC
	push	6092					; 000017ccH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN11@PutSpriteC:
	pop	esi
$LN6@PutSpriteC:

; 6093 :     }
; 6094 :     else
; 6095 :     {
; 6096 : 		//// ¿¡¹Ä·¹ÀÌ¼Ç
; 6097 :     }
; 6098 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	pop	edi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?__PutSpriteCk@@YAXPAUIDirectDrawSurface7@@HH@Z ENDP	; __PutSpriteCk
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__CreateFastSBuffer2@@YAHKKK@Z
_TEXT	SEGMENT
_dwWidth$ = 8						; size = 4
_dwHeight$ = 12						; size = 4
_rgb$ = 16						; size = 4
?__CreateFastSBuffer2@@YAHKKK@Z PROC			; __CreateFastSBuffer2, COMDAT

; 6036 : {

	push	ebp
	mov	ebp, esp

; 6037 : 	HRESULT ddrval;
; 6038 : 
; 6039 :     if (g_pDDSSBuffer2) 

	mov	ecx, DWORD PTR ?g_pDDSSBuffer2@@3PAUIDirectDrawSurface7@@A ; g_pDDSSBuffer2
	test	ecx, ecx
	je	SHORT $LN3@CreateFast

; 6040 : 	{
; 6041 : 		ddrval = g_pDDSSBuffer2->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]

; 6042 : 		if (ddrval != DD_OK) { DDERRCHK(ddrval); return FALSE; }

	test	eax, eax
	je	SHORT $LN3@CreateFast
	push	6042					; 0000179aH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN8@CreateFast:

; 6055 : }

	xor	eax, eax
	pop	ebp
	ret	0
$LN3@CreateFast:

; 6043 : 	}
; 6044 : 
; 6045 :     g_pDDSSBuffer2 = __CreateSurface(dwWidth, dwHeight, FALSE);

	push	0
	push	DWORD PTR _dwHeight$[ebp]
	push	DWORD PTR _dwWidth$[ebp]
	call	?__CreateSurface@@YAPAUIDirectDrawSurface7@@KKH@Z ; __CreateSurface
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?g_pDDSSBuffer2@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSSBuffer2

; 6046 :     if (!g_pDDSSBuffer2) return FALSE;

	test	eax, eax
	je	SHORT $LN8@CreateFast

; 6047 : 
; 6048 : 	if (g_dwRGBBitCount >= 16)

	cmp	DWORD PTR ?g_dwRGBBitCount@@3KA, 16	; g_dwRGBBitCount, 00000010H
	jb	SHORT $LN6@CreateFast

; 6049 : 	{		
; 6050 : 		ddrval = DDSetColorKey(g_pDDSSBuffer2, rgb);

	push	DWORD PTR _rgb$[ebp]
	push	eax
	call	_DDSetColorKey
	add	esp, 8

; 6051 : 		if (ddrval != DD_OK) DDERRCHK(ddrval);

	test	eax, eax
	je	SHORT $LN6@CreateFast
	push	6051					; 000017a3H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN6@CreateFast:

; 6052 : 	}
; 6053 : 
; 6054 :     return TRUE;

	mov	eax, 1

; 6055 : }

	pop	ebp
	ret	0
?__CreateFastSBuffer2@@YAHKKK@Z ENDP			; __CreateFastSBuffer2
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__CreateFastSBuffer@@YAHKKK@Z
_TEXT	SEGMENT
_dwWidth$ = 8						; size = 4
_dwHeight$ = 12						; size = 4
_rgb$ = 16						; size = 4
?__CreateFastSBuffer@@YAHKKK@Z PROC			; __CreateFastSBuffer, COMDAT

; 6014 : {

	push	ebp
	mov	ebp, esp

; 6015 : 	HRESULT ddrval;
; 6016 : 
; 6017 :     if (g_pDDSSBuffer) 

	mov	ecx, DWORD PTR ?g_pDDSSBuffer@@3PAUIDirectDrawSurface7@@A ; g_pDDSSBuffer
	test	ecx, ecx
	je	SHORT $LN3@CreateFast

; 6018 : 	{
; 6019 : 		ddrval = g_pDDSSBuffer->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]

; 6020 : 		if (ddrval != DD_OK) { DDERRCHK(ddrval); return FALSE; }

	test	eax, eax
	je	SHORT $LN3@CreateFast
	push	6020					; 00001784H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN8@CreateFast:

; 6033 : }

	xor	eax, eax
	pop	ebp
	ret	0
$LN3@CreateFast:

; 6021 : 	}
; 6022 : 
; 6023 :     g_pDDSSBuffer = __CreateSurface(dwWidth, dwHeight, FALSE);

	push	0
	push	DWORD PTR _dwHeight$[ebp]
	push	DWORD PTR _dwWidth$[ebp]
	call	?__CreateSurface@@YAPAUIDirectDrawSurface7@@KKH@Z ; __CreateSurface
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?g_pDDSSBuffer@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSSBuffer

; 6024 :     if (!g_pDDSSBuffer) return FALSE;

	test	eax, eax
	je	SHORT $LN8@CreateFast

; 6025 : 
; 6026 : 	if (g_dwRGBBitCount >= 16)

	cmp	DWORD PTR ?g_dwRGBBitCount@@3KA, 16	; g_dwRGBBitCount, 00000010H
	jb	SHORT $LN6@CreateFast

; 6027 : 	{		
; 6028 : 		ddrval = DDSetColorKey(g_pDDSSBuffer, rgb);

	push	DWORD PTR _rgb$[ebp]
	push	eax
	call	_DDSetColorKey
	add	esp, 8

; 6029 : 		if (ddrval != DD_OK) DDERRCHK(ddrval);

	test	eax, eax
	je	SHORT $LN6@CreateFast
	push	6029					; 0000178dH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN6@CreateFast:

; 6030 : 	}
; 6031 : 
; 6032 :     return TRUE;

	mov	eax, 1

; 6033 : }

	pop	ebp
	ret	0
?__CreateFastSBuffer@@YAHKKK@Z ENDP			; __CreateFastSBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__CreateFastVBuffer@@YAHKKK@Z
_TEXT	SEGMENT
_dwWidth$ = 8						; size = 4
_dwHeight$ = 12						; size = 4
_rgb$ = 16						; size = 4
?__CreateFastVBuffer@@YAHKKK@Z PROC			; __CreateFastVBuffer, COMDAT

; 5992 : {

	push	ebp
	mov	ebp, esp

; 5993 : 	HRESULT ddrval;
; 5994 : 
; 5995 :     if (g_pDDSVBuffer) 

	mov	ecx, DWORD PTR ?g_pDDSVBuffer@@3PAUIDirectDrawSurface7@@A ; g_pDDSVBuffer
	test	ecx, ecx
	je	SHORT $LN3@CreateFast

; 5996 : 	{
; 5997 : 		ddrval = g_pDDSVBuffer->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]

; 5998 : 		if (ddrval != DD_OK) { DDERRCHK(ddrval); return FALSE; }

	test	eax, eax
	je	SHORT $LN3@CreateFast
	push	5998					; 0000176eH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN8@CreateFast:

; 6011 : }

	xor	eax, eax
	pop	ebp
	ret	0
$LN3@CreateFast:

; 5999 : 	}
; 6000 : 
; 6001 :     g_pDDSVBuffer = __CreateSurface(dwWidth, dwHeight, TRUE);

	push	1
	push	DWORD PTR _dwHeight$[ebp]
	push	DWORD PTR _dwWidth$[ebp]
	call	?__CreateSurface@@YAPAUIDirectDrawSurface7@@KKH@Z ; __CreateSurface
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?g_pDDSVBuffer@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSVBuffer

; 6002 :     if (!g_pDDSVBuffer) return FALSE;

	test	eax, eax
	je	SHORT $LN8@CreateFast

; 6003 : 
; 6004 : 	if (g_dwRGBBitCount >= 16)

	cmp	DWORD PTR ?g_dwRGBBitCount@@3KA, 16	; g_dwRGBBitCount, 00000010H
	jb	SHORT $LN6@CreateFast

; 6005 : 	{		
; 6006 : 		ddrval = DDSetColorKey(g_pDDSVBuffer, rgb);

	push	DWORD PTR _rgb$[ebp]
	push	eax
	call	_DDSetColorKey
	add	esp, 8

; 6007 : 		if (ddrval != DD_OK) DDERRCHK(ddrval);

	test	eax, eax
	je	SHORT $LN6@CreateFast
	push	6007					; 00001777H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN6@CreateFast:

; 6008 : 	}
; 6009 : 
; 6010 :     return TRUE;

	mov	eax, 1

; 6011 : }

	pop	ebp
	ret	0
?__CreateFastVBuffer@@YAHKKK@Z ENDP			; __CreateFastVBuffer
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__GetClipRect@@YAHHHHHPAUtagRECT@@0@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
tv301 = 12						; size = 4
tv293 = 12						; size = 4
tv290 = 12						; size = 4
_y$ = 12						; size = 4
tv302 = 16						; size = 4
_nWidth$ = 16						; size = 4
_nHeight$ = 20						; size = 4
_lprcSrc$ = 24						; size = 4
_lprcDst$ = 28						; size = 4
?__GetClipRect@@YAHHHHHPAUtagRECT@@0@Z PROC		; __GetClipRect, COMDAT

; 5941 : {

	push	ebp
	mov	ebp, esp

; 5942 :     ///// Ç¥¸éÀÇ ³¡ ÁÂÇ¥¸¦ ±¸ÇÑ´Ù
; 5943 : 	int xEnd = x + nWidth;
; 5944 : 	int yEnd = y + nHeight;

	mov	eax, DWORD PTR _nHeight$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _x$[ebp]
	push	esi
	mov	esi, DWORD PTR _nWidth$[ebp]
	push	edi
	mov	edi, DWORD PTR _y$[ebp]
	add	eax, edi
	lea	ecx, DWORD PTR [ebx+esi]

; 5945 : 
; 5946 : 	///// Å¬¸³ÇÎ ¿µ¿ªÀ» ±¸ÇÑ´Ù    
; 5947 : 	RECT rW = { 0, 0, HRES, VRES };

	cmp	ebx, 1024				; 00000400H

; 5948 : 
; 5949 :     ///// Ç¥¸éÀÌ ½ºÅ©¸° ¹ÛÀ¸·Î ³ª°¡¸é Ãâ·ÂÇÏÁö ¾Ê´Â´Ù
; 5950 : 	if (x >= rW.right   || y >= rW.bottom) return FALSE;

	jge	$LN3@GetClipRec
	cmp	edi, 768				; 00000300H
	jge	$LN3@GetClipRec

; 5951 : 	if (xEnd <= rW.left || yEnd <= rW.top) return FALSE;

	test	ecx, ecx
	jle	$LN3@GetClipRec
	test	eax, eax
	jle	$LN3@GetClipRec

; 5952 : 
; 5953 : 	///// ¿ÀÇÁ ½ºÅ©¸°ÀÇ »ç°¢¿µ¿ªÀ» °¨¼Ò ½ÃÄÑ Å¬¸®ÇÎ¿µ¿ªÀ» ±¸ÇöÇÑ´Ù
; 5954 :     RECT rS = { 0, 0, nWidth, nHeight };
; 5955 : 
; 5956 : 	if (x < rW.left)      { rS.left   -= x; }
; 5957 : 	if (y < rW.top)       { rS.top    -= y; }

	mov	edx, ebx
	mov	DWORD PTR tv290[ebp], 0
	neg	edx
	test	ebx, ebx
	cmovns	edx, DWORD PTR tv290[ebp]
	mov	DWORD PTR tv302[ebp], edx

; 5958 : 	if (xEnd > rW.right)  { rS.right  -= (xEnd - rW.right); }	

	mov	edx, edi
	neg	edx
	mov	DWORD PTR tv293[ebp], 0
	test	edi, edi
	cmovns	edx, DWORD PTR tv293[ebp]
	mov	DWORD PTR tv301[ebp], edx
	mov	edx, DWORD PTR _nHeight$[ebp]
	cmp	ecx, 1024				; 00000400H
	jle	SHORT $LN8@GetClipRec
	sub	esi, ecx
	add	esi, 1024				; 00000400H
$LN8@GetClipRec:

; 5959 : 	if (yEnd > rW.bottom) { rS.bottom -= (yEnd - rW.bottom); }

	cmp	eax, 768				; 00000300H
	jle	SHORT $LN9@GetClipRec
	sub	edx, eax
	add	edx, 768				; 00000300H
$LN9@GetClipRec:

; 5960 : 
; 5961 :     ///// ¼Ò½ºÀÇ À¯È¿»ç°¢¿©ºÎ
; 5962 : 	//if (IsRectEmpty(&rS)) return FALSE;
; 5963 : 
; 5964 :     //CopyRect(lprcSrc, &rS);
; 5965 : 	lprcSrc->left   = rS.left;

	mov	eax, DWORD PTR _lprcSrc$[ebp]

; 5966 : 	lprcSrc->top    = rS.top;

	mov	ebx, DWORD PTR tv301[ebp]
	mov	ecx, DWORD PTR tv302[ebp]
	mov	DWORD PTR [eax+4], ebx

; 5967 : 	lprcSrc->right  = rS.right;
; 5968 : 	lprcSrc->bottom = rS.bottom;
; 5969 : 	
; 5970 : 	//SetRect(lprcDst, x+rS.left, y+rS.top, x+rS.right, y+rS.bottom);
; 5971 :     lprcDst->left  = x+rS.left;

	mov	ebx, DWORD PTR _x$[ebp]
	mov	DWORD PTR [eax], ecx
	mov	DWORD PTR [eax+8], esi
	mov	DWORD PTR [eax+12], edx
	lea	eax, DWORD PTR [ecx+ebx]
	mov	ecx, DWORD PTR _lprcDst$[ebp]
	mov	DWORD PTR [ecx], eax

; 5972 :     lprcDst->top   = y+rS.top;

	mov	eax, DWORD PTR tv301[ebp]
	add	eax, edi
	mov	DWORD PTR [ecx+4], eax

; 5973 :     lprcDst->right = x+rS.right;

	lea	eax, DWORD PTR [esi+ebx]
	mov	DWORD PTR [ecx+8], eax

; 5974 :     lprcDst->bottom= y+rS.bottom;

	lea	eax, DWORD PTR [edx+edi]
	pop	edi

; 5975 :     
; 5976 :     return TRUE;
; 5977 : }

	pop	esi
	mov	DWORD PTR [ecx+12], eax
	mov	eax, 1
	pop	ebx
	pop	ebp
	ret	0
$LN3@GetClipRec:
	pop	edi
	pop	esi
	xor	eax, eax
	pop	ebx
	pop	ebp
	ret	0
?__GetClipRect@@YAHHHHHPAUtagRECT@@0@Z ENDP		; __GetClipRect
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__DDSSetColorKeyEx@@YAHPAUIDirectDrawSurface7@@KK@Z
_TEXT	SEGMENT
_ddck$ = -8						; size = 8
_lpDDSDest$ = 8						; size = 4
_rgb1$ = 12						; size = 4
_rgb2$ = 16						; size = 4
?__DDSSetColorKeyEx@@YAHPAUIDirectDrawSurface7@@KK@Z PROC ; __DDSSetColorKeyEx, COMDAT

; 5981 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 8
	push	esi

; 5982 :     DDCOLORKEY              ddck;
; 5983 : 
; 5984 :     ddck.dwColorSpaceLowValue = DDColorMatch(lpDDSDest, rgb1);

	push	DWORD PTR _rgb1$[ebp]
	mov	esi, DWORD PTR _lpDDSDest$[ebp]
	push	esi
	call	_DDColorMatch

; 5985 :     ddck.dwColorSpaceHighValue = DDColorMatch(lpDDSDest, rgb2);

	push	DWORD PTR _rgb2$[ebp]
	mov	DWORD PTR _ddck$[ebp], eax
	push	esi
	call	_DDColorMatch
	add	esp, 16					; 00000010H
	mov	DWORD PTR _ddck$[ebp+4], eax

; 5986 : 	HRESULT ddrval = lpDDSDest->SetColorKey(DDCKEY_SRCBLT | DDCKEY_COLORSPACE, &ddck);

	mov	eax, DWORD PTR [esi]
	lea	ecx, DWORD PTR _ddck$[ebp]
	push	ecx
	push	9
	push	esi
	call	DWORD PTR [eax+116]
	pop	esi

; 5987 : 	if (ddrval != DD_OK) { return DDERRCHK(ddrval); }

	test	eax, eax
	je	SHORT $LN2@DDSSetColo
	push	5987					; 00001763H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH

; 5989 : }

	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@DDSSetColo:

; 5988 : 	return TRUE;    

	mov	eax, 1

; 5989 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?__DDSSetColorKeyEx@@YAHPAUIDirectDrawSurface7@@KK@Z ENDP ; __DDSSetColorKeyEx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__PutSpriteLockFastEx16@@YAXPAUIDirectDrawSurface7@@HH@Z
_TEXT	SEGMENT
tv742 = -448						; size = 4
tv743 = -444						; size = 4
tv740 = -440						; size = 4
_dwWidthSrc$1$ = -436					; size = 4
_lpDDS$GSCopy$1$ = -432					; size = 4
_dwColorSpaceLowValue$1$ = -428				; size = 4
_dwHeight$1$ = -424					; size = 4
_lpDDSDst$1$ = -420					; size = 4
_dwColorSpaceLowValueMixed$1$ = -416			; size = 4
_lpDDSSrc$1$ = -412					; size = 4
_ddsdDst$ = -408					; size = 124
_ddsdSrc$ = -284					; size = 124
_ddsd$ = -160						; size = 124
_rcDst$ = -36						; size = 16
_rcSrc$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpDDS$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?__PutSpriteLockFastEx16@@YAXPAUIDirectDrawSurface7@@HH@Z PROC ; __PutSpriteLockFastEx16, COMDAT

; 5037 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 448				; 000001c0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _lpDDS$[ebp]

; 5038 : 	//// Å¬¸³ÇÎ ¿µ¿ª±¸ÇÏ±â
; 5039 : 	//// Ç¥¸éÀÇ Á¤º¸ ¾ò±â
; 5040 : 	DDSURFACEDESC2 ddsd;
; 5041 :     ddsd.dwSize = sizeof(ddsd);
; 5042 :     //ddsd.dwFlags = DDSD_HEIGHT | DDSD_WIDTH;
; 5043 : 	lpDDS->GetSurfaceDesc(&ddsd);

	lea	edx, DWORD PTR _ddsd$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR [ecx]
	push	edx
	push	ecx
	mov	DWORD PTR _lpDDS$GSCopy$1$[ebp], ecx
	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH
	call	DWORD PTR [eax+88]

; 5044 : 
; 5045 : 	//// ½ºÅ©¸°ÁÂÇ¥ÀÇ RECT¸¦ ±¸ÇÑ´Ù
; 5046 : 	RECT rcDst = { x, y, x+ddsd.dwWidth, y+ddsd.dwHeight };

	mov	esi, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _ddsd$[ebp+12]
	mov	ecx, DWORD PTR _ddsd$[ebp+8]
	mov	DWORD PTR _rcDst$[ebp], esi
	mov	DWORD PTR _rcDst$[ebp+4], eax

; 5047 : 	RECT rcSrc = { 0, 0, ddsd.dwWidth, ddsd.dwHeight };

	mov	DWORD PTR _rcSrc$[ebp], 0
	lea	ebx, DWORD PTR [edx+esi]
	mov	DWORD PTR _rcDst$[ebp+8], ebx
	lea	edi, DWORD PTR [ecx+eax]
	mov	DWORD PTR _rcDst$[ebp+12], edi
	mov	DWORD PTR _rcSrc$[ebp+4], 0
	mov	DWORD PTR _rcSrc$[ebp+8], edx
	mov	DWORD PTR _rcSrc$[ebp+12], ecx

; 5048 : 
; 5049 : 	//// ½ºÅ©¸° ¹ÛÀ¸·Î ³ª°¡¸é Ãâ·ÂÇÏÁö ¾Ê´Â´Ù
; 5050 : 	if (x >= HRES || y >= VRES) return;

	cmp	esi, 1024				; 00000400H
	jge	$LN13@PutSpriteL
	cmp	eax, 768				; 00000300H
	jge	$LN13@PutSpriteL

; 5051 : 	if (rcDst.right <= 0 || rcDst.bottom <= 0) return;

	test	ebx, ebx
	jle	$LN13@PutSpriteL
	test	edi, edi
	jle	$LN13@PutSpriteL

; 5052 : 	
; 5053 : 	//// ½ºÇÁ¶óÀÌÆ®°¡ ½ºÅ©¸° ¹ÛÀ¸·Î ³ª°£ ¸¸Å­ Ãâ·ÂÇÏÁö ¾Ê´Â´Ù
; 5054 : 	//// ¿ÀÇÁ ½ºÅ©¸°ÀÇ »ç°¢¿µ¿ªÀ» °¨¼Ò ½ÃÄÑ Å¬¸®ÇÎÀ» ±¸ÇöÇÑ´Ù	
; 5055 : 
; 5056 : 	//// ¼öÆò º¸Á¤
; 5057 : 	if (x < 0)

	test	esi, esi
	jns	SHORT $LN14@PutSpriteL

; 5058 : 	{
; 5059 : 		// ÁÂº¯À» ÁÙÀÎ´Ù. rcSrc.left += ³Ñ¾î°£ Å©±â, abs(x)
; 5060 : 		rcSrc.left -= x;

	neg	esi

; 5061 : 		rcDst.left=x=0;		

	mov	DWORD PTR _rcDst$[ebp], 0
	mov	DWORD PTR _rcSrc$[ebp], esi
	jmp	SHORT $LN16@PutSpriteL
$LN14@PutSpriteL:

; 5062 : 	}
; 5063 : 	else if (rcDst.right >= HRES)

	cmp	ebx, 1024				; 00000400H
	jl	SHORT $LN16@PutSpriteL

; 5064 : 	{
; 5065 : 		// ¿ìº¯À» ÁÙÀÎ´Ù. rcSrc.right -= ³Ñ¾î°£ Å©±â
; 5066 : 		int nOverSize = (rcDst.right - HRES);		
; 5067 : 		rcSrc.right -= nOverSize;

	sub	edx, ebx

; 5068 : 		rcDst.right -= nOverSize;

	mov	DWORD PTR _rcDst$[ebp+8], 1024		; 00000400H
	add	edx, 1024				; 00000400H
	mov	DWORD PTR _rcSrc$[ebp+8], edx
$LN16@PutSpriteL:

; 5069 : 	}
; 5070 : 	//// ¼öÁ÷ º¸Á¤
; 5071 : 	if (y < 0)

	test	eax, eax
	jns	SHORT $LN17@PutSpriteL

; 5072 : 	{
; 5073 : 		// »óº¯À» ÁÙÀÎ´Ù. rcSrc.top += ³Ñ¾î°£ Å©±â, abs(y)
; 5074 : 		rcSrc.top -= y;

	neg	eax

; 5075 : 		rcDst.top=y=0;

	mov	DWORD PTR _rcDst$[ebp+4], 0
	mov	DWORD PTR _rcSrc$[ebp+4], eax
	jmp	SHORT $LN19@PutSpriteL
$LN17@PutSpriteL:

; 5076 : 	}
; 5077 : 	else if (rcDst.bottom >= VRES )

	cmp	edi, 768				; 00000300H
	jl	SHORT $LN19@PutSpriteL

; 5078 : 	{
; 5079 : 		// ÇÏº¯À» ÁÙÀÎ´Ù. rcSrc.bottom -= ³Ñ¾î°£ Å©±â 
; 5080 : 		int nOverSize = (rcDst.bottom - VRES);
; 5081 : 		rcSrc.bottom -= nOverSize;

	sub	ecx, edi

; 5082 : 		rcDst.bottom -= nOverSize;

	mov	DWORD PTR _rcDst$[ebp+12], 768		; 00000300H
	add	ecx, 768				; 00000300H
	mov	DWORD PTR _rcSrc$[ebp+12], ecx
$LN19@PutSpriteL:

; 5083 : 	}
; 5084 : 
; 5085 : 	////////////////////// 
; 5086 : 	DWORD RGBRGB;
; 5087 : 	DWORD sRGB1, sRGB2;
; 5088 : 
; 5089 : 	DWORD ix, iy;
; 5090 :     DDSURFACEDESC2 ddsdSrc, ddsdDst;
; 5091 : 
; 5092 : 	//// ¼Ò½ºÇ¥¸é Lock
; 5093 : 	ZeroMemory(&ddsdSrc, sizeof(ddsdSrc));	

	push	120					; 00000078H
	lea	eax, DWORD PTR _ddsdSrc$[ebp+4]
	push	0
	push	eax
	call	_memset

; 5094 : 	ddsdSrc.dwSize = sizeof(ddsdSrc);
; 5095 : 	HRESULT ddrval = lpDDS->Lock(&rcSrc, &ddsdSrc, DDLOCK_READONLY|DDLOCK_WAIT, NULL);

	mov	ebx, DWORD PTR _lpDDS$GSCopy$1$[ebp]
	lea	ecx, DWORD PTR _ddsdSrc$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ddsdSrc$[ebp], 124		; 0000007cH
	mov	eax, DWORD PTR [ebx]
	push	0
	push	17					; 00000011H
	push	ecx
	lea	ecx, DWORD PTR _rcSrc$[ebp]
	push	ecx
	push	ebx
	call	DWORD PTR [eax+100]

; 5096 :     if (ddrval != DD_OK) { DDERRCHK(ddrval); return; }

	test	eax, eax
	je	SHORT $LN20@PutSpriteL
	push	5096					; 000013e8H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
	pop	edi

; 5213 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN20@PutSpriteL:

; 5097 :     
; 5098 :     //// ¸ñÀûÇ¥¸éÀÇ RECT
; 5099 :     //RECT rcDest = { x, y, x+ddsdSrc.dwWidth, y+ddsdSrc.dwHeight };
; 5100 : 
; 5101 : 	//// ¸ñÀûÇ¥¸é Lock
; 5102 : 	ZeroMemory(&ddsdDst, sizeof(ddsdDst));	

	push	120					; 00000078H
	lea	eax, DWORD PTR _ddsdDst$[ebp+4]
	push	0
	push	eax
	call	_memset

; 5103 : 	ddsdDst.dwSize = sizeof(ddsdDst);
; 5104 : 	ddrval = g_pDDSBack->Lock(&rcDst, &ddsdDst, DDLOCK_WRITEONLY|DDLOCK_WAIT, NULL);

	mov	eax, DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	lea	edx, DWORD PTR _ddsdDst$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ddsdDst$[ebp], 124		; 0000007cH
	mov	ecx, DWORD PTR [eax]
	push	0
	push	33					; 00000021H
	push	edx
	lea	edx, DWORD PTR _rcDst$[ebp]
	push	edx
	push	eax
	call	DWORD PTR [ecx+100]
	mov	esi, eax

; 5105 :     if (ddrval != DD_OK)

	test	esi, esi
	je	SHORT $LN21@PutSpriteL

; 5106 :     {
; 5107 :     	//// ¼Ò½ºÇ¥¸éÀº Lock »óÅÂÀÌ¹Ç·Î Unlock
; 5108 :         lpDDS->Unlock(&rcSrc);

	mov	ecx, DWORD PTR [ebx]
	lea	eax, DWORD PTR _rcSrc$[ebp]
	push	eax
	push	ebx
	call	DWORD PTR [ecx+128]

; 5109 :         DDERRCHK(ddrval);

	push	5109					; 000013f5H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	esi
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
	pop	edi

; 5213 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN21@PutSpriteL:

; 5110 :         return;
; 5111 :     }
; 5112 : 
; 5113 : 	//// Ç¥¸éÀÇ ÁÖ¼Ò
; 5114 : 	DWORD* lpDDSSrc = (DWORD*) ddsdSrc.lpSurface;

	mov	esi, DWORD PTR _ddsdSrc$[ebp+36]

; 5115 : 	DWORD* lpDDSDst = (DWORD*) ddsdDst.lpSurface;
; 5116 : 	WORD*  lpDDSDstTemp;
; 5117 : 
; 5118 : 	//// ¼Ò½ºÇ¥¸éÀÇ ÄÃ·¯Å° ÂüÁ¶
; 5119 : 	DWORD dwColorSpaceLowValue = ddsdSrc.ddckCKSrcBlt.dwColorSpaceLowValue;
; 5120 : 	
; 5121 : 	////
; 5122 : 	DWORD dwSrcPitch = ddsdSrc.lPitch >> 2; // 4¹ÙÀÌÆ® Á¤·Ä, /4
; 5123 : 	DWORD dwDstPitch = ddsdDst.lPitch >> 2;
; 5124 : 
; 5125 : 	DWORD dwWidthSrc = rcSrc.right-rcSrc.left;

	mov	edi, DWORD PTR _rcSrc$[ebp+8]
	sub	edi, DWORD PTR _rcSrc$[ebp]
	mov	eax, DWORD PTR _ddsdDst$[ebp+36]

; 5126 : 	DWORD dwWidth  = dwWidthSrc >> 1;       // 2°³ÀÇ ÇÈ¼¿À» ÀÐÀ¸¹Ç·Î /2

	mov	ebx, edi
	mov	ecx, DWORD PTR _ddsdSrc$[ebp+16]

; 5127 : 	DWORD dwHeight = rcSrc.bottom-rcSrc.top;
; 5128 : 	//// È¦¼öÆøÀÎ °æ¿ì ³ª¸ÓÁö ÇÃ·¡±× ( 1 ÇÈ¼¿ )
; 5129 : 	BOOL bIsRemain = FALSE;
; 5130 : 	if (dwWidthSrc % 2) bIsRemain = TRUE;

	and	edi, 1
	mov	edx, DWORD PTR _ddsdDst$[ebp+16]
	mov	DWORD PTR _lpDDSSrc$1$[ebp], esi
	mov	esi, DWORD PTR _rcSrc$[ebp+12]
	sub	esi, DWORD PTR _rcSrc$[ebp+4]
	mov	DWORD PTR _lpDDSDst$1$[ebp], eax
	mov	eax, DWORD PTR _ddsdSrc$[ebp+64]
	sar	ecx, 2
	sar	edx, 2
	shr	ebx, 1

; 5131 : 
; 5132 : 	//// BPP
; 5133 : 	switch(g_dwRGBBitCount)

	cmp	DWORD PTR ?g_dwRGBBitCount@@3KA, 16	; g_dwRGBBitCount, 00000010H
	mov	DWORD PTR _dwHeight$1$[ebp], esi
	mov	esi, DWORD PTR _lpDDSSrc$1$[ebp]
	mov	DWORD PTR _dwColorSpaceLowValue$1$[ebp], eax
	mov	DWORD PTR _dwWidthSrc$1$[ebp], edi
	jne	$LN5@PutSpriteL

; 5134 : 	{
; 5135 : 	case 16 :
; 5136 : 		{
; 5137 : 			//// µÎ°³ÀÇ ÇÈ¼¿¿¡ ´ëÇÑ ÄÃ·¯Å° °ªÀ» ±¸ÇÑ´Ù. °í¼Ó ÆÇÁ¤À» À§ÇÑ OR ¿¬»ê
; 5138 : 			DWORD dwColorSpaceLowValueMixed = dwColorSpaceLowValue << 16 | dwColorSpaceLowValue;

	mov	edi, eax
	shl	edi, 16					; 00000010H
	or	edi, eax

; 5139 : 
; 5140 : 			if (g_dwPixelFormat == RGB565)

	cmp	DWORD PTR ?g_dwPixelFormat@@3KA, 565	; g_dwPixelFormat, 00000235H
	mov	DWORD PTR _dwColorSpaceLowValueMixed$1$[ebp], edi
	jne	$LN5@PutSpriteL

; 5141 : 			{
; 5142 : 				for (iy=0; iy < dwHeight; iy++)

	cmp	DWORD PTR _dwHeight$1$[ebp], 0
	jbe	$LN5@PutSpriteL
	lea	eax, DWORD PTR [ecx*4]
	mov	ecx, DWORD PTR _dwHeight$1$[ebp]
	mov	DWORD PTR tv743[ebp], eax
	lea	eax, DWORD PTR [edx*4]
	mov	DWORD PTR tv742[ebp], eax
	mov	eax, DWORD PTR _lpDDSDst$1$[ebp]
$LL6@PutSpriteL:

; 5143 : 				{
; 5144 : 					for (ix=0; ix < dwWidth; ix++)

	xor	edx, edx
	test	ebx, ebx
	je	$LN8@PutSpriteL
	mov	ecx, esi
	add	eax, 4
	sub	ecx, DWORD PTR _lpDDSDst$1$[ebp]
	mov	DWORD PTR tv740[ebp], ecx
	npad	2
$LL9@PutSpriteL:

; 5145 : 					{
; 5146 : 						//// µÎ°³ÀÇ ÇÈ¼¿À» ¾ò¾î¿Â´Ù
; 5147 : 						//memcpy(&RGBRGB, lpDDSSrc+ix, 4);
; 5148 : 						RGBRGB = *(lpDDSSrc+ix);

	mov	ecx, DWORD PTR [esi+edx*4]

; 5149 : 						
; 5150 : 						//// µÎ°³ÀÇ ÇÈ¼¿ÀÌ ÄÃ·¯Å°ÀÌ¸é ·çÇÁ¹Ýº¹ ( ´ÙÀ½ ÇÈ¼¿ ±×·ìÀ» ¾ò´Â´Ù )
; 5151 : 						if (RGBRGB == dwColorSpaceLowValueMixed) continue;	

	cmp	ecx, edi
	je	SHORT $LN7@PutSpriteL

; 5152 : 						
; 5153 : 						//// ÇÈ¼¿À» ºÐ¸®ÇÑ´Ù
; 5154 : 						sRGB1 = RGBRGB & 0x0000FFFF;
; 5155 : 						sRGB2 = RGBRGB >> 16;

	mov	esi, ecx
	movzx	edi, cx
	shr	esi, 16					; 00000010H

; 5156 : 						
; 5157 : 						//// ¼Ò½ºÇ¥¸éÀÇ ÇÈ¼¿ sRGB1,2°¡ ÀÌ¹ÌÁöÀÎ °æ¿ì
; 5158 : 						if (sRGB1 != dwColorSpaceLowValue && sRGB2 != dwColorSpaceLowValue)

	cmp	edi, DWORD PTR _dwColorSpaceLowValue$1$[ebp]
	je	SHORT $LN29@PutSpriteL
	cmp	esi, DWORD PTR _dwColorSpaceLowValue$1$[ebp]
	je	SHORT $LN27@PutSpriteL

; 5159 : 						{
; 5160 : 							//memcpy(lpDDSDst+ix, &RGBRGB, 4);
; 5161 : 							*(lpDDSDst+ix) = RGBRGB;							

	mov	DWORD PTR [eax-4], ecx
	jmp	SHORT $LN30@PutSpriteL
$LN27@PutSpriteL:

; 5162 : 						}						
; 5163 : 						//// ¼Ò½ºÇ¥¸éÀÇ ÇÈ¼¿ sRGB1ÀÌ ÀÌ¹ÌÁö ÇÈ¼¿ÀÎ °æ¿ì
; 5164 : 						// else if (sRGB1 != dwColorSpaceLowValue && sRGB2 == dwColorSpaceLowValue )
; 5165 : 						else if (sRGB1 != dwColorSpaceLowValue)
; 5166 : 						{							
; 5167 : 							lpDDSDstTemp = (WORD*)(lpDDSDst+ix);
; 5168 : 							*lpDDSDstTemp = (WORD)sRGB1;							

	mov	WORD PTR [eax-4], di

; 5169 : 						}
; 5170 : 						//// ¼Ò½ºÇ¥¸éÀÇ ÇÈ¼¿ sRGB1ÀÌ ÀÌ¹ÌÁö ÇÈ¼¿ÀÎ °æ¿ì
; 5171 : 						// else if (sRGB1 == dwColorSpaceLowValue && sRGB2 != dwColorSpaceLowValue )
; 5172 : 						// else if (sRGB2 != dwColorSpaceLowValue)
; 5173 : 						else 

	jmp	SHORT $LN30@PutSpriteL
$LN29@PutSpriteL:

; 5174 : 						{
; 5175 : 							lpDDSDstTemp = (WORD*)(lpDDSDst+ix);
; 5176 : 							*(lpDDSDstTemp+1) = (WORD)sRGB2;

	mov	WORD PTR [eax-2], si
$LN30@PutSpriteL:

; 5177 : 						}
; 5178 : 
; 5179 : 						//// È¦¼öÆø, 1 ÇÈ¼¿
; 5180 : 						// if (bIsRemain && ix == dwWidth-1)						
; 5181 : 						if (ix == dwWidth-1)

	mov	esi, DWORD PTR _lpDDSSrc$1$[ebp]
	lea	ecx, DWORD PTR [ebx-1]
	mov	edi, DWORD PTR _dwColorSpaceLowValueMixed$1$[ebp]
	cmp	edx, ecx
	jne	SHORT $LN7@PutSpriteL

; 5182 : 						{
; 5183 : 							if (bIsRemain)

	cmp	DWORD PTR _dwWidthSrc$1$[ebp], 0
	je	SHORT $LN7@PutSpriteL

; 5184 : 							{								
; 5185 : 								sRGB1 = *(lpDDSSrc+ix+1) & 0x0000FFFF;

	mov	ecx, DWORD PTR tv740[ebp]
	movzx	ecx, WORD PTR [ecx+eax]

; 5186 : 								if (sRGB1 != dwColorSpaceLowValue)

	cmp	ecx, DWORD PTR _dwColorSpaceLowValue$1$[ebp]
	je	SHORT $LN7@PutSpriteL

; 5187 : 								{
; 5188 : 									lpDDSDstTemp = (WORD*)(lpDDSDst+ix+1);
; 5189 : 									*lpDDSDstTemp = (WORD)sRGB1;

	mov	WORD PTR [eax], cx
$LN7@PutSpriteL:

; 5143 : 				{
; 5144 : 					for (ix=0; ix < dwWidth; ix++)

	inc	edx
	add	eax, 4
	cmp	edx, ebx
	jb	SHORT $LL9@PutSpriteL
	mov	eax, DWORD PTR _lpDDSDst$1$[ebp]
	mov	ecx, DWORD PTR _dwHeight$1$[ebp]
$LN8@PutSpriteL:

; 5190 : 								}
; 5191 : 							}
; 5192 : 						}
; 5193 : 					}
; 5194 : 					lpDDSSrc += dwSrcPitch;

	add	esi, DWORD PTR tv743[ebp]

; 5195 : 					lpDDSDst += dwDstPitch;

	add	eax, DWORD PTR tv742[ebp]
	sub	ecx, 1
	mov	DWORD PTR _lpDDSSrc$1$[ebp], esi
	mov	DWORD PTR _lpDDSDst$1$[ebp], eax
	mov	DWORD PTR _dwHeight$1$[ebp], ecx
	jne	$LL6@PutSpriteL
$LN5@PutSpriteL:

; 5196 : 				}
; 5197 : 			}	
; 5198 : 			else if (g_dwPixelFormat == BGR565)
; 5199 : 			{
; 5200 : 			}
; 5201 : 			else if (g_dwPixelFormat == RGB555)
; 5202 : 			{
; 5203 : 			}
; 5204 : 			break;
; 5205 : 		}
; 5206 : 	case 24 :
; 5207 : 	case 32 : break;
; 5208 : 	}
; 5209 : 	
; 5210 : 	//// Ç¥¸é Unlock
; 5211 :     g_pDDSBack->Unlock(&rcDst);

	mov	eax, DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	lea	edx, DWORD PTR _rcDst$[ebp]
	push	edx
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+128]

; 5212 :     lpDDS->Unlock(&rcSrc);

	mov	ecx, DWORD PTR _lpDDS$GSCopy$1$[ebp]
	lea	edx, DWORD PTR _rcSrc$[ebp]
	push	edx
	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+128]
$LN13@PutSpriteL:

; 5213 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?__PutSpriteLockFastEx16@@YAXPAUIDirectDrawSurface7@@HH@Z ENDP ; __PutSpriteLockFastEx16
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__PutSpriteLockFast16@@YAXPAUIDirectDrawSurface7@@HH@Z
_TEXT	SEGMENT
tv424 = -304						; size = 4
tv425 = -300						; size = 4
_lpDDS$GSCopy$1$ = -296					; size = 4
_iy$1$ = -292						; size = 4
_lpDDSDst$1$ = -288					; size = 4
_dwWidth$1$ = -284					; size = 4
_dwColorSpaceLowValue$1$ = -280				; size = 4
_lpDDSSrc$1$ = -276					; size = 4
_dwColorSpaceLowValueMixed$1$ = -272			; size = 4
_ddsdDst$ = -268					; size = 124
_ddsdSrc$ = -144					; size = 124
_rcDest$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpDDS$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?__PutSpriteLockFast16@@YAXPAUIDirectDrawSurface7@@HH@Z PROC ; __PutSpriteLockFast16, COMDAT

; 4811 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 304				; 00000130H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _lpDDS$[ebp]

; 4812 : 	DWORD RGBRGB;
; 4813 : 	DWORD sRGB1, sRGB2;
; 4814 : 
; 4815 : 	DWORD ix, iy;
; 4816 :     DDSURFACEDESC2 ddsdSrc, ddsdDst;
; 4817 : 
; 4818 : 	//// ¼Ò½ºÇ¥¸é Lock
; 4819 : 	ZeroMemory(&ddsdSrc, sizeof(ddsdSrc));	

	lea	eax, DWORD PTR _ddsdSrc$[ebp+4]
	push	120					; 00000078H
	push	0
	push	eax
	mov	DWORD PTR _lpDDS$GSCopy$1$[ebp], ebx
	call	_memset

; 4820 : 	ddsdSrc.dwSize = sizeof(ddsdSrc);
; 4821 : 	HRESULT ddrval = lpDDS->Lock(NULL, &ddsdSrc, DDLOCK_READONLY|DDLOCK_WAIT, NULL);

	mov	eax, DWORD PTR [ebx]
	lea	ecx, DWORD PTR _ddsdSrc$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ddsdSrc$[ebp], 124		; 0000007cH
	push	0
	push	17					; 00000011H
	push	ecx
	push	0
	push	ebx
	call	DWORD PTR [eax+100]

; 4822 :     if (ddrval != DD_OK) { DDERRCHK(ddrval); return; }

	test	eax, eax
	je	SHORT $LN10@PutSpriteL
	push	4822					; 000012d6H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
	pop	ebx

; 4917 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN10@PutSpriteL:

; 4823 :     
; 4824 :     //// ¸ñÀûÇ¥¸éÀÇ RECT
; 4825 :     RECT rcDest = { x, y, x+ddsdSrc.dwWidth, y+ddsdSrc.dwHeight };

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _ddsdSrc$[ebp+12]
	mov	edx, DWORD PTR _y$[ebp]
	add	eax, ecx
	mov	DWORD PTR _rcDest$[ebp+8], eax
	mov	eax, DWORD PTR _ddsdSrc$[ebp+8]
	push	esi
	add	eax, edx
	mov	DWORD PTR _rcDest$[ebp], ecx

; 4826 : 
; 4827 : 	//// ¸ñÀûÇ¥¸é Lock
; 4828 : 	ZeroMemory(&ddsdDst, sizeof(ddsdDst));	

	push	120					; 00000078H
	mov	DWORD PTR _rcDest$[ebp+12], eax
	lea	eax, DWORD PTR _ddsdDst$[ebp+4]
	push	0
	push	eax
	mov	DWORD PTR _rcDest$[ebp+4], edx
	call	_memset

; 4829 : 	ddsdDst.dwSize = sizeof(ddsdDst);
; 4830 : 	ddrval = g_pDDSBack->Lock(&rcDest, &ddsdDst, DDLOCK_WRITEONLY|DDLOCK_WAIT, NULL);

	mov	eax, DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	lea	edx, DWORD PTR _ddsdDst$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ddsdDst$[ebp], 124		; 0000007cH
	mov	ecx, DWORD PTR [eax]
	push	0
	push	33					; 00000021H
	push	edx
	lea	edx, DWORD PTR _rcDest$[ebp]
	push	edx
	push	eax
	call	DWORD PTR [ecx+100]
	mov	esi, eax

; 4831 :     if (ddrval != DD_OK)

	test	esi, esi
	je	SHORT $LN11@PutSpriteL

; 4832 :     {
; 4833 :     	//// ¼Ò½ºÇ¥¸éÀº Lock »óÅÂÀÌ¹Ç·Î Unlock
; 4834 :         lpDDS->Unlock(NULL);

	mov	ecx, DWORD PTR [ebx]
	push	0
	push	ebx
	call	DWORD PTR [ecx+128]

; 4835 :         DDERRCHK(ddrval);     

	push	4835					; 000012e3H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	esi
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
	pop	esi
	pop	ebx

; 4917 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@PutSpriteL:

; 4836 :         return;
; 4837 :     }
; 4838 : 
; 4839 : 	//// Ç¥¸éÀÇ ÁÖ¼Ò
; 4840 : 	DWORD* lpDDSSrc = (DWORD*) ddsdSrc.lpSurface;

	mov	eax, DWORD PTR _ddsdSrc$[ebp+36]

; 4841 : 	DWORD* lpDDSDst = (DWORD*) ddsdDst.lpSurface;
; 4842 : 	WORD*  lpDDSDstTemp;
; 4843 : 
; 4844 : 	//// ¼Ò½ºÇ¥¸éÀÇ ÄÃ·¯Å° ÂüÁ¶
; 4845 : 	DWORD dwColorSpaceLowValue = ddsdSrc.ddckCKSrcBlt.dwColorSpaceLowValue;	
; 4846 : 	
; 4847 : 	DWORD dwSrcPitch = ddsdSrc.lPitch >> 2; // 4¹ÙÀÌÆ® Á¤·Ä, /4
; 4848 : 	DWORD dwDstPitch = ddsdDst.lPitch >> 2;

	mov	edx, DWORD PTR _ddsdDst$[ebp+16]

; 4849 : 	DWORD dwWidth  = ddsdSrc.dwWidth >> 1;   // 2°³ÀÇ ÇÈ¼¿À» ÀÐÀ¸¹Ç·Î /2

	mov	esi, DWORD PTR _ddsdSrc$[ebp+12]
	mov	ecx, DWORD PTR _ddsdSrc$[ebp+16]
	shr	esi, 1
	push	edi
	mov	edi, DWORD PTR _ddsdDst$[ebp+36]
	mov	DWORD PTR _lpDDSSrc$1$[ebp], eax
	mov	eax, DWORD PTR _ddsdSrc$[ebp+64]
	sar	edx, 2

; 4850 : 	
; 4851 : 	//// BPP
; 4852 : 	switch(g_dwRGBBitCount)

	cmp	DWORD PTR ?g_dwRGBBitCount@@3KA, 16	; g_dwRGBBitCount, 00000010H
	mov	DWORD PTR _lpDDSDst$1$[ebp], edi
	mov	DWORD PTR _dwColorSpaceLowValue$1$[ebp], eax
	mov	DWORD PTR _dwWidth$1$[ebp], esi
	jne	$LN5@PutSpriteL

; 4853 : 	{
; 4854 : 	case 16 :
; 4855 : 		{
; 4856 : 			//// µÎ°³ÀÇ ÇÈ¼¿¿¡ ´ëÇÑ ÄÃ·¯Å° °ªÀ» ±¸ÇÑ´Ù. °í¼Ó ÆÇÁ¤À» À§ÇÑ OR ¿¬»ê
; 4857 : 			DWORD dwColorSpaceLowValueMixed = dwColorSpaceLowValue << 16 | dwColorSpaceLowValue;

	mov	esi, eax
	shl	esi, 16					; 00000010H
	or	esi, eax

; 4858 : 	
; 4859 : 			if (g_dwPixelFormat == RGB565)

	cmp	DWORD PTR ?g_dwPixelFormat@@3KA, 565	; g_dwPixelFormat, 00000235H
	mov	DWORD PTR _dwColorSpaceLowValueMixed$1$[ebp], esi
	jne	$LN5@PutSpriteL

; 4860 : 			{
; 4861 : 				for (iy=0; iy < ddsdSrc.dwHeight; iy++)

	mov	eax, DWORD PTR _ddsdSrc$[ebp+8]
	xor	ebx, ebx
	mov	DWORD PTR _iy$1$[ebp], ebx
	test	eax, eax
	je	$LN33@PutSpriteL
	and	ecx, -4					; fffffffcH
	mov	DWORD PTR tv425[ebp], ecx
	lea	ecx, DWORD PTR [edx*4]
	mov	edx, DWORD PTR _dwWidth$1$[ebp]
	mov	DWORD PTR tv424[ebp], ecx
	mov	ecx, DWORD PTR _lpDDSSrc$1$[ebp]
	npad	4
$LL6@PutSpriteL:

; 4862 : 				{
; 4863 : 					for (ix=0; ix < dwWidth; ix++)

	test	edx, edx
	je	SHORT $LN8@PutSpriteL
	mov	ebx, ecx
	mov	eax, edi
	sub	ebx, edi
	mov	edi, edx
	npad	4
$LL9@PutSpriteL:

; 4864 : 					{
; 4865 : 						//// µÎ°³ÀÇ ÇÈ¼¿À» ¾ò¾î¿Â´Ù
; 4866 : 						//memcpy(&RGBRGB, lpDDSSrc+ix, 4);
; 4867 : 						RGBRGB = *(lpDDSSrc+ix);

	mov	ecx, DWORD PTR [ebx+eax]

; 4868 : 						
; 4869 : 						//// µÎ°³ÀÇ ÇÈ¼¿ÀÌ ÄÃ·¯Å°ÀÌ¸é ·çÇÁ¹Ýº¹ ( ´ÙÀ½ ÇÈ¼¿ ±×·ìÀ» ¾ò´Â´Ù )
; 4870 : 						if (RGBRGB == dwColorSpaceLowValueMixed) continue;	

	cmp	ecx, esi
	je	SHORT $LN7@PutSpriteL

; 4871 : 						
; 4872 : 						//// ÇÈ¼¿À» ºÐ¸®ÇÑ´Ù
; 4873 : 						sRGB1 = RGBRGB & 0x0000FFFF;
; 4874 : 						sRGB2 = RGBRGB >> 16;

	mov	edx, ecx
	movzx	esi, cx
	shr	edx, 16					; 00000010H

; 4875 : 						
; 4876 : 						//// ¼Ò½ºÇ¥¸éÀÇ ÇÈ¼¿ sRGB1,2°¡ ÀÌ¹ÌÁöÀÎ °æ¿ì
; 4877 : 						if (sRGB1 != dwColorSpaceLowValue && sRGB2 != dwColorSpaceLowValue)

	cmp	esi, DWORD PTR _dwColorSpaceLowValue$1$[ebp]
	je	SHORT $LN18@PutSpriteL
	cmp	edx, DWORD PTR _dwColorSpaceLowValue$1$[ebp]
	je	SHORT $LN16@PutSpriteL

; 4878 : 						{
; 4879 : 							//memcpy(lpDDSDst+ix, &RGBRGB, 4);
; 4880 : 							*(lpDDSDst+ix) = RGBRGB;							

	mov	DWORD PTR [eax], ecx
	jmp	SHORT $LN35@PutSpriteL
$LN16@PutSpriteL:

; 4881 : 						}						
; 4882 : 						//// ¼Ò½ºÇ¥¸éÀÇ ÇÈ¼¿ sRGB1ÀÌ ÀÌ¹ÌÁö ÇÈ¼¿ÀÎ °æ¿ì
; 4883 : 						// else if (sRGB1 != dwColorSpaceLowValue && sRGB2 == dwColorSpaceLowValue )
; 4884 : 						else if (sRGB1 != dwColorSpaceLowValue)						
; 4885 : 						{							
; 4886 : 							lpDDSDstTemp = (WORD*)(lpDDSDst+ix);
; 4887 : 							*lpDDSDstTemp = (WORD)sRGB1;							

	mov	WORD PTR [eax], si

; 4888 : 						}
; 4889 : 						//// ¼Ò½ºÇ¥¸éÀÇ ÇÈ¼¿ sRGB1ÀÌ ÀÌ¹ÌÁö ÇÈ¼¿ÀÎ °æ¿ì
; 4890 : 						// else if (sRGB1 == dwColorSpaceLowValue && sRGB2 != dwColorSpaceLowValue )
; 4891 : 						// else if (sRGB2 != dwColorSpaceLowValue)
; 4892 : 						else 

	jmp	SHORT $LN35@PutSpriteL
$LN18@PutSpriteL:

; 4893 : 						{
; 4894 : 							lpDDSDstTemp = (WORD*)(lpDDSDst+ix);
; 4895 : 							*(lpDDSDstTemp+1) = (WORD)sRGB2;

	mov	WORD PTR [eax+2], dx
$LN35@PutSpriteL:

; 4862 : 				{
; 4863 : 					for (ix=0; ix < dwWidth; ix++)

	mov	esi, DWORD PTR _dwColorSpaceLowValueMixed$1$[ebp]
$LN7@PutSpriteL:
	add	eax, 4
	sub	edi, 1
	jne	SHORT $LL9@PutSpriteL
	mov	eax, DWORD PTR _ddsdSrc$[ebp+8]
	mov	edi, DWORD PTR _lpDDSDst$1$[ebp]
	mov	ebx, DWORD PTR _iy$1$[ebp]
	mov	ecx, DWORD PTR _lpDDSSrc$1$[ebp]
	mov	edx, DWORD PTR _dwWidth$1$[ebp]
$LN8@PutSpriteL:

; 4896 : 						}				
; 4897 : 					}					
; 4898 : 					lpDDSSrc += dwSrcPitch;

	add	ecx, DWORD PTR tv425[ebp]
	inc	ebx

; 4899 : 					lpDDSDst += dwDstPitch;

	add	edi, DWORD PTR tv424[ebp]
	mov	DWORD PTR _lpDDSSrc$1$[ebp], ecx
	mov	DWORD PTR _lpDDSDst$1$[ebp], edi
	mov	DWORD PTR _iy$1$[ebp], ebx
	cmp	ebx, eax
	jb	$LL6@PutSpriteL
$LN33@PutSpriteL:

; 4900 : 				}
; 4901 : 			}	
; 4902 : 			else if (g_dwPixelFormat == BGR565)
; 4903 : 			{
; 4904 : 			}
; 4905 : 			else if (g_dwPixelFormat == RGB555)
; 4906 : 			{
; 4907 : 			}
; 4908 : 			break;
; 4909 : 		}
; 4910 : 	case 24 :
; 4911 : 	case 32 : break;
; 4912 : 	}	
; 4913 : 	
; 4914 : 	//// Ç¥¸é Unlock
; 4915 :     g_pDDSBack->Unlock(&rcDest);

	mov	ebx, DWORD PTR _lpDDS$GSCopy$1$[ebp]
$LN5@PutSpriteL:
	mov	eax, DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	lea	edx, DWORD PTR _rcDest$[ebp]
	push	edx
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+128]

; 4916 :     lpDDS->Unlock(NULL);

	mov	eax, DWORD PTR [ebx]
	push	0
	push	ebx
	call	DWORD PTR [eax+128]

; 4917 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?__PutSpriteLockFast16@@YAXPAUIDirectDrawSurface7@@HH@Z ENDP ; __PutSpriteLockFast16
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__PutSpriteEx@@YAXPAUIDirectDrawSurface7@@HH@Z
_TEXT	SEGMENT
_lpDDS$GSCopy$1$ = -164					; size = 4
_ddsd$ = -160						; size = 124
_rcDst$ = -36						; size = 16
_rcSrc$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpDDS$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?__PutSpriteEx@@YAXPAUIDirectDrawSurface7@@HH@Z PROC	; __PutSpriteEx, COMDAT

; 4978 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 164				; 000000a4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _lpDDS$[ebp]

; 4979 : 	//// Ç¥¸éÀÇ Å©±â Á¤º¸¸¦ ¾ò´Â´Ù ( ÀÓ½ÃÄÚµå )
; 4980 : 	DDSURFACEDESC2 ddsd;
; 4981 :     ddsd.dwSize = sizeof(ddsd);
; 4982 :     //ddsd.dwFlags = DDSD_HEIGHT | DDSD_WIDTH;
; 4983 : 	lpDDS->GetSurfaceDesc(&ddsd);

	lea	edx, DWORD PTR _ddsd$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR [ecx]
	push	edx
	push	ecx
	mov	DWORD PTR _lpDDS$GSCopy$1$[ebp], ecx
	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH
	call	DWORD PTR [eax+88]

; 4984 : 
; 4985 : 	//// ½ºÅ©¸°ÁÂÇ¥ÀÇ RECT¸¦ ±¸ÇÑ´Ù
; 4986 : 	RECT rcDst = { x, y, x+ddsd.dwWidth, y+ddsd.dwHeight };

	mov	esi, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _ddsd$[ebp+12]
	mov	ecx, DWORD PTR _ddsd$[ebp+8]
	mov	DWORD PTR _rcDst$[ebp], esi
	mov	DWORD PTR _rcDst$[ebp+4], eax

; 4987 : 	RECT rcSrc = { 0, 0, ddsd.dwWidth, ddsd.dwHeight };

	mov	DWORD PTR _rcSrc$[ebp], 0
	lea	ebx, DWORD PTR [edx+esi]
	mov	DWORD PTR _rcDst$[ebp+8], ebx
	lea	edi, DWORD PTR [ecx+eax]
	mov	DWORD PTR _rcDst$[ebp+12], edi
	mov	DWORD PTR _rcSrc$[ebp+4], 0
	mov	DWORD PTR _rcSrc$[ebp+8], edx
	mov	DWORD PTR _rcSrc$[ebp+12], ecx

; 4988 : 
; 4989 : 	//// ½ºÅ©¸° ¹ÛÀ¸·Î ³ª°¡¸é Ãâ·ÂÇÏÁö ¾Ê´Â´Ù
; 4990 : 	if (x >= HRES || y >= VRES) return;

	cmp	esi, 1024				; 00000400H
	jge	$LN5@PutSpriteE
	cmp	eax, 768				; 00000300H
	jge	$LN5@PutSpriteE

; 4991 : 	if (rcDst.right <= 0 || rcDst.bottom <= 0) return;

	test	ebx, ebx
	jle	$LN5@PutSpriteE
	test	edi, edi
	jle	$LN5@PutSpriteE

; 4992 : 	
; 4993 : 	//// ½ºÇÁ¶óÀÌÆ®°¡ ½ºÅ©¸° ¹ÛÀ¸·Î ³ª°£ ¸¸Å­ Ãâ·ÂÇÏÁö ¾Ê´Â´Ù
; 4994 : 	//// ¿ÀÇÁ ½ºÅ©¸°ÀÇ »ç°¢¿µ¿ªÀ» °¨¼Ò ½ÃÄÑ Å¬¸®ÇÎÀ» ±¸ÇöÇÑ´Ù	
; 4995 : 
; 4996 : 	//// ¼öÆò º¸Á¤
; 4997 : 	if (x < 0)

	test	esi, esi
	jns	SHORT $LN6@PutSpriteE

; 4998 : 	{
; 4999 : 		// ÁÂº¯À» ÁÙÀÎ´Ù. rcSrc.left += ³Ñ¾î°£ Å©±â, abs(x)
; 5000 : 		rcSrc.left -= x;

	neg	esi

; 5001 : 		rcDst.left=x=0;

	mov	DWORD PTR _rcDst$[ebp], 0
	mov	DWORD PTR _rcSrc$[ebp], esi
	jmp	SHORT $LN8@PutSpriteE
$LN6@PutSpriteE:

; 5002 : 	}
; 5003 : 	else if (rcDst.right >= HRES)

	cmp	ebx, 1024				; 00000400H
	jl	SHORT $LN8@PutSpriteE

; 5004 : 	{
; 5005 : 		// ¿ìº¯À» ÁÙÀÎ´Ù. rcSrc.right -= ³Ñ¾î°£ Å©±â
; 5006 : 		int nOverSize = (rcDst.right - HRES);		
; 5007 : 		rcSrc.right -= nOverSize;

	sub	edx, ebx

; 5008 : 		rcDst.right -= nOverSize;

	mov	DWORD PTR _rcDst$[ebp+8], 1024		; 00000400H
	add	edx, 1024				; 00000400H
	mov	DWORD PTR _rcSrc$[ebp+8], edx
$LN8@PutSpriteE:

; 5009 : 	}
; 5010 : 	//// ¼öÁ÷ º¸Á¤
; 5011 : 	if (y < 0)

	test	eax, eax
	jns	SHORT $LN9@PutSpriteE

; 5012 : 	{
; 5013 : 		// »óº¯À» ÁÙÀÎ´Ù. rcSrc.top += ³Ñ¾î°£ Å©±â, abs(y)
; 5014 : 		rcSrc.top -= y;

	neg	eax

; 5015 : 		rcDst.top=y=0;		

	mov	DWORD PTR _rcDst$[ebp+4], 0
	mov	DWORD PTR _rcSrc$[ebp+4], eax
	jmp	SHORT $LN11@PutSpriteE
$LN9@PutSpriteE:

; 5016 : 	}
; 5017 : 	else if (rcDst.bottom >= VRES )

	cmp	edi, 768				; 00000300H
	jl	SHORT $LN11@PutSpriteE

; 5018 : 	{
; 5019 : 		// ÇÏº¯À» ÁÙÀÎ´Ù. rcSrc.bottom -= ³Ñ¾î°£ Å©±â 
; 5020 : 		int nOverSize = (rcDst.bottom - VRES);
; 5021 : 		rcSrc.bottom -= nOverSize;

	sub	ecx, edi

; 5022 : 		rcDst.bottom -= nOverSize;

	mov	DWORD PTR _rcDst$[ebp+12], 768		; 00000300H
	add	ecx, 768				; 00000300H
	mov	DWORD PTR _rcSrc$[ebp+12], ecx
$LN11@PutSpriteE:

; 5023 : 	}
; 5024 : 
; 5025 : 	HRESULT ddrval = g_pDDSBack->Blt(&rcDst, lpDDS, &rcSrc, DDBLT_KEYSRC|DDBLT_WAIT, NULL);

	mov	eax, DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	lea	edx, DWORD PTR _rcSrc$[ebp]
	push	0
	push	16809984				; 01008000H
	push	edx
	push	DWORD PTR _lpDDS$GSCopy$1$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _rcDst$[ebp]
	push	edx
	push	eax
	call	DWORD PTR [ecx+20]

; 5026 : 	if (ddrval != DD_OK) DDERRCHK(ddrval);

	test	eax, eax
	je	SHORT $LN5@PutSpriteE
	push	5026					; 000013a2H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN5@PutSpriteE:

; 5027 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?__PutSpriteEx@@YAXPAUIDirectDrawSurface7@@HH@Z ENDP	; __PutSpriteEx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__PutImageEx@@YAXPAUIDirectDrawSurface7@@HH@Z
_TEXT	SEGMENT
_lpDDS$GSCopy$1$ = -164					; size = 4
_ddsd$ = -160						; size = 124
_rcDst$ = -36						; size = 16
_rcSrc$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpDDS$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?__PutImageEx@@YAXPAUIDirectDrawSurface7@@HH@Z PROC	; __PutImageEx, COMDAT

; 4926 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 164				; 000000a4H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	ecx, DWORD PTR _lpDDS$[ebp]

; 4927 : 	//// Ç¥¸éÀÇ Å©±â Á¤º¸¸¦ ¾ò´Â´Ù ( ÀÓ½ÃÄÚµå )
; 4928 : 	DDSURFACEDESC2 ddsd;
; 4929 :     ddsd.dwSize = sizeof(ddsd);
; 4930 :     //ddsd.dwFlags = DDSD_HEIGHT | DDSD_WIDTH;
; 4931 : 	lpDDS->GetSurfaceDesc(&ddsd);

	lea	edx, DWORD PTR _ddsd$[ebp]
	push	ebx
	push	esi
	push	edi
	mov	eax, DWORD PTR [ecx]
	push	edx
	push	ecx
	mov	DWORD PTR _lpDDS$GSCopy$1$[ebp], ecx
	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH
	call	DWORD PTR [eax+88]

; 4932 : 
; 4933 : 	//// ½ºÅ©¸°ÁÂÇ¥ÀÇ RECT¸¦ ±¸ÇÑ´Ù
; 4934 : 	RECT rcDst = { x, y, x+ddsd.dwWidth, y+ddsd.dwHeight };

	mov	esi, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _y$[ebp]
	mov	edx, DWORD PTR _ddsd$[ebp+12]
	mov	ecx, DWORD PTR _ddsd$[ebp+8]
	mov	DWORD PTR _rcDst$[ebp], esi
	mov	DWORD PTR _rcDst$[ebp+4], eax

; 4935 : 	RECT rcSrc = { 0, 0, ddsd.dwWidth, ddsd.dwHeight };

	mov	DWORD PTR _rcSrc$[ebp], 0
	lea	ebx, DWORD PTR [edx+esi]
	mov	DWORD PTR _rcDst$[ebp+8], ebx
	lea	edi, DWORD PTR [ecx+eax]
	mov	DWORD PTR _rcDst$[ebp+12], edi
	mov	DWORD PTR _rcSrc$[ebp+4], 0
	mov	DWORD PTR _rcSrc$[ebp+8], edx
	mov	DWORD PTR _rcSrc$[ebp+12], ecx

; 4936 : 
; 4937 : 	//// ½ºÅ©¸° ¹ÛÀ¸·Î ³ª°¡¸é Ãâ·ÂÇÏÁö ¾Ê´Â´Ù
; 4938 : 	if (x >= HRES || y >= VRES) return;

	cmp	esi, 1024				; 00000400H
	jge	$LN5@PutImageEx
	cmp	eax, 768				; 00000300H
	jge	$LN5@PutImageEx

; 4939 : 	if (rcDst.right <= 0 || rcDst.bottom <= 0) return;

	test	ebx, ebx
	jle	$LN5@PutImageEx
	test	edi, edi
	jle	$LN5@PutImageEx

; 4940 : 	
; 4941 : 	//// ½ºÇÁ¶óÀÌÆ®°¡ ½ºÅ©¸° ¹ÛÀ¸·Î ³ª°£ ¸¸Å­ Ãâ·ÂÇÏÁö ¾Ê´Â´Ù
; 4942 : 	//// ¿ÀÇÁ ½ºÅ©¸°ÀÇ »ç°¢¿µ¿ªÀ» °¨¼Ò ½ÃÄÑ Å¬¸®ÇÎÀ» ±¸ÇöÇÑ´Ù	
; 4943 : 
; 4944 : 	//// ¼öÆò º¸Á¤
; 4945 : 	if (x < 0)

	test	esi, esi
	jns	SHORT $LN6@PutImageEx

; 4946 : 	{
; 4947 : 		// ÁÂº¯À» ÁÙÀÎ´Ù. rcSrc.left += ³Ñ¾î°£ Å©±â, abs(x)
; 4948 : 		rcSrc.left -= x;

	neg	esi

; 4949 : 		rcDst.left=x=0;		

	mov	DWORD PTR _rcDst$[ebp], 0
	mov	DWORD PTR _rcSrc$[ebp], esi
	jmp	SHORT $LN8@PutImageEx
$LN6@PutImageEx:

; 4950 : 	}
; 4951 : 	else if (rcDst.right >= HRES)

	cmp	ebx, 1024				; 00000400H
	jl	SHORT $LN8@PutImageEx

; 4952 : 	{
; 4953 : 		// ¿ìº¯À» ÁÙÀÎ´Ù. rcSrc.right -= ³Ñ¾î°£ Å©±â
; 4954 : 		int nOverSize = (rcDst.right - HRES);		
; 4955 : 		rcSrc.right -= nOverSize;

	sub	edx, ebx

; 4956 : 		rcDst.right -= nOverSize;

	mov	DWORD PTR _rcDst$[ebp+8], 1024		; 00000400H
	add	edx, 1024				; 00000400H
	mov	DWORD PTR _rcSrc$[ebp+8], edx
$LN8@PutImageEx:

; 4957 : 	}
; 4958 : 	//// ¼öÁ÷ º¸Á¤
; 4959 : 	if (y < 0)

	test	eax, eax
	jns	SHORT $LN9@PutImageEx

; 4960 : 	{
; 4961 : 		// »óº¯À» ÁÙÀÎ´Ù. rcSrc.top += ³Ñ¾î°£ Å©±â, abs(y)
; 4962 : 		rcSrc.top -= y;

	neg	eax

; 4963 : 		rcDst.top=y=0;		

	mov	DWORD PTR _rcDst$[ebp+4], 0
	mov	DWORD PTR _rcSrc$[ebp+4], eax
	jmp	SHORT $LN11@PutImageEx
$LN9@PutImageEx:

; 4964 : 	}
; 4965 : 	else if (rcDst.bottom >= VRES )

	cmp	edi, 768				; 00000300H
	jl	SHORT $LN11@PutImageEx

; 4966 : 	{
; 4967 : 		// ÇÏº¯À» ÁÙÀÎ´Ù. rcSrc.bottom -= ³Ñ¾î°£ Å©±â 
; 4968 : 		int nOverSize = (rcDst.bottom - VRES);
; 4969 : 		rcSrc.bottom -= nOverSize;

	sub	ecx, edi

; 4970 : 		rcDst.bottom -= nOverSize;

	mov	DWORD PTR _rcDst$[ebp+12], 768		; 00000300H
	add	ecx, 768				; 00000300H
	mov	DWORD PTR _rcSrc$[ebp+12], ecx
$LN11@PutImageEx:

; 4971 : 	}
; 4972 : 
; 4973 : 	HRESULT ddrval = g_pDDSBack->Blt(&rcDst, lpDDS, &rcSrc, DDBLT_WAIT, NULL);

	mov	eax, DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	lea	edx, DWORD PTR _rcSrc$[ebp]
	push	0
	push	16777216				; 01000000H
	push	edx
	push	DWORD PTR _lpDDS$GSCopy$1$[ebp]
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _rcDst$[ebp]
	push	edx
	push	eax
	call	DWORD PTR [ecx+20]

; 4974 : 	if (ddrval != DD_OK) DDERRCHK(ddrval);

	test	eax, eax
	je	SHORT $LN5@PutImageEx
	push	4974					; 0000136eH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN5@PutImageEx:

; 4975 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?__PutImageEx@@YAXPAUIDirectDrawSurface7@@HH@Z ENDP	; __PutImageEx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__PutSpriteLock32@@YAXPAUIDirectDrawSurface7@@HH@Z
_TEXT	SEGMENT
_lpDDS$GSCopy$1$ = -152					; size = 4
tv334 = -148						; size = 4
tv335 = -144						; size = 4
_dwSrcColorKey$1$ = -140				; size = 4
_ddsdSrc$1$ = -136					; size = 4
_nWidth$1$ = -132					; size = 4
_ddsdSrc$ = -128					; size = 124
__$ArrayPad$ = -4					; size = 4
_lpDDS$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?__PutSpriteLock32@@YAXPAUIDirectDrawSurface7@@HH@Z PROC ; __PutSpriteLock32, COMDAT

; 4757 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 152				; 00000098H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _lpDDS$[ebp]

; 4758 : 	HRESULT hRet;
; 4759 : 	DDSURFACEDESC2 ddsdSrc;
; 4760 : 
; 4761 : 	memset(&ddsdSrc, 0, sizeof(ddsdSrc));

	lea	eax, DWORD PTR _ddsdSrc$[ebp+8]
	push	esi
	mov	esi, DWORD PTR _y$[ebp]
	push	edi
	mov	edi, DWORD PTR _x$[ebp]
	push	116					; 00000074H
	push	0
	push	eax
	mov	DWORD PTR _lpDDS$GSCopy$1$[ebp], ebx
	call	_memset

; 4762 : 	ddsdSrc.dwSize = sizeof(ddsdSrc);
; 4763 : 	ddsdSrc.dwFlags = DDSD_CKSRCBLT;
; 4764 : 
; 4765 : 	hRet = lpDDS->Lock(NULL, &ddsdSrc, DDLOCK_READONLY|DDLOCK_WAIT, NULL);

	mov	eax, DWORD PTR [ebx]
	lea	ecx, DWORD PTR _ddsdSrc$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ddsdSrc$[ebp], 124		; 0000007cH
	mov	DWORD PTR _ddsdSrc$[ebp+4], 65536	; 00010000H
	push	0
	push	17					; 00000011H
	push	ecx
	push	0
	push	ebx
	call	DWORD PTR [eax+100]

; 4766 : 	if (hRet != DD_OK) { DDERRCHK(hRet); return; }

	test	eax, eax
	je	SHORT $LN8@PutSpriteL
	push	4766					; 0000129eH
	jmp	$LN23@PutSpriteL
$LN8@PutSpriteL:

; 4767 : 	
; 4768 : 	//// ÀÌ¹ÌÁö Ç¥¸é ÁÖ¼Ò
; 4769 : 	DWORD* lpSrc = (DWORD*) ddsdSrc.lpSurface;
; 4770 : 	
; 4771 : 	//// 2Â÷ Ç¥¸é ÁÖ¼Ò ( Àü¿ª ) , ( *4 )
; 4772 : 	DWORD* lpDst = (DWORD*) ((LPBYTE)g_ddsd.lpSurface + y*g_ddsd.lPitch+(x << 2));

	mov	ecx, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+16

; 4773 : 
; 4774 : 	int nWidth  = ddsdSrc.dwWidth;
; 4775 : 	int nHeight = ddsdSrc.dwHeight;
; 4776 : 	
; 4777 : 	//// ÄÃ·¯Å°
; 4778 : 	DWORD dwSrcColorKey = ddsdSrc.ddckCKSrcBlt.dwColorSpaceLowValue;

	mov	eax, DWORD PTR _ddsdSrc$[ebp+64]

; 4779 : 	DWORD dwSrc=0;
; 4780 : 
; 4781 : 	//// DWORD ´ÜÀ§·Î ÁÖ¼Ò°¡ Áõ°¡ µÇ¹Ç·Î RShift ( /4)
; 4782 : 	DWORD dwSrcPitch = ddsdSrc.lPitch >> 2;
; 4783 : 	DWORD dwDstPitch = g_ddsd.lPitch >> 2;
; 4784 : 
; 4785 : 	//// ·çÇÁ³»¿¡¼­´Â ÃÖ´ëÇÑ ¿¬»êÀ» ÃÖ¼ÒÈ­ÇÑ´Ù	
; 4786 : 	for (int iy=0; iy < nHeight; iy++)

	mov	edx, DWORD PTR _ddsdSrc$[ebp+8]
	mov	ebx, DWORD PTR _ddsdSrc$[ebp+36]
	imul	esi, ecx
	mov	DWORD PTR _dwSrcColorKey$1$[ebp], eax
	mov	eax, DWORD PTR _ddsdSrc$[ebp+16]
	mov	DWORD PTR _ddsdSrc$1$[ebp], edx
	add	esi, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+36
	lea	edi, DWORD PTR [esi+edi*4]
	mov	esi, DWORD PTR _ddsdSrc$[ebp+12]
	mov	DWORD PTR _nWidth$1$[ebp], esi
	test	edx, edx
	jle	SHORT $LN3@PutSpriteL
	and	eax, -4					; fffffffcH
	and	ecx, -4					; fffffffcH
	mov	DWORD PTR tv335[ebp], eax
	mov	DWORD PTR tv334[ebp], ecx
	npad	6
$LL4@PutSpriteL:

; 4787 : 	{
; 4788 : 		for (int ix=0; ix < nWidth; ix++)

	test	esi, esi
	jle	SHORT $LN6@PutSpriteL
	mov	edx, DWORD PTR _nWidth$1$[ebp]
	mov	esi, ebx
	mov	ecx, edi
	sub	esi, edi
$LL16@PutSpriteL:

; 4789 : 		{
; 4790 : 			//// ¾ËÆÄ °ª ¶Ç´Â ÃÖ»óÀ§ 8ºñÆ®´Â ¹«½ÃÇÑ´Ù, ARGB
; 4791 : 			dwSrc = *(lpSrc+ix) & 0x00FFFFFF;

	mov	eax, DWORD PTR [esi+ecx]
	and	eax, 16777215				; 00ffffffH

; 4792 : 			if (dwSrc != dwSrcColorKey)

	cmp	eax, DWORD PTR _dwSrcColorKey$1$[ebp]
	je	SHORT $LN17@PutSpriteL

; 4793 : 			{
; 4794 : 				*(lpDst+ix) = dwSrc;

	mov	DWORD PTR [ecx], eax
$LN17@PutSpriteL:

; 4787 : 	{
; 4788 : 		for (int ix=0; ix < nWidth; ix++)

	add	ecx, 4
	sub	edx, 1
	jne	SHORT $LL16@PutSpriteL
	mov	edx, DWORD PTR _ddsdSrc$1$[ebp]
	mov	esi, DWORD PTR _nWidth$1$[ebp]
	mov	eax, DWORD PTR tv335[ebp]
	mov	ecx, DWORD PTR tv334[ebp]
$LN6@PutSpriteL:

; 4795 : 			}
; 4796 : 		}
; 4797 : 		lpSrc += dwSrcPitch;

	add	ebx, eax

; 4798 : 		lpDst += dwDstPitch;

	add	edi, ecx
	sub	edx, 1
	mov	DWORD PTR _ddsdSrc$1$[ebp], edx
	jne	SHORT $LL4@PutSpriteL
$LN3@PutSpriteL:

; 4799 : 	}
; 4800 : 
; 4801 : 	hRet = lpDDS->Unlock(NULL);

	mov	ecx, DWORD PTR _lpDDS$GSCopy$1$[ebp]
	push	0
	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+128]

; 4802 : 	if (hRet != DD_OK) { DDERRCHK(hRet); return; }

	test	eax, eax
	je	SHORT $LN10@PutSpriteL
	push	4802					; 000012c2H
$LN23@PutSpriteL:

; 4803 : }

	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN10@PutSpriteL:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?__PutSpriteLock32@@YAXPAUIDirectDrawSurface7@@HH@Z ENDP ; __PutSpriteLock32
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__PutSpriteLock16@@YAXPAUIDirectDrawSurface7@@HH@Z
_TEXT	SEGMENT
_lpDDS$GSCopy$1$ = -156					; size = 4
tv286 = -152						; size = 4
tv287 = -148						; size = 4
_dwSrcColorKey$1$ = -144				; size = 4
_ddsdSrc$1$ = -140					; size = 4
_lpSrc$1$ = -136					; size = 4
_nWidth$1$ = -132					; size = 4
_ddsdSrc$ = -128					; size = 124
__$ArrayPad$ = -4					; size = 4
_lpDDS$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?__PutSpriteLock16@@YAXPAUIDirectDrawSurface7@@HH@Z PROC ; __PutSpriteLock16, COMDAT

; 4704 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 156				; 0000009cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	ebx
	mov	ebx, DWORD PTR _lpDDS$[ebp]

; 4705 : 	HRESULT hRet;
; 4706 : 	DDSURFACEDESC2 ddsdSrc;
; 4707 : 
; 4708 : 	memset(&ddsdSrc, 0, sizeof(ddsdSrc));

	lea	eax, DWORD PTR _ddsdSrc$[ebp+4]
	push	esi
	mov	esi, DWORD PTR _x$[ebp]
	push	edi
	mov	edi, DWORD PTR _y$[ebp]
	push	120					; 00000078H
	push	0
	push	eax
	mov	DWORD PTR _lpDDS$GSCopy$1$[ebp], ebx
	call	_memset

; 4709 : 	ddsdSrc.dwSize = sizeof(ddsdSrc);    
; 4710 : 
; 4711 : 	hRet = lpDDS->Lock(NULL, &ddsdSrc, DDLOCK_READONLY|DDLOCK_WAIT, NULL);

	mov	eax, DWORD PTR [ebx]
	lea	ecx, DWORD PTR _ddsdSrc$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ddsdSrc$[ebp], 124		; 0000007cH
	push	0
	push	17					; 00000011H
	push	ecx
	push	0
	push	ebx
	call	DWORD PTR [eax+100]

; 4712 : 	if (hRet != DD_OK) { DDERRCHK(hRet); return; }

	test	eax, eax
	je	SHORT $LN8@PutSpriteL
	push	4712					; 00001268H
	jmp	$LN23@PutSpriteL
$LN8@PutSpriteL:

; 4713 : 	
; 4714 : 	//// ÀÌ¹ÌÁö Ç¥¸é ÁÖ¼Ò
; 4715 : 	WORD* lpSrc = (WORD*) ddsdSrc.lpSurface;
; 4716 : 	
; 4717 : 	//// 2Â÷ Ç¥¸é ÁÖ¼Ò ( Àü¿ª ) , ( *2 )
; 4718 : 	WORD* lpDst = (WORD*) ((LPBYTE)g_ddsd.lpSurface + y*g_ddsd.lPitch+(x << 1));

	mov	edx, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+16
	mov	eax, edx
	mov	ecx, DWORD PTR _ddsdSrc$[ebp+36]
	imul	eax, edi

; 4719 : 
; 4720 : 	int nWidth  = ddsdSrc.dwWidth;

	mov	edi, DWORD PTR _ddsdSrc$[ebp+12]

; 4721 : 	int nHeight = ddsdSrc.dwHeight;
; 4722 : 	
; 4723 : 	//// ÄÃ·¯Å°
; 4724 : 	DWORD dwSrcColorKey = ddsdSrc.ddckCKSrcBlt.dwColorSpaceLowValue;
; 4725 : 	WORD wSrc=0;
; 4726 : 
; 4727 : 	//// WORD ´ÜÀ§·Î ÁÖ¼Ò°¡ Áõ°¡ µÇ¹Ç·Î RShift ( /2)
; 4728 : 	DWORD dwSrcPitch = ddsdSrc.lPitch >> 1;
; 4729 : 	DWORD dwDstPitch = g_ddsd.lPitch >> 1;

	sar	edx, 1
	mov	DWORD PTR _lpSrc$1$[ebp], ecx
	mov	DWORD PTR _nWidth$1$[ebp], edi
	add	eax, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+36
	lea	ebx, DWORD PTR [eax+esi*2]
	mov	eax, DWORD PTR _ddsdSrc$[ebp+64]

; 4730 : 
; 4731 : 	//// ·çÇÁ³»¿¡¼­´Â ÃÖ´ëÇÑ ¿¬»êÀ» ÃÖ¼ÒÈ­ÇÑ´Ù	
; 4732 : 	for (int iy=0; iy < nHeight; iy++)

	mov	esi, DWORD PTR _ddsdSrc$[ebp+8]
	mov	DWORD PTR _dwSrcColorKey$1$[ebp], eax
	mov	eax, DWORD PTR _ddsdSrc$[ebp+16]
	sar	eax, 1
	mov	DWORD PTR _ddsdSrc$1$[ebp], esi
	test	esi, esi
	jle	SHORT $LN3@PutSpriteL
	add	eax, eax
	add	edx, edx
	mov	DWORD PTR tv287[ebp], eax
	mov	DWORD PTR tv286[ebp], edx
	npad	3
$LL4@PutSpriteL:

; 4733 : 	{
; 4734 : 		for (int ix=0; ix < nWidth; ix++)

	test	edi, edi
	jle	SHORT $LN6@PutSpriteL
	mov	esi, DWORD PTR _nWidth$1$[ebp]
	mov	edi, ecx
	mov	eax, ebx
	sub	edi, ebx
$LL16@PutSpriteL:

; 4735 : 		{			
; 4736 : 			wSrc = *(lpSrc+ix);

	movzx	edx, WORD PTR [edi+eax]

; 4737 : 			if (wSrc != dwSrcColorKey)

	cmp	edx, DWORD PTR _dwSrcColorKey$1$[ebp]
	je	SHORT $LN17@PutSpriteL

; 4738 : 			{
; 4739 : 				*(lpDst+ix) = wSrc;

	mov	WORD PTR [eax], dx
$LN17@PutSpriteL:

; 4733 : 	{
; 4734 : 		for (int ix=0; ix < nWidth; ix++)

	add	eax, 2
	sub	esi, 1
	jne	SHORT $LL16@PutSpriteL
	mov	ecx, DWORD PTR _lpSrc$1$[ebp]
	mov	esi, DWORD PTR _ddsdSrc$1$[ebp]
	mov	edi, DWORD PTR _nWidth$1$[ebp]
	mov	eax, DWORD PTR tv287[ebp]
	mov	edx, DWORD PTR tv286[ebp]
$LN6@PutSpriteL:

; 4740 : 			}
; 4741 : 		}
; 4742 : 		lpSrc += dwSrcPitch;

	add	ecx, eax

; 4743 : 		lpDst += dwDstPitch;

	add	ebx, edx
	sub	esi, 1
	mov	DWORD PTR _lpSrc$1$[ebp], ecx
	mov	DWORD PTR _ddsdSrc$1$[ebp], esi
	jne	SHORT $LL4@PutSpriteL
$LN3@PutSpriteL:

; 4744 : 	}
; 4745 : 
; 4746 : 	hRet = lpDDS->Unlock(NULL);

	mov	ecx, DWORD PTR _lpDDS$GSCopy$1$[ebp]
	push	0
	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+128]

; 4747 : 	if (hRet != DD_OK) { DDERRCHK(hRet); return; }

	test	eax, eax
	je	SHORT $LN10@PutSpriteL
	push	4747					; 0000128bH
$LN23@PutSpriteL:

; 4748 : }

	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN10@PutSpriteL:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?__PutSpriteLock16@@YAXPAUIDirectDrawSurface7@@HH@Z ENDP ; __PutSpriteLock16
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__PutImageLock@@YAXPAUIDirectDrawSurface7@@HH@Z
_TEXT	SEGMENT
_lpDDS$GSCopy$1$ = -136					; size = 4
_y$GSCopy$1$ = -132					; size = 4
_nWidth$1$ = -132					; size = 4
_ddsdSrc$ = -128					; size = 124
__$ArrayPad$ = -4					; size = 4
_lpDDS$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?__PutImageLock@@YAXPAUIDirectDrawSurface7@@HH@Z PROC	; __PutImageLock, COMDAT

; 4658 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 136				; 00000088H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	mov	eax, DWORD PTR _y$[ebp]
	push	ebx
	mov	ebx, DWORD PTR _lpDDS$[ebp]
	push	esi
	mov	esi, DWORD PTR _x$[ebp]

; 4659 : 	HRESULT hRet;
; 4660 : 	DDSURFACEDESC2 ddsdSrc;
; 4661 : 
; 4662 : 	memset(&ddsdSrc, 0, sizeof(ddsdSrc));

	push	120					; 00000078H
	mov	DWORD PTR _y$GSCopy$1$[ebp], eax
	lea	eax, DWORD PTR _ddsdSrc$[ebp+4]
	push	0
	push	eax
	mov	DWORD PTR _lpDDS$GSCopy$1$[ebp], ebx
	call	_memset

; 4663 : 	ddsdSrc.dwSize = sizeof(ddsdSrc);    
; 4664 : 
; 4665 : 	hRet = lpDDS->Lock(NULL, &ddsdSrc, DDLOCK_READONLY|DDLOCK_WAIT, NULL);

	mov	eax, DWORD PTR [ebx]
	lea	ecx, DWORD PTR _ddsdSrc$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ddsdSrc$[ebp], 124		; 0000007cH
	push	0
	push	17					; 00000011H
	push	ecx
	push	0
	push	ebx
	call	DWORD PTR [eax+100]

; 4666 : 	if (hRet != DD_OK) { DDERRCHK(hRet); return; }

	test	eax, eax
	je	SHORT $LN7@PutImageLo
	push	4666					; 0000123aH
	jmp	$LN16@PutImageLo
$LN7@PutImageLo:

; 4667 : 
; 4668 : 	///// BPP¿¡ µû¶ó ¿¬»ê °ªÀ» ÃëÇÑ´Ù
; 4669 : 	DWORD dwMul = 1;
; 4670 : 	switch(g_dwRGBBitCount)

	mov	eax, DWORD PTR ?g_dwRGBBitCount@@3KA	; g_dwRGBBitCount
	mov	ecx, 1
	cmp	eax, 16					; 00000010H
	je	SHORT $LN8@PutImageLo
	cmp	eax, 32					; 00000020H
	jne	SHORT $LN2@PutImageLo

; 4673 : 	case 32 : dwMul = 4; break;

	lea	ecx, DWORD PTR [eax-28]
	jmp	SHORT $LN2@PutImageLo
$LN8@PutImageLo:

; 4671 : 	{
; 4672 : 	case 16 : dwMul = 2; break;

	mov	ecx, 2
$LN2@PutImageLo:

; 4674 : 	}
; 4675 : 
; 4676 : 	//// ÀÌ¹ÌÁö Ç¥¸é ÁÖ¼Ò
; 4677 : 	LPBYTE lpSrc = (LPBYTE) ddsdSrc.lpSurface;
; 4678 : 	
; 4679 : 	//// 2Â÷ Ç¥¸é ÁÖ¼Ò ( Àü¿ª )	
; 4680 : 	LPBYTE lpDst = (LPBYTE) g_ddsd.lpSurface + y*g_ddsd.lPitch+(x * dwMul);

	mov	eax, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+16
	imul	eax, DWORD PTR _y$GSCopy$1$[ebp]

; 4681 : 
; 4682 : 	int nWidth  = ddsdSrc.dwWidth * dwMul;
; 4683 : 	int nHeight = ddsdSrc.dwHeight;
; 4684 : 
; 4685 : 	//// memcpy¿¡ ÀÇÇÑ ¸Þ¸ð¸® Àü¼Û
; 4686 : 	for (int iy=0; iy < nHeight; iy++)

	mov	ebx, DWORD PTR _ddsdSrc$[ebp+8]
	imul	esi, ecx
	push	edi
	mov	edi, DWORD PTR _ddsdSrc$[ebp+36]
	add	eax, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+36
	add	esi, eax
	mov	eax, DWORD PTR _ddsdSrc$[ebp+12]
	imul	eax, ecx
	mov	DWORD PTR _nWidth$1$[ebp], eax
	test	ebx, ebx
	jle	SHORT $LN5@PutImageLo
	npad	5
$LL6@PutImageLo:

; 4687 : 	{
; 4688 : 		memcpy(lpDst, lpSrc, nWidth);

	push	eax
	push	edi
	push	esi
	call	_memcpy

; 4689 : 		lpSrc += ddsdSrc.lPitch;

	add	edi, DWORD PTR _ddsdSrc$[ebp+16]
	add	esp, 12					; 0000000cH

; 4690 : 		lpDst += g_ddsd.lPitch;

	add	esi, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+16
	mov	eax, DWORD PTR _nWidth$1$[ebp]
	sub	ebx, 1
	jne	SHORT $LL6@PutImageLo
$LN5@PutImageLo:

; 4691 : 	}
; 4692 : 
; 4693 : 	hRet = lpDDS->Unlock(NULL);

	mov	ecx, DWORD PTR _lpDDS$GSCopy$1$[ebp]
	push	0
	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+128]
	pop	edi

; 4694 : 	if (hRet != DD_OK) { DDERRCHK(hRet); return; }

	test	eax, eax
	je	SHORT $LN10@PutImageLo
	push	4694					; 00001256H
$LN16@PutImageLo:

; 4695 : }

	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN10@PutImageLo:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?__PutImageLock@@YAXPAUIDirectDrawSurface7@@HH@Z ENDP	; __PutImageLock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z
_TEXT	SEGMENT
_ddbltfx$ = -264					; size = 100
_ddrval$ = -164						; size = 4
_ddsd$ = -160						; size = 124
_rcDest$ = -36						; size = 16
_CHAR$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpDDS$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_Count$ = 20						; size = 4
_Number$ = 24						; size = 4
_cutx$ = 28						; size = 4
_cuty$ = 32						; size = 4
_Flip$ = 36						; size = 4
?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z PROC ; __PutAnimeSprite, COMDAT

; 4606 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 264				; 00000108H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	push	edi
	mov	edi, DWORD PTR _lpDDS$[ebp]

; 4607 : 	//// Ç¥¸éÀÇ Å©±â Á¤º¸¸¦ ¾ò´Â´Ù ( ÀÓ½ÃÄÚµå )
; 4608 : 	DDSURFACEDESC2 ddsd;
; 4609 : 	DDBLTFX  ddbltfx;
; 4610 : 	HRESULT ddrval;
; 4611 : 	ddsd.dwSize = sizeof(ddsd);
; 4612 : 	ddsd.dwFlags = DDSD_HEIGHT | DDSD_WIDTH;
; 4613 : 	lpDDS->GetSurfaceDesc(&ddsd);

	lea	ecx, DWORD PTR _ddsd$[ebp]
	push	ecx
	push	edi
	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH
	mov	eax, DWORD PTR [edi]
	mov	DWORD PTR _ddsd$[ebp+4], 6
	call	DWORD PTR [eax+88]

; 4614 : 
; 4615 : 	ZeroMemory(&ddbltfx, sizeof(ddbltfx));

	push	92					; 0000005cH
	lea	eax, DWORD PTR _ddbltfx$[ebp+8]
	push	0
	push	eax
	call	_memset

; 4616 : 	ddbltfx.dwSize = sizeof(ddbltfx);
; 4617 : 	ddbltfx.dwDDFX = DDBLTFX_MIRRORLEFTRIGHT;
; 4618 : 
; 4619 : 	RECT CHAR = { 0 + (cutx * Number), 0, cutx * (Number + 1), cuty };

	mov	edx, DWORD PTR _Number$[ebp]
	add	esp, 12					; 0000000cH
	mov	eax, edx

; 4620 : 	RECT rcDest = { x, y, x + (ddsd.dwWidth / Count), y + ddsd.dwHeight };

	mov	ecx, DWORD PTR _x$[ebp]
	imul	eax, DWORD PTR _cutx$[ebp]
	mov	esi, DWORD PTR _y$[ebp]
	mov	DWORD PTR _ddbltfx$[ebp], 100		; 00000064H
	mov	DWORD PTR _ddbltfx$[ebp+4], 2
	mov	DWORD PTR _CHAR$[ebp+4], 0
	mov	DWORD PTR _CHAR$[ebp], eax
	lea	eax, DWORD PTR [edx+1]
	imul	eax, DWORD PTR _cutx$[ebp]
	xor	edx, edx
	mov	DWORD PTR _rcDest$[ebp], ecx
	mov	DWORD PTR _rcDest$[ebp+4], esi
	mov	DWORD PTR _CHAR$[ebp+8], eax
	mov	eax, DWORD PTR _cuty$[ebp]
	mov	DWORD PTR _CHAR$[ebp+12], eax
	mov	eax, DWORD PTR _ddsd$[ebp+12]
	div	DWORD PTR _Count$[ebp]
	add	eax, ecx
	mov	DWORD PTR _rcDest$[ebp+8], eax
	mov	eax, DWORD PTR _ddsd$[ebp+8]
	add	eax, esi
	mov	DWORD PTR _rcDest$[ebp+12], eax

; 4621 : 	//ÁÂ¿ì¹ÝÀü
; 4622 : 	if (Flip == 1)

	mov	eax, DWORD PTR _Flip$[ebp]
	cmp	eax, 1
	jne	SHORT $LN2@PutAnimeSp

; 4623 : 	{
; 4624 : 		/////
; 4625 : 		ddrval = g_pDDSBack->Blt(&rcDest, lpDDS, &CHAR, DDBLT_KEYSRC | DDBLT_WAIT | DDBLT_DDFX, &ddbltfx);

	mov	eax, DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	lea	edx, DWORD PTR _ddbltfx$[ebp]
	push	edx
	push	16812032				; 01008800H
	lea	edx, DWORD PTR _CHAR$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	edi
	lea	edx, DWORD PTR _rcDest$[ebp]
	push	edx
	push	eax
	call	DWORD PTR [ecx+20]
	jmp	SHORT $LN4@PutAnimeSp
$LN2@PutAnimeSp:

; 4626 : 	}
; 4627 : 	else if (Flip == 0)

	test	eax, eax
	jne	SHORT $LN7@PutAnimeSp

; 4628 : 	{
; 4629 : 		ddrval = g_pDDSBack->Blt(&rcDest, lpDDS, &CHAR, DDBLT_KEYSRC | DDBLT_WAIT, NULL);

	mov	eax, DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	lea	edx, DWORD PTR _CHAR$[ebp]
	push	0
	push	16809984				; 01008000H
	push	edx
	mov	ecx, DWORD PTR [eax]
	lea	edx, DWORD PTR _rcDest$[ebp]
	push	edi
	push	edx
	push	eax
	call	DWORD PTR [ecx+20]
	jmp	SHORT $LN4@PutAnimeSp
$LN7@PutAnimeSp:

; 4626 : 	}
; 4627 : 	else if (Flip == 0)

	mov	eax, DWORD PTR _ddrval$[ebp]
$LN4@PutAnimeSp:
	pop	edi

; 4630 : 	}
; 4631 : 	if (ddrval != DD_OK) DDERRCHK(ddrval);

	pop	esi
	test	eax, eax
	je	SHORT $LN5@PutAnimeSp
	push	4631					; 00001217H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN5@PutAnimeSp:

; 4632 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ENDP ; __PutAnimeSprite
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__Putbar@@YAXPAUIDirectDrawSurface7@@HHHHM@Z
_TEXT	SEGMENT
_ddsd$ = -144						; size = 124
_rcDest$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpDDS$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
_Mhp$ = 20						; size = 4
_hp$ = 24						; size = 4
_HPrate$ = 28						; size = 4
?__Putbar@@YAXPAUIDirectDrawSurface7@@HHHHM@Z PROC	; __Putbar, COMDAT

; 4635 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR _lpDDS$[ebp]

; 4636 : 	DDSURFACEDESC2 ddsd;
; 4637 : 	ddsd.dwSize = sizeof(ddsd);
; 4638 : 	ddsd.dwFlags = DDSD_HEIGHT | DDSD_WIDTH;
; 4639 : 	HPrate = ((float)hp / (float)Mhp);
; 4640 : 	if (HPrate <= 0)
; 4641 : 	{
; 4642 : 		HPrate = 0;
; 4643 : 	}
; 4644 : 	lpDDS->GetSurfaceDesc(&ddsd);

	lea	ecx, DWORD PTR _ddsd$[ebp]
	push	ecx
	push	esi
	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR _ddsd$[ebp+4], 6
	call	DWORD PTR [eax+88]
	movd	xmm1, DWORD PTR _hp$[ebp]
	xorps	xmm2, xmm2
	movd	xmm0, DWORD PTR _Mhp$[ebp]

; 4645 : 
; 4646 : 	/////
; 4647 : 	RECT rcDest = { x, y, (float)x + ((float)ddsd.dwWidth * HPrate), y + ddsd.dwHeight };

	mov	eax, DWORD PTR _ddsd$[ebp+12]
	cvtdq2ps xmm0, xmm0
	mov	ecx, DWORD PTR _x$[ebp]
	mov	edx, DWORD PTR _y$[ebp]

; 4648 : 	HRESULT ddrval = g_pDDSBack->Blt(&rcDest, lpDDS, NULL, DDBLT_KEYSRC | DDBLT_WAIT, NULL);

	push	0
	push	16809984				; 01008000H
	cvtdq2ps xmm1, xmm1
	push	0
	mov	DWORD PTR _rcDest$[ebp+4], edx
	push	esi
	mov	DWORD PTR _rcDest$[ebp], ecx
	divss	xmm1, xmm0
	movd	xmm0, eax
	cvtdq2pd xmm0, xmm0
	shr	eax, 31					; 0000001fH
	maxss	xmm2, xmm1
	addsd	xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[eax*8]
	cvtpd2ps xmm0, xmm0
	mulss	xmm2, xmm0
	movd	xmm0, ecx
	cvtdq2ps xmm0, xmm0
	addss	xmm2, xmm0
	cvttss2si eax, xmm2
	mov	DWORD PTR _rcDest$[ebp+8], eax
	mov	eax, DWORD PTR _ddsd$[ebp+8]
	add	eax, edx
	lea	edx, DWORD PTR _rcDest$[ebp]
	mov	DWORD PTR _rcDest$[ebp+12], eax
	mov	eax, DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	push	edx
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+20]
	pop	esi

; 4649 : 	if (ddrval != DD_OK) DDERRCHK(ddrval);

	test	eax, eax
	je	SHORT $LN3@Putbar
	push	4649					; 00001229H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN3@Putbar:

; 4650 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?__Putbar@@YAXPAUIDirectDrawSurface7@@HHHHM@Z ENDP	; __Putbar
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__PutSprite@@YAXPAUIDirectDrawSurface7@@HH@Z
_TEXT	SEGMENT
_ddsd$ = -144						; size = 124
_rcDest$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpDDS$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?__PutSprite@@YAXPAUIDirectDrawSurface7@@HH@Z PROC	; __PutSprite, COMDAT

; 4591 : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR _lpDDS$[ebp]

; 4592 : 	//// Ç¥¸éÀÇ Å©±â Á¤º¸¸¦ ¾ò´Â´Ù ( ÀÓ½ÃÄÚµå )
; 4593 : 	DDSURFACEDESC2 ddsd;
; 4594 :     ddsd.dwSize = sizeof(ddsd);
; 4595 :     ddsd.dwFlags = DDSD_HEIGHT | DDSD_WIDTH;
; 4596 : 	lpDDS->GetSurfaceDesc(&ddsd);

	lea	ecx, DWORD PTR _ddsd$[ebp]
	push	ecx
	push	esi
	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR _ddsd$[ebp+4], 6
	call	DWORD PTR [eax+88]

; 4597 : 
; 4598 : 	/////
; 4599 : 	RECT rcDest = { x, y, x+ddsd.dwWidth, y+ddsd.dwHeight };	

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _ddsd$[ebp+12]
	mov	edx, DWORD PTR _y$[ebp]
	add	eax, ecx
	mov	DWORD PTR _rcDest$[ebp+8], eax
	mov	eax, DWORD PTR _ddsd$[ebp+8]

; 4600 : 	HRESULT ddrval = g_pDDSBack->Blt(&rcDest, lpDDS, NULL, DDBLT_KEYSRC|DDBLT_WAIT, NULL);

	push	0
	add	eax, edx
	mov	DWORD PTR _rcDest$[ebp+4], edx
	push	16809984				; 01008000H
	mov	DWORD PTR _rcDest$[ebp+12], eax
	lea	edx, DWORD PTR _rcDest$[ebp]
	mov	eax, DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	push	0
	push	esi
	mov	DWORD PTR _rcDest$[ebp], ecx
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	call	DWORD PTR [ecx+20]
	pop	esi

; 4601 : 	if (ddrval != DD_OK) DDERRCHK(ddrval);

	test	eax, eax
	je	SHORT $LN2@PutSprite
	push	4601					; 000011f9H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN2@PutSprite:

; 4602 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?__PutSprite@@YAXPAUIDirectDrawSurface7@@HH@Z ENDP	; __PutSprite
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__PutImage@@YAXPAUIDirectDrawSurface7@@HH@Z
_TEXT	SEGMENT
_ddsd$ = -144						; size = 124
_rcDest$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
_lpDDS$ = 8						; size = 4
_x$ = 12						; size = 4
_y$ = 16						; size = 4
?__PutImage@@YAXPAUIDirectDrawSurface7@@HH@Z PROC	; __PutImage, COMDAT

; 4575 : {	

	push	ebp
	mov	ebp, esp
	sub	esp, 144				; 00000090H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR _lpDDS$[ebp]

; 4576 : 	//// Ç¥¸éÀÇ Å©±â Á¤º¸¸¦ ¾ò´Â´Ù ( ÀÓ½ÃÄÚµå )
; 4577 : 	DDSURFACEDESC2 ddsd;
; 4578 :     ddsd.dwSize = sizeof(ddsd);
; 4579 :     ddsd.dwFlags = DDSD_HEIGHT | DDSD_WIDTH;
; 4580 : 	lpDDS->GetSurfaceDesc(&ddsd);

	lea	ecx, DWORD PTR _ddsd$[ebp]
	push	ecx
	push	esi
	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH
	mov	eax, DWORD PTR [esi]
	mov	DWORD PTR _ddsd$[ebp+4], 6
	call	DWORD PTR [eax+88]

; 4581 : 
; 4582 : 	/////
; 4583 : 	RECT rcDest = { x, y, x+ddsd.dwWidth, y+ddsd.dwHeight };	

	mov	ecx, DWORD PTR _x$[ebp]
	mov	eax, DWORD PTR _ddsd$[ebp+12]
	mov	edx, DWORD PTR _y$[ebp]
	add	eax, ecx
	mov	DWORD PTR _rcDest$[ebp+8], eax
	mov	eax, DWORD PTR _ddsd$[ebp+8]

; 4584 : 	HRESULT ddrval = g_pDDSBack->Blt(&rcDest, lpDDS, NULL, DDBLT_WAIT, NULL);

	push	0
	add	eax, edx
	mov	DWORD PTR _rcDest$[ebp+4], edx
	push	16777216				; 01000000H
	mov	DWORD PTR _rcDest$[ebp+12], eax
	lea	edx, DWORD PTR _rcDest$[ebp]
	mov	eax, DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	push	0
	push	esi
	mov	DWORD PTR _rcDest$[ebp], ecx
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	call	DWORD PTR [ecx+20]
	pop	esi

; 4585 : 	if (ddrval != DD_OK) DDERRCHK(ddrval);

	test	eax, eax
	je	SHORT $LN2@PutImage
	push	4585					; 000011e9H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN2@PutImage:

; 4586 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?__PutImage@@YAXPAUIDirectDrawSurface7@@HH@Z ENDP	; __PutImage
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__MEM2DDS@@YAHPAUIDirectDrawSurface7@@PAEHH@Z
_TEXT	SEGMENT
_lpDstDDS$GSCopy$1$ = -132				; size = 4
_ddsd$ = -128						; size = 124
__$ArrayPad$ = -4					; size = 4
_lpDstDDS$ = 8						; size = 4
_lpSrcMem$ = 12						; size = 4
_nWidth$ = 16						; size = 4
_nHeight$ = 20						; size = 4
?__MEM2DDS@@YAHPAUIDirectDrawSurface7@@PAEHH@Z PROC	; __MEM2DDS, COMDAT

; 4534 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 4535 : 	int iy;
; 4536 : 	DDSURFACEDESC2 ddsd;
; 4537 : 	HRESULT hRet;
; 4538 : 		
; 4539 : 	int nWidthStep=0;
; 4540 : 
; 4541 : 	//// ºñÆ®Ä«¿îÆ®¿¡ µû¶ó °è»êµÈ °¡·ÎÆøÀ» ±¸ÇÑ´Ù
; 4542 : 	switch (g_dwRGBBitCount)

	mov	eax, DWORD PTR ?g_dwRGBBitCount@@3KA	; g_dwRGBBitCount
	push	ebx
	mov	ebx, DWORD PTR _lpSrcMem$[ebp]
	add	eax, -8					; fffffff8H
	push	esi
	mov	esi, DWORD PTR _lpDstDDS$[ebp]
	push	edi
	xor	edi, edi
	mov	DWORD PTR _lpDstDDS$GSCopy$1$[ebp], esi
	cmp	eax, 24					; 00000018H
	ja	SHORT $LN2@MEM2DDS
	movzx	eax, BYTE PTR $LN18@MEM2DDS[eax]
	jmp	DWORD PTR $LN20@MEM2DDS[eax*4]
$LN7@MEM2DDS:

; 4543 : 	{
; 4544 : 	case  8 : nWidthStep = nWidth;      break; // 

	mov	edi, DWORD PTR _nWidth$[ebp]
	jmp	SHORT $LN2@MEM2DDS
$LN8@MEM2DDS:

; 4545 : 	case 16 : nWidthStep = nWidth << 1; break; // nWidth * 2

	mov	eax, DWORD PTR _nWidth$[ebp]
	lea	edi, DWORD PTR [eax+eax]
	jmp	SHORT $LN2@MEM2DDS
$LN9@MEM2DDS:

; 4546 : 	case 24 : nWidthStep = nWidth *  3; break; // nWidth * 3

	mov	eax, DWORD PTR _nWidth$[ebp]
	lea	edi, DWORD PTR [eax+eax*2]
	jmp	SHORT $LN2@MEM2DDS
$LN10@MEM2DDS:

; 4547 : 	case 32 : nWidthStep = nWidth << 2; break; // nWidth * 4

	mov	eax, DWORD PTR _nWidth$[ebp]
	lea	edi, DWORD PTR [eax*4]
$LN2@MEM2DDS:

; 4548 : 	}
; 4549 : 
; 4550 : 	memset(&ddsd, 0, sizeof(ddsd));

	push	120					; 00000078H
	lea	eax, DWORD PTR _ddsd$[ebp+4]
	push	0
	push	eax
	call	_memset

; 4551 : 	ddsd.dwSize = sizeof(ddsd);
; 4552 : 	
; 4553 : 	hRet = lpDstDDS->Lock(NULL, &ddsd, DDLOCK_WAIT, NULL);

	mov	eax, DWORD PTR [esi]
	lea	ecx, DWORD PTR _ddsd$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH
	push	0
	push	1
	push	ecx
	push	0
	push	esi
	call	DWORD PTR [eax+100]

; 4554 : 	if (hRet != DD_OK) return DDERRCHK(hRet);

	test	eax, eax
	je	SHORT $LN11@MEM2DDS
	push	4554					; 000011caH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
	pop	edi

; 4568 : 
; 4569 : 	return TRUE;
; 4570 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@MEM2DDS:

; 4555 : 	
; 4556 : 	LPBYTE lpDDS = (LPBYTE) ddsd.lpSurface;
; 4557 : 
; 4558 : 	//// ¸Þ¸ð¸® Àü¼Û ( º¹»ç )
; 4559 : 	for (iy=0; iy < nHeight; iy++)

	cmp	DWORD PTR _nHeight$[ebp], 0
	mov	esi, DWORD PTR _ddsd$[ebp+36]
	jle	SHORT $LN5@MEM2DDS
$LL6@MEM2DDS:

; 4560 : 	{
; 4561 : 		memcpy(lpDDS, lpSrcMem, nWidthStep);

	push	edi
	push	ebx
	push	esi
	call	_memcpy

; 4562 : 		lpDDS    += ddsd.lPitch;

	add	esi, DWORD PTR _ddsd$[ebp+16]
	add	esp, 12					; 0000000cH

; 4563 : 		lpSrcMem += nWidthStep;

	add	ebx, edi
	sub	DWORD PTR _nHeight$[ebp], 1
	jne	SHORT $LL6@MEM2DDS
$LN5@MEM2DDS:

; 4564 : 	}
; 4565 : 	
; 4566 : 	hRet = lpDstDDS->Unlock(NULL);

	mov	ecx, DWORD PTR _lpDstDDS$GSCopy$1$[ebp]
	push	0
	push	ecx
	mov	eax, DWORD PTR [ecx]
	call	DWORD PTR [eax+128]

; 4567 : 	if (hRet != DD_OK) return DDERRCHK(hRet);

	test	eax, eax
	je	SHORT $LN12@MEM2DDS
	push	4567					; 000011d7H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
	pop	edi

; 4568 : 
; 4569 : 	return TRUE;
; 4570 : }

	pop	esi
	pop	ebx
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN12@MEM2DDS:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, 1
	pop	edi
	pop	esi
	xor	ecx, ebp
	pop	ebx
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
	npad	1
$LN20@MEM2DDS:
	DD	$LN7@MEM2DDS
	DD	$LN8@MEM2DDS
	DD	$LN9@MEM2DDS
	DD	$LN10@MEM2DDS
	DD	$LN2@MEM2DDS
$LN18@MEM2DDS:
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	1
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
?__MEM2DDS@@YAHPAUIDirectDrawSurface7@@PAEHH@Z ENDP	; __MEM2DDS
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__DDLoadBin@@YAPAUIDirectDrawSurface7@@PBDH@Z
_TEXT	SEGMENT
_szBin$ = -12						; size = 8
_nSize$ = -4						; size = 4
_strFile$ = 8						; size = 4
_bIsVRAM$ = 12						; size = 4
?__DDLoadBin@@YAPAUIDirectDrawSurface7@@PBDH@Z PROC	; __DDLoadBin, COMDAT

; 4502 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 12					; 0000000cH
	push	esi
	push	edi

; 4503 : 	SIZE szBin;
; 4504 : 	int nSize;
; 4505 : 
; 4506 : 	//// ÆÄÀÏ ÀÐ±â
; 4507 : 	//// 8 ¹ÙÀÌÆ® : °¡·Î, ¼¼·ÎÅ©±â
; 4508 : 	//// 4 ¹ÙÀÌÆ® : ÀÌ¹ÌÁö ÀüÃ¼ Å©±â
; 4509 : 	FILE* file = fopen(strFile, "rb");

	push	OFFSET ??_C@_02JDPG@rb@
	push	DWORD PTR _strFile$[ebp]
	call	_fopen
	mov	esi, eax

; 4510 : 	fread(&szBin, sizeof(SIZE), 1, file);

	lea	eax, DWORD PTR _szBin$[ebp]
	push	esi
	push	1
	push	8
	push	eax
	call	_fread

; 4511 : 	fread(&nSize, sizeof(int), 1, file);	

	push	esi
	push	1
	lea	eax, DWORD PTR _nSize$[ebp]
	push	4
	push	eax
	call	_fread

; 4512 : 	LPBYTE lpImg = (LPBYTE) malloc(nSize);

	push	DWORD PTR _nSize$[ebp]
	call	_malloc

; 4513 : 	fread(lpImg, nSize, 1, file);

	push	esi
	push	1
	push	DWORD PTR _nSize$[ebp]
	mov	edi, eax
	push	edi
	call	_fread

; 4514 : 	fclose(file);

	push	esi
	call	_fclose
	add	esp, 64					; 00000040H

; 4515 : 
; 4516 : 	///// ¿ÀÇÁ½ºÅ©¸° »ý¼º ( VRAM )
; 4517 : 	LPDIRECTDRAWSURFACE7 lpDDS = NULL;
; 4518 : 	lpDDS = __CreateSurface(szBin.cx, szBin.cy, bIsVRAM);

	push	DWORD PTR _bIsVRAM$[ebp]
	push	DWORD PTR _szBin$[ebp+4]
	push	DWORD PTR _szBin$[ebp]
	call	?__CreateSurface@@YAPAUIDirectDrawSurface7@@KKH@Z ; __CreateSurface
	mov	esi, eax
	add	esp, 12					; 0000000cH

; 4519 : 	if (!lpDDS) { MSGERROR("_DDLoadBin"); return NULL; }

	test	esi, esi
	jne	SHORT $LN2@DDLoadBin
	push	4519					; 000011a7H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	OFFSET ??_C@_0L@EKKCFCMM@_DDLoadBin@
	call	?___Error@@YAHPAD0H@Z			; ___Error
	add	esp, 12					; 0000000cH
	xor	eax, eax
	pop	edi

; 4528 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN2@DDLoadBin:

; 4520 : 
; 4521 : 	///// »ý¼ºµÈ ¿ÀÇÁ½ºÅ©¸°¿¡ ¸Þ¸ð¸® µ¥ÀÌÅ¸ Àü¼Û
; 4522 : 	BOOL bRval = __MEM2DDS(lpDDS, lpImg, szBin.cx, szBin.cy);

	push	DWORD PTR _szBin$[ebp+4]
	push	DWORD PTR _szBin$[ebp]
	push	edi
	push	esi
	call	?__MEM2DDS@@YAHPAUIDirectDrawSurface7@@PAEHH@Z ; __MEM2DDS
	add	esp, 16					; 00000010H

; 4523 : 	if (!bRval) { MSGERROR("_DDLoadBin"); return NULL; }

	test	eax, eax
	jne	SHORT $LN3@DDLoadBin
	push	4523					; 000011abH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	OFFSET ??_C@_0L@EKKCFCMM@_DDLoadBin@
	call	?___Error@@YAHPAD0H@Z			; ___Error
	add	esp, 12					; 0000000cH
	xor	eax, eax
	pop	edi

; 4528 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@DDLoadBin:

; 4524 : 
; 4525 : 	free(lpImg);

	push	edi
	call	_free
	add	esp, 4

; 4526 : 
; 4527 : 	return lpDDS;

	mov	eax, esi
	pop	edi

; 4528 : }

	pop	esi
	mov	esp, ebp
	pop	ebp
	ret	0
?__DDLoadBin@@YAPAUIDirectDrawSurface7@@PBDH@Z ENDP	; __DDLoadBin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__CPYDDS@@YAXHHPAUtagRECT@@@Z
_TEXT	SEGMENT
_nWidth$1$ = 8						; size = 4
_x$ = 8							; size = 4
_lpDst$1$ = 12						; size = 4
_y$ = 12						; size = 4
_rcSrc$ = 16						; size = 4
?__CPYDDS@@YAXHHPAUtagRECT@@@Z PROC			; __CPYDDS, COMDAT

; 5525 : {

	push	ebp
	mov	ebp, esp

; 5526 : 	LPBYTE lpSrc = (LPBYTE)g_ddsd.lpSurface + rcSrc->top*g_ddsd.lPitch+(rcSrc->left * 2);

	mov	eax, DWORD PTR _rcSrc$[ebp]
	mov	edx, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+16
	push	ebx
	push	esi
	mov	esi, DWORD PTR [eax+4]
	push	edi
	mov	edi, DWORD PTR [eax]
	mov	eax, esi
	imul	eax, edx

; 5527 : 	LPBYTE lpDst = (LPBYTE)g_ddsd.lpSurface + y*g_ddsd.lPitch+(x * 2);

	imul	edx, DWORD PTR _y$[ebp]
	add	eax, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+36
	add	edx, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+36
	lea	ebx, DWORD PTR [eax+edi*2]
	mov	eax, DWORD PTR _x$[ebp]
	lea	ecx, DWORD PTR [edx+eax*2]

; 5528 : 
; 5529 : 	int nWidth = (rcSrc->right-rcSrc->left+1) * 2;

	mov	eax, DWORD PTR _rcSrc$[ebp]
	mov	DWORD PTR _lpDst$1$[ebp], ecx
	mov	eax, DWORD PTR [eax+8]
	sub	eax, edi

; 5530 : 	for (int iy=rcSrc->top; iy < rcSrc->bottom+1; iy++)

	mov	edi, DWORD PTR _rcSrc$[ebp]
	lea	edx, DWORD PTR [eax*2+2]
	mov	eax, DWORD PTR [edi+12]
	inc	eax
	mov	DWORD PTR _nWidth$1$[ebp], edx
	cmp	esi, eax
	jge	SHORT $LN3@CPYDDS
$LL4@CPYDDS:

; 5531 : 	{
; 5532 : 		memcpy(lpDst, lpSrc, nWidth);

	push	edx
	push	ebx
	push	ecx
	call	_memcpy

; 5533 : 		lpSrc += g_ddsd.lPitch;
; 5534 : 		lpDst += g_ddsd.lPitch;

	mov	ecx, DWORD PTR _lpDst$1$[ebp]
	inc	esi
	mov	eax, DWORD PTR [edi+12]
	add	esp, 12					; 0000000cH
	add	ecx, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+16
	inc	eax
	add	ebx, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+16
	mov	edx, DWORD PTR _nWidth$1$[ebp]
	mov	DWORD PTR _lpDst$1$[ebp], ecx
	cmp	esi, eax
	jl	SHORT $LL4@CPYDDS
$LN3@CPYDDS:
	pop	edi

; 5535 : 	}
; 5536 : }

	pop	esi
	pop	ebx
	pop	ebp
	ret	0
?__CPYDDS@@YAXHHPAUtagRECT@@@Z ENDP			; __CPYDDS
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__GetPixelRGB16@@YAGHHH@Z
_TEXT	SEGMENT
_R$ = 8							; size = 4
_G$ = 12						; size = 4
_B$ = 16						; size = 4
?__GetPixelRGB16@@YAGHHH@Z PROC				; __GetPixelRGB16, COMDAT

; 5456 : {

	push	ebp
	mov	ebp, esp

; 5457 : 	WORD wPixel=0;
; 5458 : 
; 5459 : 	if (g_dwPixelFormat == RGB565)

	cmp	DWORD PTR ?g_dwPixelFormat@@3KA, 565	; g_dwPixelFormat, 00000235H
	movzx	ecx, WORD PTR _B$[ebp]
	movzx	edx, WORD PTR _G$[ebp]
	movzx	eax, WORD PTR _R$[ebp]
	jne	SHORT $LN2@GetPixelRG

; 5460 : 	{
; 5461 : 		wPixel = (R<<11) | (G<<5) | B;   // 0000 0000 0001 1111		                                 

	shl	eax, 6
	or	eax, edx
	shl	eax, 5

; 5472 : 		return wPixel;
; 5473 : 	}
; 5474 : }

	or	eax, ecx
	pop	ebp
	ret	0
$LN2@GetPixelRG:

; 5462 : 		return wPixel;					 // 0000 0111 1110 0000   5
; 5463 : 	}                                    // 1111 1000 0000 0000  11
; 5464 : 	else if (g_dwPixelFormat == RGB555)

	cmp	DWORD PTR ?g_dwPixelFormat@@3KA, 555	; g_dwPixelFormat, 0000022bH
	jne	SHORT $LN4@GetPixelRG

; 5465 : 	{
; 5466 : 		wPixel = (R<<10) | (G<<5) | B;

	shl	eax, 5
	or	eax, edx
	shl	eax, 5

; 5472 : 		return wPixel;
; 5473 : 	}
; 5474 : }

	or	eax, ecx
	pop	ebp
	ret	0
$LN4@GetPixelRG:

; 5467 : 		return wPixel;
; 5468 : 	}
; 5469 : 	else // BGR565
; 5470 : 	{
; 5471 : 		wPixel = (B<<11) | (G<<5) | R;

	shl	ecx, 6
	or	ecx, edx
	shl	ecx, 5

; 5472 : 		return wPixel;
; 5473 : 	}
; 5474 : }

	or	eax, ecx
	pop	ebp
	ret	0
?__GetPixelRGB16@@YAGHHH@Z ENDP				; __GetPixelRGB16
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__CheckRGBBit@@YAKPAUIDirectDrawSurface7@@@Z
_TEXT	SEGMENT
_ddsd$ = -128						; size = 124
__$ArrayPad$ = -4					; size = 4
_lpDDS$ = 8						; size = 4
?__CheckRGBBit@@YAKPAUIDirectDrawSurface7@@@Z PROC	; __CheckRGBBit, COMDAT

; 5541 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 128				; 00000080H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi
	mov	esi, DWORD PTR _lpDDS$[ebp]

; 5542 : 	DDSURFACEDESC2 ddsd;
; 5543 : 	DWORD dwPixelFormat = 0;
; 5544 : 
; 5545 : 	::ZeroMemory(&ddsd, sizeof(ddsd));

	lea	eax, DWORD PTR _ddsd$[ebp+8]
	push	edi
	push	116					; 00000074H
	xor	edi, edi
	push	edi
	push	eax
	call	_memset

; 5546 : 	ddsd.dwSize  = sizeof(ddsd);
; 5547 :     ddsd.dwFlags = DDSD_PIXELFORMAT;
; 5548 :     HRESULT hRet = lpDDS->GetSurfaceDesc(&ddsd);

	mov	eax, DWORD PTR [esi]
	lea	ecx, DWORD PTR _ddsd$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH
	mov	DWORD PTR _ddsd$[ebp+4], 4096		; 00001000H
	push	ecx
	push	esi
	call	DWORD PTR [eax+88]

; 5549 : 	if (hRet != DD_OK) { DDERRCHK(hRet); return dwPixelFormat; }

	test	eax, eax
	je	SHORT $LN4@CheckRGBBi
	push	5549					; 000015adH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
	xor	eax, eax
	pop	edi

; 5562 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@CheckRGBBi:

; 5550 : 		
; 5551 : 	g_dwRGBBitCount = ddsd.ddpfPixelFormat.dwRGBBitCount;

	mov	eax, DWORD PTR _ddsd$[ebp+84]
	mov	DWORD PTR ?g_dwRGBBitCount@@3KA, eax	; g_dwRGBBitCount

; 5552 : 	switch(ddsd.ddpfPixelFormat.dwRBitMask)

	mov	eax, DWORD PTR _ddsd$[ebp+88]
	cmp	eax, 31744				; 00007c00H
	ja	SHORT $LN11@CheckRGBBi
	je	SHORT $LN6@CheckRGBBi
	cmp	eax, 31					; 0000001fH
	je	SHORT $LN7@CheckRGBBi
	cmp	eax, 255				; 000000ffH
	jne	SHORT $LN2@CheckRGBBi

; 5558 : 	case 0x0000FF : dwPixelFormat = BGR888; break;    // 00000000 00000000 11111111

	mov	edi, -888				; fffffc88H

; 5559 : 	}
; 5560 : 
; 5561 : 	return dwPixelFormat;

	mov	eax, edi
	pop	edi

; 5562 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN7@CheckRGBBi:

; 5556 : 	case 0x001F   : dwPixelFormat = BGR565; break;    // 00000000 00011111

	mov	edi, -565				; fffffdcbH

; 5559 : 	}
; 5560 : 
; 5561 : 	return dwPixelFormat;

	mov	eax, edi
	pop	edi

; 5562 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@CheckRGBBi:

; 5555 : 	case 0x7C00   : dwPixelFormat = RGB555; break;    // 01111100 00000000

	mov	edi, 555				; 0000022bH

; 5559 : 	}
; 5560 : 
; 5561 : 	return dwPixelFormat;

	mov	eax, edi
	pop	edi

; 5562 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN11@CheckRGBBi:

; 5552 : 	switch(ddsd.ddpfPixelFormat.dwRBitMask)

	cmp	eax, 63488				; 0000f800H
	je	SHORT $LN5@CheckRGBBi
	cmp	eax, 16711680				; 00ff0000H
	jne	SHORT $LN2@CheckRGBBi

; 5557 : 	case 0xFF0000 : dwPixelFormat = RGB888; break;    // 11111111 00000000 00000000

	mov	edi, 888				; 00000378H

; 5559 : 	}
; 5560 : 
; 5561 : 	return dwPixelFormat;

	mov	eax, edi
	pop	edi

; 5562 : }

	pop	esi
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@CheckRGBBi:

; 5553 : 	{
; 5554 : 	case 0xF800   : dwPixelFormat = RGB565; break;    // 11111000 00000000

	mov	edi, 565				; 00000235H
$LN2@CheckRGBBi:

; 5562 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, edi
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?__CheckRGBBit@@YAKPAUIDirectDrawSurface7@@@Z ENDP	; __CheckRGBBit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__DrawRect16@@YAXHHHHG@Z
_TEXT	SEGMENT
_x1$ = 8						; size = 4
_y1$ = 12						; size = 4
_x2$ = 16						; size = 4
_y2$ = 20						; size = 4
_wColor$ = 24						; size = 2
?__DrawRect16@@YAXHHHHG@Z PROC				; __DrawRect16, COMDAT

; 5508 : {

	push	ebp
	mov	ebp, esp
	push	ebx

; 5509 :     ///// °¡·Î
; 5510 : 	__DrawHLine16(x1, y1, x2, wColor);

	mov	ebx, DWORD PTR _x1$[ebp]
	push	esi
	mov	esi, DWORD PTR _wColor$[ebp]
	push	edi
	mov	edi, DWORD PTR _y1$[ebp]
	push	esi
	push	DWORD PTR _x2$[ebp]
	push	edi
	push	ebx
	call	?__DrawHLine16@@YAXHHHG@Z		; __DrawHLine16

; 5511 : 	__DrawHLine16(x1, y2, x2, wColor);

	push	esi
	push	DWORD PTR _x2$[ebp]
	mov	esi, DWORD PTR _y2$[ebp]
	push	esi
	push	ebx
	call	?__DrawHLine16@@YAXHHHG@Z		; __DrawHLine16

; 5512 : 
; 5513 : 	///// ¼¼·Î
; 5514 : 	__DrawVLine16(x1, y1+1, y2-1, wColor);

	push	DWORD PTR _wColor$[ebp]
	dec	esi
	inc	edi
	push	esi
	push	edi
	push	ebx
	call	?__DrawVLine16@@YAXHHHG@Z		; __DrawVLine16

; 5515 : 	__DrawVLine16(x2, y1+1, y2-1, wColor);

	push	DWORD PTR _wColor$[ebp]
	push	esi
	push	edi
	push	DWORD PTR _x2$[ebp]
	call	?__DrawVLine16@@YAXHHHG@Z		; __DrawVLine16
	add	esp, 64					; 00000040H
	pop	edi
	pop	esi
	pop	ebx

; 5516 : }

	pop	ebp
	ret	0
?__DrawRect16@@YAXHHHHG@Z ENDP				; __DrawRect16
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__DrawHLine16@@YAXHHHG@Z
_TEXT	SEGMENT
_x1$ = 8						; size = 4
_y$ = 12						; size = 4
_x2$ = 16						; size = 4
_wColor$ = 20						; size = 2
?__DrawHLine16@@YAXHHHG@Z PROC				; __DrawHLine16, COMDAT

; 5495 : {

	push	ebp
	mov	ebp, esp

; 5496 : 	LPBYTE lpDDS = (LPBYTE) g_ddsd.lpSurface;
; 5497 : 	WORD* lpDst = (WORD*) (lpDDS + y*g_ddsd.lPitch+(x1 * 2));

	mov	eax, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+16
	imul	eax, DWORD PTR _y$[ebp]
	mov	ecx, DWORD PTR _x1$[ebp]
	push	edi
	add	eax, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+36
	lea	edi, DWORD PTR [eax+ecx*2]

; 5498 : 
; 5499 : 	for (int ix=x1; ix <= x2; ix++)

	mov	eax, DWORD PTR _x2$[ebp]
	cmp	ecx, eax
	jg	SHORT $LN3@DrawHLine1

; 5496 : 	LPBYTE lpDDS = (LPBYTE) g_ddsd.lpSurface;
; 5497 : 	WORD* lpDst = (WORD*) (lpDDS + y*g_ddsd.lPitch+(x1 * 2));

	sub	eax, ecx
	lea	ecx, DWORD PTR [eax*2+2]
	mov	eax, DWORD PTR _wColor$[ebp]
	movzx	edx, ax
	shr	ecx, 1
	mov	eax, edx
	shl	edx, 16					; 00000010H
	or	eax, edx
	shr	ecx, 1
	rep stosd
	adc	ecx, ecx
	rep stosw
$LN3@DrawHLine1:
	pop	edi

; 5500 : 	{
; 5501 : 		*lpDst = wColor;
; 5502 : 		lpDst++;
; 5503 : 	}
; 5504 : }

	pop	ebp
	ret	0
?__DrawHLine16@@YAXHHHG@Z ENDP				; __DrawHLine16
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__DrawVLine16@@YAXHHHG@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y1$ = 12						; size = 4
_y2$ = 16						; size = 4
_wColor$ = 20						; size = 2
?__DrawVLine16@@YAXHHHG@Z PROC				; __DrawVLine16, COMDAT

; 5481 : {

	push	ebp
	mov	ebp, esp

; 5482 : 	LPBYTE lpDDS = (LPBYTE) g_ddsd.lpSurface;	
; 5483 : 	WORD* lpDst = (WORD*) (lpDDS + y1*g_ddsd.lPitch+(x * 2));	

	mov	edx, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+16
	mov	ecx, edx
	mov	eax, DWORD PTR _x$[ebp]
	push	esi
	mov	esi, DWORD PTR _y1$[ebp]
	imul	ecx, esi

; 5484 : 	
; 5485 : 	int nPitch = g_ddsd.lPitch>>1; // g_ddsd.lPitch/2

	sar	edx, 1
	add	ecx, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+36
	lea	eax, DWORD PTR [ecx+eax*2]

; 5486 : 	for (int iy=y1; iy <= y2; iy++)

	mov	ecx, DWORD PTR _y2$[ebp]
	cmp	esi, ecx
	jg	SHORT $LN3@DrawVLine1

; 5482 : 	LPBYTE lpDDS = (LPBYTE) g_ddsd.lpSurface;	
; 5483 : 	WORD* lpDst = (WORD*) (lpDDS + y1*g_ddsd.lPitch+(x * 2));	

	sub	ecx, esi
	add	edx, edx
	mov	si, WORD PTR _wColor$[ebp]
	inc	ecx
$LL4@DrawVLine1:

; 5487 : 	{
; 5488 : 		*lpDst = wColor;

	mov	WORD PTR [eax], si

; 5489 : 		lpDst += nPitch;

	add	eax, edx
	sub	ecx, 1
	jne	SHORT $LL4@DrawVLine1
$LN3@DrawVLine1:
	pop	esi

; 5490 : 	}
; 5491 : }

	pop	ebp
	ret	0
?__DrawVLine16@@YAXHHHG@Z ENDP				; __DrawVLine16
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__GetPixel16@@YAGHH@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
?__GetPixel16@@YAGHH@Z PROC				; __GetPixel16, COMDAT

; 5446 : {

	push	ebp
	mov	ebp, esp

; 5447 : 	LPBYTE lpDDS = (LPBYTE) g_ddsd.lpSurface;
; 5448 : 	WORD* pPixel = (WORD*) (lpDDS + y*g_ddsd.lPitch+(x * 2));

	mov	ecx, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+16
	imul	ecx, DWORD PTR _y$[ebp]

; 5449 : 	
; 5450 : 	return *pPixel;

	mov	eax, DWORD PTR _x$[ebp]
	add	ecx, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+36
	mov	ax, WORD PTR [ecx+eax*2]

; 5451 : }

	pop	ebp
	ret	0
?__GetPixel16@@YAGHH@Z ENDP				; __GetPixel16
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__PutPixel8@@YAXHHE@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_bColor$ = 16						; size = 1
?__PutPixel8@@YAXHHE@Z PROC				; __PutPixel8, COMDAT

; 5423 : {

	push	ebp
	mov	ebp, esp

; 5424 : 	LPBYTE lpDDS = (LPBYTE) g_ddsd.lpSurface;
; 5425 : 	lpDDS[y * g_ddsd.lPitch + x] = bColor;

	mov	edx, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+16
	imul	edx, DWORD PTR _y$[ebp]
	mov	eax, DWORD PTR _x$[ebp]
	mov	cl, BYTE PTR _bColor$[ebp]
	add	edx, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+36
	mov	BYTE PTR [edx+eax], cl

; 5426 : }

	pop	ebp
	ret	0
?__PutPixel8@@YAXHHE@Z ENDP				; __PutPixel8
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__PutPixel16@@YAXHHG@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_wColor$ = 16						; size = 2
?__PutPixel16@@YAXHHG@Z PROC				; __PutPixel16, COMDAT

; 5429 : {

	push	ebp
	mov	ebp, esp

; 5430 : 	LPBYTE lpDDS = (LPBYTE) g_ddsd.lpSurface;
; 5431 : 	WORD* lpDst = (WORD*) (lpDDS + y*g_ddsd.lPitch+(x * 2));

	mov	edx, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+16
	imul	edx, DWORD PTR _y$[ebp]

; 5432 : 
; 5433 : 	*lpDst = wColor;

	mov	eax, DWORD PTR _x$[ebp]
	mov	cx, WORD PTR _wColor$[ebp]
	add	edx, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+36
	mov	WORD PTR [edx+eax*2], cx

; 5434 : }

	pop	ebp
	ret	0
?__PutPixel16@@YAXHHG@Z ENDP				; __PutPixel16
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__PutPixel32@@YAXHHK@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_dwColor$ = 16						; size = 4
?__PutPixel32@@YAXHHK@Z PROC				; __PutPixel32, COMDAT

; 5437 : {

	push	ebp
	mov	ebp, esp

; 5438 : 	LPBYTE lpDDS = (LPBYTE) g_ddsd.lpSurface;
; 5439 : 	
; 5440 : 	DWORD* lpDst = (DWORD*) (lpDDS + y*g_ddsd.lPitch+(x * 4));	

	mov	edx, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+16
	imul	edx, DWORD PTR _y$[ebp]

; 5441 : 
; 5442 : 	*lpDst = dwColor;	

	mov	eax, DWORD PTR _x$[ebp]
	mov	ecx, DWORD PTR _dwColor$[ebp]
	add	edx, DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A+36
	mov	DWORD PTR [edx+eax*4], ecx

; 5443 : }

	pop	ebp
	ret	0
?__PutPixel32@@YAXHHK@Z ENDP				; __PutPixel32
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__Unlock@@YAHPAUIDirectDrawSurface7@@@Z
_TEXT	SEGMENT
_pDDSDest$ = 8						; size = 4
?__Unlock@@YAHPAUIDirectDrawSurface7@@@Z PROC		; __Unlock, COMDAT

; 5412 : {

	push	ebp
	mov	ebp, esp

; 5413 : 	HRESULT hRet = pDDSDest->Unlock(NULL);

	mov	eax, DWORD PTR _pDDSDest$[ebp]
	push	0
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+128]

; 5414 : 	if (hRet != DD_OK) { return DDERRCHK(hRet); }

	test	eax, eax
	je	SHORT $LN2@Unlock
	push	5414					; 00001526H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH

; 5417 : }

	pop	ebp
	ret	0
$LN2@Unlock:

; 5415 : 
; 5416 : 	return TRUE;

	mov	eax, 1

; 5417 : }

	pop	ebp
	ret	0
?__Unlock@@YAHPAUIDirectDrawSurface7@@@Z ENDP		; __Unlock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__Lock@@YAHPAUIDirectDrawSurface7@@@Z
_TEXT	SEGMENT
_pDDSDest$ = 8						; size = 4
?__Lock@@YAHPAUIDirectDrawSurface7@@@Z PROC		; __Lock, COMDAT

; 5402 : {	

	push	ebp
	mov	ebp, esp

; 5403 :     ::ZeroMemory(&g_ddsd, sizeof(DDSURFACEDESC2));

	push	120					; 00000078H
	push	0
	push	OFFSET ?g_ddsd@@3U_DDSURFACEDESC2@@A+4
	call	_memset

; 5404 : 	g_ddsd.dwSize = sizeof(DDSURFACEDESC2);
; 5405 : 	HRESULT hRet = pDDSDest->Lock(NULL, &g_ddsd, DDLOCK_WAIT, NULL);	

	mov	eax, DWORD PTR _pDDSDest$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?g_ddsd@@3U_DDSURFACEDESC2@@A, 124 ; 0000007cH
	mov	ecx, DWORD PTR [eax]
	push	0
	push	1
	push	OFFSET ?g_ddsd@@3U_DDSURFACEDESC2@@A	; g_ddsd
	push	0
	push	eax
	call	DWORD PTR [ecx+100]

; 5406 :     if (hRet != DD_OK) { return DDERRCHK(hRet); }

	test	eax, eax
	je	SHORT $LN2@Lock
	push	5406					; 0000151eH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH

; 5409 : }

	pop	ebp
	ret	0
$LN2@Lock:

; 5407 : 	
; 5408 : 	return TRUE;

	mov	eax, 1

; 5409 : }

	pop	ebp
	ret	0
?__Lock@@YAHPAUIDirectDrawSurface7@@@Z ENDP		; __Lock
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?_FillRectEx@@YAXPAUIDirectDrawSurface7@@PAUtagRECT@@K@Z
_TEXT	SEGMENT
_ddbltfx$ = -100					; size = 100
_lpDDSDest$ = 8						; size = 4
_lpRect$ = 12						; size = 4
_dwColor$ = 16						; size = 4
?_FillRectEx@@YAXPAUIDirectDrawSurface7@@PAUtagRECT@@K@Z PROC ; _FillRectEx, COMDAT

; 5923 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 100				; 00000064H

; 5924 : 	DDBLTFX ddbltfx;	
; 5925 : 	
; 5926 : 	ZeroMemory(&ddbltfx, sizeof(ddbltfx));

	push	100					; 00000064H
	lea	eax, DWORD PTR _ddbltfx$[ebp]
	push	0
	push	eax
	call	_memset

; 5927 : 	ddbltfx.dwSize = sizeof(ddbltfx);
; 5928 : 	ddbltfx.dwFillColor = dwColor;

	mov	eax, DWORD PTR _dwColor$[ebp]

; 5929 : 
; 5930 : 	HRESULT ddrval = lpDDSDest->Blt(lpRect, NULL, NULL, DDBLT_WAIT | DDBLT_COLORFILL, &ddbltfx);

	lea	edx, DWORD PTR _ddbltfx$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ddbltfx$[ebp+80], eax
	mov	eax, DWORD PTR _lpDDSDest$[ebp]
	mov	DWORD PTR _ddbltfx$[ebp], 100		; 00000064H
	push	edx
	mov	ecx, DWORD PTR [eax]
	push	16778240				; 01000400H
	push	0
	push	0
	push	DWORD PTR _lpRect$[ebp]
	push	eax
	call	DWORD PTR [ecx+20]

; 5931 : 	if (ddrval != DD_OK) DDERRCHK(ddrval);

	test	eax, eax
	je	SHORT $LN2@FillRectEx
	push	5931					; 0000172bH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
$LN2@FillRectEx:

; 5932 : }

	mov	esp, ebp
	pop	ebp
	ret	0
?_FillRectEx@@YAXPAUIDirectDrawSurface7@@PAUtagRECT@@K@Z ENDP ; _FillRectEx
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__ReleaseDC@@YAXPAUIDirectDrawSurface7@@@Z
_TEXT	SEGMENT
_lpDDSDest$ = 8						; size = 4
?__ReleaseDC@@YAXPAUIDirectDrawSurface7@@@Z PROC	; __ReleaseDC, COMDAT

; 5835 : {

	push	ebp
	mov	ebp, esp

; 5836 :     lpDDSDest->ReleaseDC(gHdc);

	mov	eax, DWORD PTR _lpDDSDest$[ebp]
	push	DWORD PTR ?gHdc@@3PAUHDC__@@A		; gHdc
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+104]

; 5837 : }

	pop	ebp
	ret	0
?__ReleaseDC@@YAXPAUIDirectDrawSurface7@@@Z ENDP	; __ReleaseDC
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__GetDC@@YAXPAUIDirectDrawSurface7@@@Z
_TEXT	SEGMENT
_lpDDSDest$ = 8						; size = 4
?__GetDC@@YAXPAUIDirectDrawSurface7@@@Z PROC		; __GetDC, COMDAT

; 5830 : {    

	push	ebp
	mov	ebp, esp

; 5831 :     lpDDSDest->GetDC(&gHdc);

	mov	eax, DWORD PTR _lpDDSDest$[ebp]
	push	OFFSET ?gHdc@@3PAUHDC__@@A		; gHdc
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+68]

; 5832 : }

	pop	ebp
	ret	0
?__GetDC@@YAXPAUIDirectDrawSurface7@@@Z ENDP		; __GetDC
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__PutTextf@@YAXHHKPADZZ
_TEXT	SEGMENT
_pOldFont$1$ = -520					; size = 4
_buf$ = -516						; size = 512
__$ArrayPad$ = -4					; size = 4
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_Color$ = 16						; size = 4
_format$ = 20						; size = 4
?__PutTextf@@YAXHHKPADZZ PROC				; __PutTextf, COMDAT

; 5874 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 520				; 00000208H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h

; 1390 :         int const _Result = __stdio_common_vsprintf(

	lea	eax, DWORD PTR _format$[ebp+4]
	push	eax
	push	0
	push	DWORD PTR _format$[ebp]
	lea	eax, DWORD PTR _buf$[ebp]
	push	-1
	push	eax
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax]
	push	DWORD PTR [eax+4]
	or	ecx, 1
	push	ecx
	call	___stdio_common_vsprintf
	add	esp, 28					; 0000001cH
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp

; 5882 :     SetBkMode(gHdc, TRANSPARENT);	

	push	1
	push	DWORD PTR ?gHdc@@3PAUHDC__@@A		; gHdc
	call	DWORD PTR __imp__SetBkMode@8

; 5883 :     HFONT* pOldFont = (HFONT*) SelectObject(gHdc, gFont);

	push	DWORD PTR ?gFont@@3PAUHFONT__@@A	; gFont
	push	DWORD PTR ?gHdc@@3PAUHDC__@@A		; gHdc
	call	DWORD PTR __imp__SelectObject@8

; 5884 : 	
; 5885 : 	///// ±×¸²ÀÚ
; 5886 : 	SetTextColor(gHdc, RGB(0,0,0));

	push	0
	push	DWORD PTR ?gHdc@@3PAUHDC__@@A		; gHdc
	mov	DWORD PTR _pOldFont$1$[ebp], eax
	call	DWORD PTR __imp__SetTextColor@8

; 5887 : 	TextOut(gHdc, x+1, y+1, buf, strlen(buf));

	lea	ecx, DWORD PTR _buf$[ebp]
	lea	edx, DWORD PTR [ecx+1]
$LL7@PutTextf:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL7@PutTextf
	push	esi
	mov	esi, DWORD PTR _y$[ebp]
	lea	eax, DWORD PTR _buf$[ebp]
	push	edi
	mov	edi, DWORD PTR _x$[ebp]
	sub	ecx, edx
	push	ecx
	push	eax
	lea	eax, DWORD PTR [esi+1]
	push	eax
	lea	eax, DWORD PTR [edi+1]
	push	eax
	push	DWORD PTR ?gHdc@@3PAUHDC__@@A		; gHdc
	call	DWORD PTR __imp__TextOutA@20

; 5888 : 	
; 5889 : 	///// ÆùÆ®
; 5890 : 	SetTextColor(gHdc, Color);

	push	DWORD PTR _Color$[ebp]
	push	DWORD PTR ?gHdc@@3PAUHDC__@@A		; gHdc
	call	DWORD PTR __imp__SetTextColor@8

; 5891 : 	TextOut(gHdc, x, y, buf, strlen(buf));

	lea	eax, DWORD PTR _buf$[ebp]
	lea	edx, DWORD PTR [eax+1]
	npad	3
$LL8@PutTextf:
	mov	cl, BYTE PTR [eax]
	inc	eax
	test	cl, cl
	jne	SHORT $LL8@PutTextf
	sub	eax, edx
	push	eax
	lea	eax, DWORD PTR _buf$[ebp]
	push	eax
	push	esi
	push	edi
	push	DWORD PTR ?gHdc@@3PAUHDC__@@A		; gHdc
	call	DWORD PTR __imp__TextOutA@20

; 5892 :     SelectObject(gHdc, pOldFont);

	push	DWORD PTR _pOldFont$1$[ebp]
	push	DWORD PTR ?gHdc@@3PAUHDC__@@A		; gHdc
	call	DWORD PTR __imp__SelectObject@8

; 5893 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	pop	edi
	xor	ecx, ebp
	pop	esi
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?__PutTextf@@YAXHHKPADZZ ENDP				; __PutTextf
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__PutText@@YAXHHKPBD@Z
_TEXT	SEGMENT
_x$ = 8							; size = 4
_y$ = 12						; size = 4
_Color$ = 16						; size = 4
_pString$ = 20						; size = 4
?__PutText@@YAXHHKPBD@Z PROC				; __PutText, COMDAT

; 5865 : {

	push	ebp
	mov	ebp, esp
	push	ebx
	push	edi

; 5866 : 	SetBkMode(gHdc, TRANSPARENT);

	push	1
	push	DWORD PTR ?gHdc@@3PAUHDC__@@A		; gHdc
	call	DWORD PTR __imp__SetBkMode@8

; 5867 : 	HFONT* pOldFont = (HFONT*) SelectObject(gHdc, gFont);

	push	DWORD PTR ?gFont@@3PAUHFONT__@@A	; gFont
	push	DWORD PTR ?gHdc@@3PAUHDC__@@A		; gHdc
	call	DWORD PTR __imp__SelectObject@8

; 5868 : 	SetTextColor(gHdc, Color);

	push	DWORD PTR _Color$[ebp]
	mov	edi, eax
	push	DWORD PTR ?gHdc@@3PAUHDC__@@A		; gHdc
	call	DWORD PTR __imp__SetTextColor@8

; 5869 : 	TextOut(gHdc, x, y, pString, strlen(pString));

	mov	edx, DWORD PTR _pString$[ebp]
	mov	ecx, edx
	lea	ebx, DWORD PTR [ecx+1]
	npad	2
$LL3@PutText:
	mov	al, BYTE PTR [ecx]
	inc	ecx
	test	al, al
	jne	SHORT $LL3@PutText
	sub	ecx, ebx
	push	ecx
	push	edx
	push	DWORD PTR _y$[ebp]
	push	DWORD PTR _x$[ebp]
	push	DWORD PTR ?gHdc@@3PAUHDC__@@A		; gHdc
	call	DWORD PTR __imp__TextOutA@20

; 5870 :     SelectObject(gHdc, pOldFont);

	push	edi
	push	DWORD PTR ?gHdc@@3PAUHDC__@@A		; gHdc
	call	DWORD PTR __imp__SelectObject@8
	pop	edi
	pop	ebx

; 5871 : }

	pop	ebp
	ret	0
?__PutText@@YAXHHKPBD@Z ENDP				; __PutText
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__DestroyFont@@YAXXZ
_TEXT	SEGMENT
?__DestroyFont@@YAXXZ PROC				; __DestroyFont, COMDAT

; 5857 : 	if (gFont) 

	mov	eax, DWORD PTR ?gFont@@3PAUHFONT__@@A	; gFont
	test	eax, eax
	je	SHORT $LN2@DestroyFon

; 5858 : 	{
; 5859 : 		DeleteObject(gFont);

	push	eax
	call	DWORD PTR __imp__DeleteObject@4

; 5860 : 		gFont = NULL;

	mov	DWORD PTR ?gFont@@3PAUHFONT__@@A, 0	; gFont
$LN2@DestroyFon:

; 5861 : 	}
; 5862 : }

	ret	0
?__DestroyFont@@YAXXZ ENDP				; __DestroyFont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__CreateFont@@YAXPBDHH@Z
_TEXT	SEGMENT
_FontName$ = 8						; size = 4
_nWidth$ = 12						; size = 4
_nWeight$ = 16						; size = 4
?__CreateFont@@YAXPBDHH@Z PROC				; __CreateFont, COMDAT

; 5840 : {

	push	ebp
	mov	ebp, esp

; 5841 :     gFont = CreateFont(nWidth, 0,

	push	DWORD PTR _FontName$[ebp]
	push	2
	push	3
	push	0
	push	0
	push	0
	push	0
	push	0
	push	0
	push	DWORD PTR _nWeight$[ebp]
	push	0
	push	0
	push	0
	push	DWORD PTR _nWidth$[ebp]
	call	DWORD PTR __imp__CreateFontA@56
	mov	DWORD PTR ?gFont@@3PAUHFONT__@@A, eax	; gFont

; 5842 : 					    0, 0,
; 5843 : 					    nWeight,
; 5844 : 					    FALSE,
; 5845 : 					    FALSE,
; 5846 : 					    FALSE,
; 5847 : 					    ANSI_CHARSET,
; 5848 : 					    OUT_DEFAULT_PRECIS,
; 5849 : 					    CLIP_DEFAULT_PRECIS,
; 5850 : 					    NONANTIALIASED_QUALITY,
; 5851 : 					    VARIABLE_PITCH,
; 5852 :                         FontName);
; 5853 : }

	pop	ebp
	ret	0
?__CreateFont@@YAXPBDHH@Z ENDP				; __CreateFont
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__DDCSetClipperList@@YAHPAUIDirectDrawSurface7@@PAUtagRECT@@H@Z
_TEXT	SEGMENT
_lpDDS$ = 8						; size = 4
_rcClipList$ = 12					; size = 4
_nCount$ = 16						; size = 4
?__DDCSetClipperList@@YAHPAUIDirectDrawSurface7@@PAUtagRECT@@H@Z PROC ; __DDCSetClipperList, COMDAT

; 5714 : {

	push	ebp
	mov	ebp, esp

; 5715 : 	LPRGNDATA pRd;
; 5716 : 	HRESULT ddrval;
; 5717 : 
; 5718 : 	if (!g_pDDClipper) 

	cmp	DWORD PTR ?g_pDDClipper@@3PAUIDirectDrawClipper@@A, 0 ; g_pDDClipper
	jne	SHORT $LN3@DDCSetClip

; 5719 : 	{
; 5720 :         ddrval = DirectDrawCreateClipper(0, &g_pDDClipper, NULL);		

	push	0
	push	OFFSET ?g_pDDClipper@@3PAUIDirectDrawClipper@@A ; g_pDDClipper
	push	0
	call	_DirectDrawCreateClipper@12

; 5721 : 		if (ddrval != DD_OK) return DDERRCHK(ddrval);

	test	eax, eax
	je	SHORT $LN3@DDCSetClip
	mov	DWORD PTR _nCount$[ebp], 5721		; 00001659H
	mov	DWORD PTR _rcClipList$[ebp], OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	mov	DWORD PTR _lpDDS$[ebp], eax

; 5743 : }

	pop	ebp

; 5721 : 		if (ddrval != DD_OK) return DDERRCHK(ddrval);

	jmp	?___DDError@@YAHJPADH@Z			; ___DDError
$LN3@DDCSetClip:
	push	esi

; 5722 : 	}
; 5723 : 
; 5724 : 	///// RGNDATAÅ©±â+ ¹öÆÛÅ©±â ¸¸Å­ ÇÒ´ç
; 5725 : 	pRd = (LPRGNDATA) malloc(sizeof(RGNDATAHEADER)+sizeof(RECT)*nCount);	

	mov	esi, DWORD PTR _nCount$[ebp]
	push	edi
	lea	eax, DWORD PTR [esi+2]
	shl	eax, 4
	push	eax
	call	_malloc
	add	esp, 4
	mov	edi, eax

; 5726 : 
; 5727 : 	/////
; 5728 : 	pRd->rdh.dwSize = sizeof(RGNDATAHEADER);	
; 5729 : 	pRd->rdh.iType = RDH_RECTANGLES;							    // »ç°¢¿µ¿ªÀÓÀ» ÀÇ¹Ì
; 5730 : 	pRd->rdh.nCount = nCount;										// 1°³ÀÇ ¿µ¿ªµ¥ÀÌÅÍ
; 5731 : 	pRd->rdh.nRgnSize = sizeof(RECT) * nCount;						// ¹öÆÛµ¥ÀÌÅÍÀÇ Å©±â	
; 5732 : 	SetRect(&(pRd->rdh.rcBound), -8000, -8000, 8000, 8000);			// ¹Ù¿î´õ¸® ¿µ¿ª		

	push	8000					; 00001f40H
	push	8000					; 00001f40H
	push	-8000					; ffffe0c0H
	mov	DWORD PTR [edi+8], esi
	lea	eax, DWORD PTR [edi+16]
	push	-8000					; ffffe0c0H
	shl	esi, 4
	push	eax
	mov	DWORD PTR [edi], 32			; 00000020H
	mov	DWORD PTR [edi+4], 1
	mov	DWORD PTR [edi+12], esi
	call	DWORD PTR __imp__SetRect@20

; 5733 : 	memcpy(pRd->Buffer, rcClipList, sizeof(RECT)*nCount);			// ¿øÇÏ´Â Å¬¸³¿µ¿ª

	push	esi
	push	DWORD PTR _rcClipList$[ebp]
	lea	eax, DWORD PTR [edi+32]
	push	eax
	call	_memcpy

; 5734 : 
; 5735 : 	///// Å¬¸³¸®½ºÆ® ¼³Á¤
; 5736 : 	ddrval = g_pDDClipper->SetClipList(pRd, 0);

	mov	eax, DWORD PTR ?g_pDDClipper@@3PAUIDirectDrawClipper@@A ; g_pDDClipper
	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR [eax]
	push	0
	push	edi
	push	eax
	call	DWORD PTR [ecx+28]

; 5737 : 	free(pRd);

	push	edi
	mov	esi, eax
	call	_free
	add	esp, 4

; 5738 :     if (ddrval != DD_OK) { return DDERRCHK(ddrval); }	

	test	esi, esi
	je	SHORT $LN4@DDCSetClip
	push	5738					; 0000166aH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	esi
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi

; 5743 : }

	pop	ebp
	ret	0
$LN4@DDCSetClip:

; 5739 : 	ddrval = lpDDS->SetClipper(g_pDDClipper);

	mov	eax, DWORD PTR _lpDDS$[ebp]
	push	DWORD PTR ?g_pDDClipper@@3PAUIDirectDrawClipper@@A ; g_pDDClipper
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+112]

; 5740 :     if (ddrval != DD_OK) { return DDERRCHK(ddrval); }

	test	eax, eax
	je	SHORT $LN5@DDCSetClip
	pop	edi
	pop	esi
	mov	DWORD PTR _nCount$[ebp], 5740		; 0000166cH
	mov	DWORD PTR _rcClipList$[ebp], OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	mov	DWORD PTR _lpDDS$[ebp], eax

; 5743 : }

	pop	ebp

; 5740 :     if (ddrval != DD_OK) { return DDERRCHK(ddrval); }

	jmp	?___DDError@@YAHJPADH@Z			; ___DDError
$LN5@DDCSetClip:
	pop	edi

; 5741 : 
; 5742 : 	return TRUE;

	mov	eax, 1
	pop	esi

; 5743 : }

	pop	ebp
	ret	0
?__DDCSetClipperList@@YAHPAUIDirectDrawSurface7@@PAUtagRECT@@H@Z ENDP ; __DDCSetClipperList
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__DDCSetClipper@@YAHPAUIDirectDrawSurface7@@HHHH@Z
_TEXT	SEGMENT
_lpDDS$ = 8						; size = 4
_x1$ = 12						; size = 4
_y1$ = 16						; size = 4
_x2$ = 20						; size = 4
_y2$ = 24						; size = 4
?__DDCSetClipper@@YAHPAUIDirectDrawSurface7@@HHHH@Z PROC ; __DDCSetClipper, COMDAT

; 5681 : {

	push	ebp
	mov	ebp, esp

; 5682 : 	LPRGNDATA pRd;
; 5683 : 	HRESULT ddrval;
; 5684 : 
; 5685 : 	if (!g_pDDClipper) 

	cmp	DWORD PTR ?g_pDDClipper@@3PAUIDirectDrawClipper@@A, 0 ; g_pDDClipper
	jne	SHORT $LN3@DDCSetClip

; 5686 : 	{
; 5687 :         ddrval = DirectDrawCreateClipper(0, &g_pDDClipper, NULL);		

	push	0
	push	OFFSET ?g_pDDClipper@@3PAUIDirectDrawClipper@@A ; g_pDDClipper
	push	0
	call	_DirectDrawCreateClipper@12

; 5688 : 		if (ddrval != DD_OK) return DDERRCHK(ddrval);

	test	eax, eax
	je	SHORT $LN3@DDCSetClip
	push	5688					; 00001638H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH

; 5711 : }

	pop	ebp
	ret	0
$LN3@DDCSetClip:
	push	esi
	push	edi

; 5689 : 	}
; 5690 : 
; 5691 : 	///// RGNDATAÅ©±â+ ¹öÆÛÅ©±â ¸¸Å­ ÇÒ´ç
; 5692 : 	pRd = (LPRGNDATA) malloc(sizeof(RGNDATAHEADER)+sizeof(RECT));		

	push	48					; 00000030H
	call	_malloc

; 5693 : 	
; 5694 : 	/////
; 5695 : 	pRd->rdh.dwSize = sizeof(pRd->rdh);	
; 5696 : 	pRd->rdh.iType = RDH_RECTANGLES;							    // »ç°¢¿µ¿ªÀÓÀ» ÀÇ¹Ì
; 5697 : 	pRd->rdh.nCount = 1;										    // 1°³ÀÇ ¿µ¿ªµ¥ÀÌÅÍ
; 5698 : 	pRd->rdh.nRgnSize = sizeof(RECT);								// ¹öÆÛµ¥ÀÌÅÍÀÇ Å©±â
; 5699 : 	SetRect(&(pRd->rdh.rcBound), -8000, -8000, 8000, 8000);		    // ¹Ù¿î´õ¸® ¿µ¿ª

	mov	esi, DWORD PTR __imp__SetRect@20
	add	esp, 4
	mov	edi, eax
	push	8000					; 00001f40H
	push	8000					; 00001f40H
	push	-8000					; ffffe0c0H
	push	-8000					; ffffe0c0H
	lea	ecx, DWORD PTR [edi+16]
	mov	DWORD PTR [edi], 32			; 00000020H
	push	ecx
	mov	DWORD PTR [edi+4], 1
	mov	DWORD PTR [edi+8], 1
	mov	DWORD PTR [edi+12], 16			; 00000010H
	call	esi

; 5700 : 	SetRect((RECT*)(pRd->Buffer), x1, y1, x2, y2);					// ¿øÇÏ´Â Å¬¸³¿µ¿ª	

	push	DWORD PTR _y2$[ebp]
	lea	eax, DWORD PTR [edi+32]
	push	DWORD PTR _x2$[ebp]
	push	DWORD PTR _y1$[ebp]
	push	DWORD PTR _x1$[ebp]
	push	eax
	call	esi

; 5701 : 
; 5702 : 	///// Å¬¸³¸®½ºÆ® ¼³Á¤
; 5703 : 	ddrval = g_pDDClipper->SetClipList(pRd, 0);

	mov	eax, DWORD PTR ?g_pDDClipper@@3PAUIDirectDrawClipper@@A ; g_pDDClipper
	push	0
	push	edi
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+28]

; 5704 : 	free(pRd);

	push	edi
	mov	esi, eax
	call	_free
	add	esp, 4

; 5705 :     if (ddrval != DD_OK) { return DDERRCHK(ddrval); }

	test	esi, esi
	je	SHORT $LN4@DDCSetClip
	push	5705					; 00001649H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	esi
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi

; 5711 : }

	pop	ebp
	ret	0
$LN4@DDCSetClip:

; 5706 : 	
; 5707 : 	ddrval = lpDDS->SetClipper(g_pDDClipper);

	mov	eax, DWORD PTR _lpDDS$[ebp]
	push	DWORD PTR ?g_pDDClipper@@3PAUIDirectDrawClipper@@A ; g_pDDClipper
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+112]

; 5708 :     if (ddrval != DD_OK) { return DDERRCHK(ddrval); }

	test	eax, eax
	je	SHORT $LN5@DDCSetClip
	push	5708					; 0000164cH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
	pop	edi
	pop	esi

; 5711 : }

	pop	ebp
	ret	0
$LN5@DDCSetClip:
	pop	edi

; 5709 : 
; 5710 : 	return TRUE;

	mov	eax, 1
	pop	esi

; 5711 : }

	pop	ebp
	ret	0
?__DDCSetClipper@@YAHPAUIDirectDrawSurface7@@HHHH@Z ENDP ; __DDCSetClipper
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__DDCSetClipperWin@@YAHXZ
_TEXT	SEGMENT
?__DDCSetClipperWin@@YAHXZ PROC				; __DDCSetClipperWin, COMDAT

; 5660 : 	HRESULT ddrval;
; 5661 : 
; 5662 : 	//// Å¬¸³ÆÛ°´Ã¼ »ý¼º
; 5663 : 	if (!g_pDDClipper) 

	mov	ecx, DWORD PTR ?g_pDDClipper@@3PAUIDirectDrawClipper@@A ; g_pDDClipper
	test	ecx, ecx
	jne	SHORT $LN3@DDCSetClip

; 5664 : 	{
; 5665 :         ddrval = DirectDrawCreateClipper(0, &g_pDDClipper, NULL);		

	push	ecx
	push	OFFSET ?g_pDDClipper@@3PAUIDirectDrawClipper@@A ; g_pDDClipper
	push	ecx
	call	_DirectDrawCreateClipper@12

; 5666 : 		if (ddrval != DD_OK) return DDERRCHK(ddrval);

	test	eax, eax
	je	SHORT $LN7@DDCSetClip
	push	5666					; 00001622H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH

; 5678 : }

	ret	0
$LN7@DDCSetClip:

; 5666 : 		if (ddrval != DD_OK) return DDERRCHK(ddrval);

	mov	ecx, DWORD PTR ?g_pDDClipper@@3PAUIDirectDrawClipper@@A ; g_pDDClipper
$LN3@DDCSetClip:

; 5667 : 	}
; 5668 : 
; 5669 : 	//// ¿øµµ¿ì ÇÚµé¿¡ Å¬¸³ÆÛ °´Ã¼¸¦ Àû¿ë, Ã¹¹øÂ°ÀÎÀÚ´Â 0
; 5670 : 	ddrval = g_pDDClipper->SetHWnd(0, hWnd);

	push	DWORD PTR ?hWnd@@3PAUHWND__@@A		; hWnd
	mov	eax, DWORD PTR [ecx]
	push	0
	push	ecx
	call	DWORD PTR [eax+32]

; 5671 : 	if (ddrval != DD_OK) { return DDERRCHK(ddrval); }

	test	eax, eax
	je	SHORT $LN4@DDCSetClip
	push	5671					; 00001627H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH

; 5678 : }

	ret	0
$LN4@DDCSetClip:

; 5672 : 
; 5673 : 	//// Å¬¸³ÆÛ°´Ã¼¸¦ 1Â÷Ç¥¸é¿¡ Àû¿ë
; 5674 : 	ddrval = g_pDDSPrimary->SetClipper(g_pDDClipper);

	mov	eax, DWORD PTR ?g_pDDSPrimary@@3PAUIDirectDrawSurface7@@A ; g_pDDSPrimary
	push	DWORD PTR ?g_pDDClipper@@3PAUIDirectDrawClipper@@A ; g_pDDClipper
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+112]

; 5675 : 	if (ddrval != DD_OK) { return DDERRCHK(ddrval); }

	test	eax, eax
	je	SHORT $LN5@DDCSetClip
	push	5675					; 0000162bH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH

; 5678 : }

	ret	0
$LN5@DDCSetClip:

; 5676 : 
; 5677 : 	return TRUE;

	mov	eax, 1

; 5678 : }

	ret	0
?__DDCSetClipperWin@@YAHXZ ENDP				; __DDCSetClipperWin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__CreateSurface@@YAPAUIDirectDrawSurface7@@KKH@Z
_TEXT	SEGMENT
_lpDDS$ = -132						; size = 4
_ddsd$ = -128						; size = 124
__$ArrayPad$ = -4					; size = 4
_dwWidth$ = 8						; size = 4
_dwHeight$ = 12						; size = 4
_bIsVram$ = 16						; size = 4
?__CreateSurface@@YAPAUIDirectDrawSurface7@@KKH@Z PROC	; __CreateSurface, COMDAT

; 5745 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 5746 : 	HRESULT ddrval;
; 5747 : 	DDSURFACEDESC2 ddsd;
; 5748 : 
; 5749 : 	///// ¿ÀÇÁ½ºÅ©¸°À» »ý¼º
; 5750 : 	memset(&ddsd, 0, sizeof(ddsd));

	push	124					; 0000007cH
	lea	eax, DWORD PTR _ddsd$[ebp]
	push	0
	push	eax
	call	_memset
	add	esp, 12					; 0000000cH

; 5751 : 	ddsd.dwSize  = sizeof(ddsd);

	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH

; 5752 : 	ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH;
; 5753 : 	if (bIsVram)

	cmp	DWORD PTR _bIsVram$[ebp], 0

; 5754 : 		ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN|DDSCAPS_VIDEOMEMORY;
; 5755 : 	else
; 5756 : 		ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN|DDSCAPS_SYSTEMMEMORY;
; 5757 : 
; 5758 : 	ddsd.dwHeight = dwHeight;
; 5759 : 	ddsd.dwWidth  = dwWidth;
; 5760 : 
; 5761 :     /////
; 5762 :     LPDIRECTDRAWSURFACE7 lpDDS = NULL;
; 5763 :     ddrval = g_pDD->CreateSurface(&ddsd, &lpDDS, NULL);

	lea	edx, DWORD PTR _lpDDS$[ebp]
	mov	ecx, 16448				; 00004040H
	mov	DWORD PTR _ddsd$[ebp+4], 7
	mov	eax, 2112				; 00000840H
	mov	DWORD PTR _lpDDS$[ebp], 0
	cmovne	eax, ecx
	mov	DWORD PTR _ddsd$[ebp+104], eax
	mov	eax, DWORD PTR _dwHeight$[ebp]
	mov	DWORD PTR _ddsd$[ebp+8], eax
	mov	eax, DWORD PTR _dwWidth$[ebp]
	mov	DWORD PTR _ddsd$[ebp+12], eax
	mov	eax, DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A ; g_pDD
	push	0
	push	edx
	lea	edx, DWORD PTR _ddsd$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	call	DWORD PTR [ecx+24]

; 5764 :     if (ddrval == DDERR_OUTOFVIDEOMEMORY)

	cmp	eax, -2005532292			; 8876017cH
	jne	SHORT $LN4@CreateSurf

; 5765 :     {
; 5766 :         ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN | DDSCAPS_SYSTEMMEMORY;
; 5767 :         ddrval = g_pDD->CreateSurface(&ddsd, &lpDDS, NULL);

	mov	eax, DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A ; g_pDD
	lea	edx, DWORD PTR _lpDDS$[ebp]
	push	0
	push	edx
	mov	DWORD PTR _ddsd$[ebp+104], 2112		; 00000840H
	lea	edx, DWORD PTR _ddsd$[ebp]
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	call	DWORD PTR [ecx+24]
$LN4@CreateSurf:

; 5768 :     }
; 5769 :     if (ddrval != DD_OK) { DDERRCHK(ddrval); return NULL; }

	test	eax, eax
	je	SHORT $LN5@CreateSurf
	push	5769					; 00001689H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH
	xor	eax, eax

; 5770 : 
; 5771 :     return lpDDS;
; 5772 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@CreateSurf:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, DWORD PTR _lpDDS$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?__CreateSurface@@YAPAUIDirectDrawSurface7@@KKH@Z ENDP	; __CreateSurface
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__ReleaseAllObjects@@YAXXZ
_TEXT	SEGMENT
?__ReleaseAllObjects@@YAXXZ PROC			; __ReleaseAllObjects, COMDAT

; 5788 :     if (g_pDD != NULL)

	cmp	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A, 0 ; g_pDD
	je	$LN2@ReleaseAll

; 5789 :     {
; 5790 : 		if (g_pDDSSBuffer2 != NULL)

	mov	ecx, DWORD PTR ?g_pDDSSBuffer2@@3PAUIDirectDrawSurface7@@A ; g_pDDSSBuffer2
	test	ecx, ecx
	je	SHORT $LN3@ReleaseAll

; 5791 : 		{
; 5792 : 			g_pDDSSBuffer2->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]

; 5793 : 			g_pDDSSBuffer2 = NULL;

	mov	DWORD PTR ?g_pDDSSBuffer2@@3PAUIDirectDrawSurface7@@A, 0 ; g_pDDSSBuffer2
$LN3@ReleaseAll:

; 5794 : 		}		
; 5795 : 		if (g_pDDSSBuffer != NULL)

	mov	ecx, DWORD PTR ?g_pDDSSBuffer@@3PAUIDirectDrawSurface7@@A ; g_pDDSSBuffer
	test	ecx, ecx
	je	SHORT $LN4@ReleaseAll

; 5796 : 		{
; 5797 : 			g_pDDSSBuffer->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]

; 5798 : 			g_pDDSSBuffer = NULL;

	mov	DWORD PTR ?g_pDDSSBuffer@@3PAUIDirectDrawSurface7@@A, 0 ; g_pDDSSBuffer
$LN4@ReleaseAll:

; 5799 : 		}		
; 5800 : 		if (g_pDDSVBuffer != NULL)

	mov	ecx, DWORD PTR ?g_pDDSVBuffer@@3PAUIDirectDrawSurface7@@A ; g_pDDSVBuffer
	test	ecx, ecx
	je	SHORT $LN5@ReleaseAll

; 5801 : 		{
; 5802 : 			g_pDDSVBuffer->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]

; 5803 : 			g_pDDSVBuffer = NULL;

	mov	DWORD PTR ?g_pDDSVBuffer@@3PAUIDirectDrawSurface7@@A, 0 ; g_pDDSVBuffer
$LN5@ReleaseAll:

; 5804 : 		}
; 5805 :         if (g_pDDPal != NULL)

	mov	ecx, DWORD PTR ?g_pDDPal@@3PAUIDirectDrawPalette@@A ; g_pDDPal
	test	ecx, ecx
	je	SHORT $LN6@ReleaseAll

; 5806 :         {
; 5807 :             g_pDDPal->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]

; 5808 :             g_pDDPal = NULL;

	mov	DWORD PTR ?g_pDDPal@@3PAUIDirectDrawPalette@@A, 0 ; g_pDDPal
$LN6@ReleaseAll:

; 5809 :         }
; 5810 : 
; 5811 :         if (g_pDDSOne != NULL)

	mov	ecx, DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A ; g_pDDSOne
	test	ecx, ecx
	je	SHORT $LN7@ReleaseAll

; 5812 :         {
; 5813 :             g_pDDSOne->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]

; 5814 :             g_pDDSOne = NULL;

	mov	DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A, 0 ; g_pDDSOne
$LN7@ReleaseAll:

; 5815 :         }
; 5816 : 
; 5817 :         if (g_pDDSPrimary != NULL)

	mov	ecx, DWORD PTR ?g_pDDSPrimary@@3PAUIDirectDrawSurface7@@A ; g_pDDSPrimary
	test	ecx, ecx
	je	SHORT $LN8@ReleaseAll

; 5818 :         {
; 5819 :             g_pDDSPrimary->Release();

	mov	eax, DWORD PTR [ecx]
	push	ecx
	call	DWORD PTR [eax+8]

; 5820 :             g_pDDSPrimary = NULL;

	mov	DWORD PTR ?g_pDDSPrimary@@3PAUIDirectDrawSurface7@@A, 0 ; g_pDDSPrimary
$LN8@ReleaseAll:

; 5821 :         }
; 5822 :         g_pDD->Release();

	mov	eax, DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A ; g_pDD
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+8]

; 5823 :         g_pDD = NULL;

	mov	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A, 0 ; g_pDD
$LN2@ReleaseAll:

; 5824 :     }
; 5825 : }

	ret	0
?__ReleaseAllObjects@@YAXXZ ENDP			; __ReleaseAllObjects
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__DDSWBlt@@YAJXZ
_TEXT	SEGMENT
_pt$ = -28						; size = 8
_rcDest$ = -20						; size = 16
__$ArrayPad$ = -4					; size = 4
?__DDSWBlt@@YAJXZ PROC					; __DDSWBlt, COMDAT

; 5775 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 5776 :     RECT  rcDest;
; 5777 : 	POINT pt = {0, 0};	
; 5778 : 
; 5779 : 	/////
; 5780 : 	::GetClientRect(hWnd, &rcDest);

	lea	eax, DWORD PTR _rcDest$[ebp]
	mov	DWORD PTR _pt$[ebp], 0
	push	eax
	push	DWORD PTR ?hWnd@@3PAUHWND__@@A		; hWnd
	mov	DWORD PTR _pt$[ebp+4], 0
	call	DWORD PTR __imp__GetClientRect@8

; 5781 : 	::ClientToScreen(hWnd, &pt);

	lea	eax, DWORD PTR _pt$[ebp]
	push	eax
	push	DWORD PTR ?hWnd@@3PAUHWND__@@A		; hWnd
	call	DWORD PTR __imp__ClientToScreen@8

; 5782 : 	::OffsetRect(&rcDest, pt.x, pt.y);

	push	DWORD PTR _pt$[ebp+4]
	lea	eax, DWORD PTR _rcDest$[ebp]
	push	DWORD PTR _pt$[ebp]
	push	eax
	call	DWORD PTR __imp__OffsetRect@12

; 5783 : 
; 5784 : 	return g_pDDSPrimary->Blt(&rcDest, g_pDDSBack, NULL, DDBLT_WAIT, NULL);

	mov	eax, DWORD PTR ?g_pDDSPrimary@@3PAUIDirectDrawSurface7@@A ; g_pDDSPrimary
	lea	edx, DWORD PTR _rcDest$[ebp]
	push	0
	push	16777216				; 01000000H
	push	0
	push	DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	call	DWORD PTR [ecx+20]

; 5785 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?__DDSWBlt@@YAJXZ ENDP					; __DDSWBlt
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__DDInitWin@@YAHH@Z
_TEXT	SEGMENT
_lpDD$ = -132						; size = 4
_ddsd$ = -128						; size = 124
__$ArrayPad$ = -4					; size = 4
_bIsVRAM$ = 8						; size = 4
?__DDInitWin@@YAHH@Z PROC				; __DDInitWin, COMDAT

; 5612 : {

	push	ebp
	mov	ebp, esp
	sub	esp, 132				; 00000084H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax
	push	esi

; 5613 : 	DDSURFACEDESC2 ddsd;
; 5614 : 	HRESULT        ddrval;
; 5615 : 
; 5616 :     /////
; 5617 :     HDC hdc = GetDC(hWnd);

	push	DWORD PTR ?hWnd@@3PAUHWND__@@A		; hWnd
	call	DWORD PTR __imp__GetDC@4
	mov	esi, eax

; 5618 :     int nBitPixel = GetDeviceCaps(hdc, BITSPIXEL);

	push	12					; 0000000cH
	push	esi
	call	DWORD PTR __imp__GetDeviceCaps@8

; 5619 :     ReleaseDC(hWnd, hdc);

	push	esi
	push	DWORD PTR ?hWnd@@3PAUHWND__@@A		; hWnd
	call	DWORD PTR __imp__ReleaseDC@8

; 5620 :     if (nBitPixel != nBitPixel)
; 5621 :     {
; 5622 :         TRACE0("À©µµ¿ì¸ðµå ¼³Á¤ ½ÇÆÐ - ÇöÀçÀÇ ÄÃ·¯¸ðµå¿Í ½ÇÇà¸ðµå°¡ ´Ù¸¨´Ï´Ù\n");
; 5623 :         return FALSE;
; 5624 :     }
; 5625 : 
; 5626 : 	///// ´ÙÀÌ·ºÆ® µå·Î¿ì °´Ã¼ »ý¼º 
; 5627 :   	LPDIRECTDRAW lpDD;
; 5628 : 	ddrval = DirectDrawCreate(NULL, &lpDD, NULL);

	push	0
	lea	eax, DWORD PTR _lpDD$[ebp]
	push	eax
	push	0
	call	_DirectDrawCreate@12
	pop	esi

; 5629 : 	if (ddrval != DD_OK) return DDERRCHK(ddrval);

	test	eax, eax
	je	SHORT $LN3@DDInitWin
	push	5629					; 000015fdH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError

; 5649 : 
; 5650 : 	/////
; 5651 : 	TRACE0("WindowMode Init.\n");
; 5652 : 
; 5653 : 	gbIsFull = FALSE;
; 5654 : 
; 5655 : 	return TRUE;
; 5656 : }

	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN3@DDInitWin:

; 5630 : 	ddrval = lpDD->QueryInterface(IID_IDirectDraw7, (LPVOID*)&g_pDD);

	mov	eax, DWORD PTR _lpDD$[ebp]
	push	OFFSET ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	push	OFFSET _IID_IDirectDraw7
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx]

; 5631 :     if (ddrval != DD_OK) return DDERRCHK(ddrval);

	test	eax, eax
	je	SHORT $LN4@DDInitWin
	push	5631					; 000015ffH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError

; 5649 : 
; 5650 : 	/////
; 5651 : 	TRACE0("WindowMode Init.\n");
; 5652 : 
; 5653 : 	gbIsFull = FALSE;
; 5654 : 
; 5655 : 	return TRUE;
; 5656 : }

	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN4@DDInitWin:

; 5632 : 	lpDD->Release();

	mov	eax, DWORD PTR _lpDD$[ebp]
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+8]

; 5633 : 	
; 5634 : 	///// À©µµ¿ì¸ðµå·Î ¼³Á¤
; 5635 : 	ddrval = g_pDD->SetCooperativeLevel(hWnd, DDSCL_NORMAL);

	mov	eax, DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A ; g_pDD
	push	8
	push	DWORD PTR ?hWnd@@3PAUHWND__@@A		; hWnd
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+80]

; 5636 : 	if (ddrval != DD_OK) return DDERRCHK(ddrval);

	test	eax, eax
	je	SHORT $LN5@DDInitWin
	push	5636					; 00001604H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError

; 5649 : 
; 5650 : 	/////
; 5651 : 	TRACE0("WindowMode Init.\n");
; 5652 : 
; 5653 : 	gbIsFull = FALSE;
; 5654 : 
; 5655 : 	return TRUE;
; 5656 : }

	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN5@DDInitWin:

; 5637 :  
; 5638 : 	///// 1Â÷Ç¥¸éÀ» »ý¼º
; 5639 : 	ZeroMemory(&ddsd, sizeof(ddsd));

	push	124					; 0000007cH
	lea	eax, DWORD PTR _ddsd$[ebp]
	push	0
	push	eax
	call	_memset

; 5640 : 	ddsd.dwSize            = sizeof(ddsd);
; 5641 : 	ddsd.dwFlags           = DDSD_CAPS;
; 5642 : 	ddsd.ddsCaps.dwCaps    = DDSCAPS_PRIMARYSURFACE;
; 5643 : 	
; 5644 :     ddrval = g_pDD->CreateSurface(&ddsd, &g_pDDSPrimary, NULL);    

	mov	eax, DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A ; g_pDD
	lea	edx, DWORD PTR _ddsd$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH
	mov	DWORD PTR _ddsd$[ebp+4], 1
	mov	DWORD PTR _ddsd$[ebp+104], 512		; 00000200H
	mov	ecx, DWORD PTR [eax]
	push	0
	push	OFFSET ?g_pDDSPrimary@@3PAUIDirectDrawSurface7@@A ; g_pDDSPrimary
	push	edx
	push	eax
	call	DWORD PTR [ecx+24]

; 5645 : 	if (ddrval != DD_OK) return DDERRCHK(ddrval);

	test	eax, eax
	je	SHORT $LN6@DDInitWin
	push	5645					; 0000160dH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError

; 5649 : 
; 5650 : 	/////
; 5651 : 	TRACE0("WindowMode Init.\n");
; 5652 : 
; 5653 : 	gbIsFull = FALSE;
; 5654 : 
; 5655 : 	return TRUE;
; 5656 : }

	add	esp, 12					; 0000000cH
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
$LN6@DDInitWin:

; 5646 : 
; 5647 : 	///// 2Â÷Ç¥¸é
; 5648 : 	g_pDDSBack = __CreateSurface(HRES, VRES, bIsVRAM);

	push	DWORD PTR _bIsVRAM$[ebp]
	push	768					; 00000300H
	push	1024					; 00000400H
	call	?__CreateSurface@@YAPAUIDirectDrawSurface7@@KKH@Z ; __CreateSurface

; 5649 : 
; 5650 : 	/////
; 5651 : 	TRACE0("WindowMode Init.\n");
; 5652 : 
; 5653 : 	gbIsFull = FALSE;
; 5654 : 
; 5655 : 	return TRUE;
; 5656 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSBack
	xor	ecx, ebp
	mov	DWORD PTR ?gbIsFull@@3HA, 0		; gbIsFull
	mov	eax, 1
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	ret	0
?__DDInitWin@@YAHH@Z ENDP				; __DDInitWin
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__DDInit@@YAHXZ
_TEXT	SEGMENT
_ddsd$ = -160						; size = 124
_ddscaps$ = -32						; size = 16
__$ArrayPad$ = -4					; size = 4
?__DDInit@@YAHXZ PROC					; __DDInit, COMDAT

; 5567 : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp
	sub	esp, 160				; 000000a0H
	mov	eax, DWORD PTR ___security_cookie
	xor	eax, ebp
	mov	DWORD PTR __$ArrayPad$[ebp], eax

; 5568 :     ///////////////////////////////////////////////////////////////////////////
; 5569 :     // Create the main DirectDraw object
; 5570 :     ///////////////////////////////////////////////////////////////////////////		
; 5571 :     DDSURFACEDESC2  ddsd;
; 5572 :     DDSCAPS2        ddscaps;
; 5573 : 	HRESULT			hRet;
; 5574 : 
; 5575 :     hRet = DirectDrawCreateEx(NULL, (VOID**)&g_pDD, IID_IDirectDraw7, NULL);

	push	0
	push	OFFSET _IID_IDirectDraw7
	push	OFFSET ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	push	0
	call	_DirectDrawCreateEx@16

; 5576 :     if (hRet != DD_OK) return DDERRCHK(hRet);

	test	eax, eax
	je	SHORT $LN2@DDInit
	push	5576					; 000015c8H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH

; 5602 : 
; 5603 : 	/////
; 5604 : 	TRACE0("FullMode Init.\n");
; 5605 : 
; 5606 : 	gbIsFull = TRUE;
; 5607 : 
; 5608 : 	return TRUE;
; 5609 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN2@DDInit:

; 5577 : 	
; 5578 :     // Get exclusive mode
; 5579 :     hRet = g_pDD->SetCooperativeLevel(hWnd, DDSCL_EXCLUSIVE | DDSCL_FULLSCREEN);

	mov	eax, DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A ; g_pDD
	push	17					; 00000011H
	push	DWORD PTR ?hWnd@@3PAUHWND__@@A		; hWnd
	mov	ecx, DWORD PTR [eax]
	push	eax
	call	DWORD PTR [ecx+80]

; 5580 :     if (hRet != DD_OK) return DDERRCHK(hRet);        

	test	eax, eax
	je	SHORT $LN3@DDInit
	push	5580					; 000015ccH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH

; 5602 : 
; 5603 : 	/////
; 5604 : 	TRACE0("FullMode Init.\n");
; 5605 : 
; 5606 : 	gbIsFull = TRUE;
; 5607 : 
; 5608 : 	return TRUE;
; 5609 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN3@DDInit:

; 5581 : 
; 5582 :     // Set the video mode 
; 5583 :     hRet = g_pDD->SetDisplayMode(HRES, VRES, BPP, REF, 0);

	mov	eax, DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A ; g_pDD
	push	0
	push	0
	push	16					; 00000010H
	mov	ecx, DWORD PTR [eax]
	push	768					; 00000300H
	push	1024					; 00000400H
	push	eax
	call	DWORD PTR [ecx+84]

; 5584 :     if (hRet != DD_OK) return DDERRCHK(hRet);        

	test	eax, eax
	je	SHORT $LN4@DDInit
	push	5584					; 000015d0H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH

; 5602 : 
; 5603 : 	/////
; 5604 : 	TRACE0("FullMode Init.\n");
; 5605 : 
; 5606 : 	gbIsFull = TRUE;
; 5607 : 
; 5608 : 	return TRUE;
; 5609 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN4@DDInit:

; 5585 : 
; 5586 :     // Create the primary surface with 1 back buffer
; 5587 :     ZeroMemory(&ddsd, sizeof(ddsd));

	push	124					; 0000007cH
	lea	eax, DWORD PTR _ddsd$[ebp]
	push	0
	push	eax
	call	_memset

; 5588 :     ddsd.dwSize = sizeof(ddsd);
; 5589 :     ddsd.dwFlags = DDSD_CAPS | DDSD_BACKBUFFERCOUNT;
; 5590 :     ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE |
; 5591 :                           DDSCAPS_FLIP |
; 5592 :                           DDSCAPS_COMPLEX;
; 5593 :     ddsd.dwBackBufferCount = BBC;
; 5594 :     hRet = g_pDD->CreateSurface(&ddsd, &g_pDDSPrimary, NULL);

	mov	eax, DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A ; g_pDD
	lea	edx, DWORD PTR _ddsd$[ebp]
	add	esp, 12					; 0000000cH
	mov	DWORD PTR _ddsd$[ebp], 124		; 0000007cH
	mov	DWORD PTR _ddsd$[ebp+4], 33		; 00000021H
	mov	DWORD PTR _ddsd$[ebp+104], 536		; 00000218H
	mov	DWORD PTR _ddsd$[ebp+20], 1
	mov	ecx, DWORD PTR [eax]
	push	0
	push	OFFSET ?g_pDDSPrimary@@3PAUIDirectDrawSurface7@@A ; g_pDDSPrimary
	push	edx
	push	eax
	call	DWORD PTR [ecx+24]

; 5595 :     if (hRet != DD_OK) return DDERRCHK(hRet);        

	test	eax, eax
	je	SHORT $LN5@DDInit
	push	5595					; 000015dbH
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH

; 5602 : 
; 5603 : 	/////
; 5604 : 	TRACE0("FullMode Init.\n");
; 5605 : 
; 5606 : 	gbIsFull = TRUE;
; 5607 : 
; 5608 : 	return TRUE;
; 5609 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN5@DDInit:

; 5596 : 
; 5597 :     // Get a pointer to the back buffer
; 5598 :     ZeroMemory(&ddscaps, sizeof(ddscaps));
; 5599 :     ddscaps.dwCaps = DDSCAPS_BACKBUFFER;
; 5600 :     hRet = g_pDDSPrimary->GetAttachedSurface(&ddscaps, &g_pDDSBack);

	mov	eax, DWORD PTR ?g_pDDSPrimary@@3PAUIDirectDrawSurface7@@A ; g_pDDSPrimary
	lea	edx, DWORD PTR _ddscaps$[ebp]
	xorps	xmm0, xmm0
	movaps	XMMWORD PTR _ddscaps$[ebp], xmm0
	push	OFFSET ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	mov	DWORD PTR _ddscaps$[ebp], 4
	mov	ecx, DWORD PTR [eax]
	push	edx
	push	eax
	call	DWORD PTR [ecx+48]

; 5601 :     if (hRet != DD_OK) return DDERRCHK(hRet);

	test	eax, eax
	je	SHORT $LN6@DDInit
	push	5601					; 000015e1H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	eax
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH

; 5602 : 
; 5603 : 	/////
; 5604 : 	TRACE0("FullMode Init.\n");
; 5605 : 
; 5606 : 	gbIsFull = TRUE;
; 5607 : 
; 5608 : 	return TRUE;
; 5609 : }

	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	xor	ecx, ebp
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN6@DDInit:
	mov	ecx, DWORD PTR __$ArrayPad$[ebp]
	mov	eax, 1
	xor	ecx, ebp
	mov	DWORD PTR ?gbIsFull@@3HA, 1		; gbIsFull
	call	@__security_check_cookie@4
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
?__DDInit@@YAHXZ ENDP					; __DDInit
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__WinDestroy@@YAXXZ
_TEXT	SEGMENT
?__WinDestroy@@YAXXZ PROC				; __WinDestroy, COMDAT

; 463  : 	//// µð¹ö±× ¸ðµå¸¦ À§ÇÑ ºñÆ®ÇÈ¼¿ º¹±¸
; 464  : 
; 465  : 	////
; 466  : 	DXW_ReleaseWinMode();
; 467  : 	
; 468  : 	////
; 469  : 	__DestroyFont();

	call	?__DestroyFont@@YAXXZ			; __DestroyFont

; 470  : 
; 471  : 	//// DX ¿ÀºêÁ§Æ® ÇØÁ¦
; 472  : 	__ReleaseAllObjects();

	jmp	?__ReleaseAllObjects@@YAXXZ		; __ReleaseAllObjects
?__WinDestroy@@YAXXZ ENDP				; __WinDestroy
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__WinKeyDown@@YAXPAUHWND__@@I@Z
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_wParam$ = 12						; size = 4
?__WinKeyDown@@YAXPAUHWND__@@I@Z PROC			; __WinKeyDown, COMDAT

; 398  : {

	push	ebp
	mov	ebp, esp

; 399  :     static BOOL bIsFpsMax = FALSE;
; 400  : 
; 401  : 	switch( wParam )

	mov	eax, DWORD PTR _wParam$[ebp]
	add	eax, -27				; ffffffe5H
	cmp	eax, 94					; 0000005eH
	ja	$LN23@WinKeyDown
	movzx	eax, BYTE PTR $LN25@WinKeyDown[eax]
	jmp	DWORD PTR $LN33@WinKeyDown[eax*4]
$LN4@WinKeyDown:

; 402  : 	{
; 403  : 	case VK_ESCAPE:
; 404  : 		PostMessage(hwnd, WM_CLOSE, 0, 0);

	push	0
	push	0
	push	16					; 00000010H
	push	DWORD PTR _hwnd$[ebp]
	call	DWORD PTR __imp__PostMessageA@16

; 437  : 
; 438  :     case VK_TAB :
; 439  :         break;
; 440  : 
; 441  :     case VK_BACK :
; 442  :         break;
; 443  : 
; 444  :     case VK_END : 
; 445  :         break;
; 446  : 
; 447  :     case VK_HOME :
; 448  :         break;
; 449  : 
; 450  :     case VK_DELETE :
; 451  :         break;
; 452  : 
; 453  : 	case VK_SPACE :
; 454  : 		break;
; 455  : 
; 456  :     case VK_RETURN:
; 457  : 		break;
; 458  : 	}
; 459  : }

	pop	ebp
	ret	0
$LN5@WinKeyDown:

; 405  : 		break;
; 406  : 
; 407  : 	case VK_F1:
; 408  : 		Skillcheat += 100;

	add	DWORD PTR ?Skillcheat@@3HA, 100		; Skillcheat, 00000064H

; 437  : 
; 438  :     case VK_TAB :
; 439  :         break;
; 440  : 
; 441  :     case VK_BACK :
; 442  :         break;
; 443  : 
; 444  :     case VK_END : 
; 445  :         break;
; 446  : 
; 447  :     case VK_HOME :
; 448  :         break;
; 449  : 
; 450  :     case VK_DELETE :
; 451  :         break;
; 452  : 
; 453  : 	case VK_SPACE :
; 454  : 		break;
; 455  : 
; 456  :     case VK_RETURN:
; 457  : 		break;
; 458  : 	}
; 459  : }

	pop	ebp
	ret	0
$LN6@WinKeyDown:

; 409  : 		break;
; 410  : 	case VK_F2:
; 411  : 		Skillcheat -= 100;

	sub	DWORD PTR ?Skillcheat@@3HA, 100		; Skillcheat, 00000064H

; 437  : 
; 438  :     case VK_TAB :
; 439  :         break;
; 440  : 
; 441  :     case VK_BACK :
; 442  :         break;
; 443  : 
; 444  :     case VK_END : 
; 445  :         break;
; 446  : 
; 447  :     case VK_HOME :
; 448  :         break;
; 449  : 
; 450  :     case VK_DELETE :
; 451  :         break;
; 452  : 
; 453  : 	case VK_SPACE :
; 454  : 		break;
; 455  : 
; 456  :     case VK_RETURN:
; 457  : 		break;
; 458  : 	}
; 459  : }

	pop	ebp
	ret	0
$LN8@WinKeyDown:

; 412  : 		break;
; 413  : 	case VK_F3:
; 414  : 		
; 415  : 		break;
; 416  : 
; 417  :     case VK_F4:	
; 418  : 		g_nPhaze = 4;

	mov	DWORD PTR ?g_nPhaze@@3HA, 4		; g_nPhaze

; 437  : 
; 438  :     case VK_TAB :
; 439  :         break;
; 440  : 
; 441  :     case VK_BACK :
; 442  :         break;
; 443  : 
; 444  :     case VK_END : 
; 445  :         break;
; 446  : 
; 447  :     case VK_HOME :
; 448  :         break;
; 449  : 
; 450  :     case VK_DELETE :
; 451  :         break;
; 452  : 
; 453  : 	case VK_SPACE :
; 454  : 		break;
; 455  : 
; 456  :     case VK_RETURN:
; 457  : 		break;
; 458  : 	}
; 459  : }

	pop	ebp
	ret	0
$LN9@WinKeyDown:

; 419  :         break;
; 420  : 
; 421  :     case VK_F5: __FxFadeTo(g_pDDSPrimary, g_pDDSBack, rand() % 32, rand() % 64, rand() % 32); break;

	call	_rand
	call	_rand

; 437  : 
; 438  :     case VK_TAB :
; 439  :         break;
; 440  : 
; 441  :     case VK_BACK :
; 442  :         break;
; 443  : 
; 444  :     case VK_END : 
; 445  :         break;
; 446  : 
; 447  :     case VK_HOME :
; 448  :         break;
; 449  : 
; 450  :     case VK_DELETE :
; 451  :         break;
; 452  : 
; 453  : 	case VK_SPACE :
; 454  : 		break;
; 455  : 
; 456  :     case VK_RETURN:
; 457  : 		break;
; 458  : 	}
; 459  : }

	pop	ebp

; 419  :         break;
; 420  : 
; 421  :     case VK_F5: __FxFadeTo(g_pDDSPrimary, g_pDDSBack, rand() % 32, rand() % 64, rand() % 32); break;

	jmp	_rand
$LN10@WinKeyDown:

; 422  : 	case VK_F6: g_bGrayScale = !g_bGrayScale; break;		

	xor	eax, eax
	cmp	DWORD PTR ?g_bGrayScale@@3HA, eax	; g_bGrayScale
	sete	al
	mov	DWORD PTR ?g_bGrayScale@@3HA, eax	; g_bGrayScale

; 437  : 
; 438  :     case VK_TAB :
; 439  :         break;
; 440  : 
; 441  :     case VK_BACK :
; 442  :         break;
; 443  : 
; 444  :     case VK_END : 
; 445  :         break;
; 446  : 
; 447  :     case VK_HOME :
; 448  :         break;
; 449  : 
; 450  :     case VK_DELETE :
; 451  :         break;
; 452  : 
; 453  : 	case VK_SPACE :
; 454  : 		break;
; 455  : 
; 456  :     case VK_RETURN:
; 457  : 		break;
; 458  : 	}
; 459  : }

	pop	ebp
	ret	0
$LN11@WinKeyDown:

; 423  : 	case VK_F7: g_bColorize = !g_bColorize;

	xor	eax, eax
	cmp	DWORD PTR ?g_bColorize@@3HA, eax	; g_bColorize
	sete	al
	mov	DWORD PTR ?g_bColorize@@3HA, eax	; g_bColorize

; 424  : 				g_dwR = rand() % 32;

	call	_rand
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $LN27@WinKeyDown
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$LN27@WinKeyDown:
	mov	DWORD PTR ?g_dwR@@3KA, eax		; g_dwR

; 425  : 				g_dwG = rand() % 64;

	call	_rand
	and	eax, -2147483585			; 8000003fH
	jns	SHORT $LN28@WinKeyDown
	dec	eax
	or	eax, -64				; ffffffc0H
	inc	eax
$LN28@WinKeyDown:
	mov	DWORD PTR ?g_dwG@@3KA, eax		; g_dwG

; 426  : 				g_dwB = rand() % 32;

	call	_rand
	and	eax, -2147483617			; 8000001fH
	jns	SHORT $LN29@WinKeyDown
	dec	eax
	or	eax, -32				; ffffffe0H
	inc	eax
$LN29@WinKeyDown:
	mov	DWORD PTR ?g_dwB@@3KA, eax		; g_dwB

; 437  : 
; 438  :     case VK_TAB :
; 439  :         break;
; 440  : 
; 441  :     case VK_BACK :
; 442  :         break;
; 443  : 
; 444  :     case VK_END : 
; 445  :         break;
; 446  : 
; 447  :     case VK_HOME :
; 448  :         break;
; 449  : 
; 450  :     case VK_DELETE :
; 451  :         break;
; 452  : 
; 453  : 	case VK_SPACE :
; 454  : 		break;
; 455  : 
; 456  :     case VK_RETURN:
; 457  : 		break;
; 458  : 	}
; 459  : }

	pop	ebp
	ret	0
$LN12@WinKeyDown:

; 427  : 				break;		
; 428  : 	case VK_F8: gbIsGod = !gbIsGod; break;		

	xor	eax, eax
	cmp	DWORD PTR ?gbIsGod@@3HA, eax		; gbIsGod
	sete	al
	mov	DWORD PTR ?gbIsGod@@3HA, eax		; gbIsGod

; 437  : 
; 438  :     case VK_TAB :
; 439  :         break;
; 440  : 
; 441  :     case VK_BACK :
; 442  :         break;
; 443  : 
; 444  :     case VK_END : 
; 445  :         break;
; 446  : 
; 447  :     case VK_HOME :
; 448  :         break;
; 449  : 
; 450  :     case VK_DELETE :
; 451  :         break;
; 452  : 
; 453  : 	case VK_SPACE :
; 454  : 		break;
; 455  : 
; 456  :     case VK_RETURN:
; 457  : 		break;
; 458  : 	}
; 459  : }

	pop	ebp
	ret	0
$LN13@WinKeyDown:

; 429  :     case VK_F9: 
; 430  : 		bIsFpsMax = !bIsFpsMax;

	xor	ecx, ecx

; 431  : 		if (bIsFpsMax) 
; 432  : 			gFpsMng.SetFPS(0);
; 433  : 		else 
; 434  : 			gFpsMng.SetFPS(_FPS);
; 435  :         break;

	mov	edx, 60					; 0000003cH
	cmp	DWORD PTR ?bIsFpsMax@?1??__WinKeyDown@@YAXPAUHWND__@@I@Z@4HA, ecx
	sete	cl
	xor	eax, eax
	test	ecx, ecx
	mov	DWORD PTR ?bIsFpsMax@?1??__WinKeyDown@@YAXPAUHWND__@@I@Z@4HA, ecx

; 437  : 
; 438  :     case VK_TAB :
; 439  :         break;
; 440  : 
; 441  :     case VK_BACK :
; 442  :         break;
; 443  : 
; 444  :     case VK_END : 
; 445  :         break;
; 446  : 
; 447  :     case VK_HOME :
; 448  :         break;
; 449  : 
; 450  :     case VK_DELETE :
; 451  :         break;
; 452  : 
; 453  : 	case VK_SPACE :
; 454  : 		break;
; 455  : 
; 456  :     case VK_RETURN:
; 457  : 		break;
; 458  : 	}
; 459  : }

	mov	ecx, OFFSET ?gFpsMng@@3VCFpsMng@@A	; gFpsMng
	cmove	eax, edx
	push	eax
	call	?SetFPS@CFpsMng@@QAEXK@Z		; CFpsMng::SetFPS
	pop	ebp
	ret	0
$LN16@WinKeyDown:

; 436  : 	case VK_F10: gFpsMng.SetFPS(30); break;

	push	30					; 0000001eH

; 437  : 
; 438  :     case VK_TAB :
; 439  :         break;
; 440  : 
; 441  :     case VK_BACK :
; 442  :         break;
; 443  : 
; 444  :     case VK_END : 
; 445  :         break;
; 446  : 
; 447  :     case VK_HOME :
; 448  :         break;
; 449  : 
; 450  :     case VK_DELETE :
; 451  :         break;
; 452  : 
; 453  : 	case VK_SPACE :
; 454  : 		break;
; 455  : 
; 456  :     case VK_RETURN:
; 457  : 		break;
; 458  : 	}
; 459  : }

	mov	ecx, OFFSET ?gFpsMng@@3VCFpsMng@@A	; gFpsMng
	call	?SetFPS@CFpsMng@@QAEXK@Z		; CFpsMng::SetFPS
$LN23@WinKeyDown:
	pop	ebp
	ret	0
	npad	1
$LN33@WinKeyDown:
	DD	$LN4@WinKeyDown
	DD	$LN5@WinKeyDown
	DD	$LN6@WinKeyDown
	DD	$LN8@WinKeyDown
	DD	$LN9@WinKeyDown
	DD	$LN10@WinKeyDown
	DD	$LN11@WinKeyDown
	DD	$LN12@WinKeyDown
	DD	$LN13@WinKeyDown
	DD	$LN16@WinKeyDown
	DD	$LN23@WinKeyDown
$LN25@WinKeyDown:
	DB	0
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	10					; 0000000aH
	DB	1
	DB	2
	DB	10					; 0000000aH
	DB	3
	DB	4
	DB	5
	DB	6
	DB	7
	DB	8
	DB	9
?__WinKeyDown@@YAXPAUHWND__@@I@Z ENDP			; __WinKeyDown
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?__WndProc@@YGJPAUHWND__@@IIJ@Z
_TEXT	SEGMENT
_hwnd$ = 8						; size = 4
_message$ = 12						; size = 4
_wParam$ = 16						; size = 4
_lParam$ = 20						; size = 4
?__WndProc@@YGJPAUHWND__@@IIJ@Z PROC			; __WndProc, COMDAT

; 364  : {

	push	ebp
	mov	ebp, esp
	push	esi

; 365  :     switch( message )

	mov	esi, DWORD PTR _wParam$[ebp]
	push	edi
	mov	edi, DWORD PTR _message$[ebp]
	cmp	edi, 32					; 00000020H
	ja	SHORT $LN17@WndProc
	je	SHORT $LN14@WndProc
	mov	eax, edi
	sub	eax, 2
	je	SHORT $LN13@WndProc
	sub	eax, 26					; 0000001aH
	jne	$LN15@WndProc

; 390  : 		}		
; 391  : 		break;
; 392  : 	}
; 393  : 
; 394  :     return DefWindowProc(hwnd, message, wParam, lParam);

	push	DWORD PTR _lParam$[ebp]
	mov	DWORD PTR ?gAppSet@@3UtagAPP_SET@@A+4, esi
	push	esi
	push	edi
	push	DWORD PTR _hwnd$[ebp]
	call	DWORD PTR __imp__DefWindowProcA@16
	pop	edi

; 395  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN13@WndProc:

; 371  : 		{
; 372  : 			gAppSet.bIsPause = !gAppSet.bIsPause;			
; 373  : 			break;
; 374  : 		}
; 375  : 		break;
; 376  :     case WM_ACTIVATEAPP : gAppSet.bIsActive = wParam;         break;
; 377  : 	case WM_MOUSEMOVE :
; 378  : 		//g_MousePos = MAKEPOINTS(lParam);
; 379  : 		break;
; 380  : 	case WM_QUERYNEWPALETTE: break;	
; 381  :     case WM_DESTROY:
; 382  :         __WinDestroy();

	call	?__WinDestroy@@YAXXZ			; __WinDestroy

; 383  : 		PostQuitMessage(0);						

	push	0
	call	DWORD PTR __imp__PostQuitMessage@4

; 390  : 		}		
; 391  : 		break;
; 392  : 	}
; 393  : 
; 394  :     return DefWindowProc(hwnd, message, wParam, lParam);

	push	DWORD PTR _lParam$[ebp]
	push	esi
	push	edi
	push	DWORD PTR _hwnd$[ebp]
	call	DWORD PTR __imp__DefWindowProcA@16
	pop	edi

; 395  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN14@WndProc:

; 384  : 		break;	
; 385  :     case WM_SETCURSOR:
; 386  : 		if (gbIsFull)

	cmp	DWORD PTR ?gbIsFull@@3HA, 0		; gbIsFull
	je	$LN15@WndProc

; 387  : 		{
; 388  : 			SetCursor(NULL);	

	push	0
	call	DWORD PTR __imp__SetCursor@4
	pop	edi

; 389  : 			return TRUE;

	mov	eax, 1

; 395  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN17@WndProc:

; 365  :     switch( message )

	mov	eax, edi
	sub	eax, 256				; 00000100H
	je	SHORT $LN4@WndProc
	sub	eax, 2
	jne	SHORT $LN15@WndProc

; 368  :     case WM_CHAR        :
; 369  :         if (wParam == 'i' || wParam == 'I') { gAppSet.bIsDisplayInfo = !gAppSet.bIsDisplayInfo; break; }

	cmp	esi, 105				; 00000069H
	je	SHORT $LN7@WndProc
	cmp	esi, 73					; 00000049H
	je	SHORT $LN7@WndProc

; 370  : 		if (wParam == 'p' || wParam == 'P')

	cmp	esi, 112				; 00000070H
	je	SHORT $LN9@WndProc
	cmp	esi, 80					; 00000050H
	jne	SHORT $LN15@WndProc
$LN9@WndProc:

; 390  : 		}		
; 391  : 		break;
; 392  : 	}
; 393  : 
; 394  :     return DefWindowProc(hwnd, message, wParam, lParam);

	push	DWORD PTR _lParam$[ebp]
	xor	eax, eax
	cmp	DWORD PTR ?gAppSet@@3UtagAPP_SET@@A, eax
	push	esi
	push	edi
	push	DWORD PTR _hwnd$[ebp]
	sete	al
	mov	DWORD PTR ?gAppSet@@3UtagAPP_SET@@A, eax
	call	DWORD PTR __imp__DefWindowProcA@16
	pop	edi

; 395  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN7@WndProc:

; 390  : 		}		
; 391  : 		break;
; 392  : 	}
; 393  : 
; 394  :     return DefWindowProc(hwnd, message, wParam, lParam);

	push	DWORD PTR _lParam$[ebp]
	xor	eax, eax
	cmp	DWORD PTR ?gAppSet@@3UtagAPP_SET@@A+8, eax
	push	esi
	push	edi
	push	DWORD PTR _hwnd$[ebp]
	sete	al
	mov	DWORD PTR ?gAppSet@@3UtagAPP_SET@@A+8, eax
	call	DWORD PTR __imp__DefWindowProcA@16
	pop	edi

; 395  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
$LN4@WndProc:

; 366  :     {
; 367  :     case WM_KEYDOWN     : __WinKeyDown(hwnd, wParam); break;

	push	esi
	push	DWORD PTR _hwnd$[ebp]
	call	?__WinKeyDown@@YAXPAUHWND__@@I@Z	; __WinKeyDown
	add	esp, 8
$LN15@WndProc:

; 390  : 		}		
; 391  : 		break;
; 392  : 	}
; 393  : 
; 394  :     return DefWindowProc(hwnd, message, wParam, lParam);

	push	DWORD PTR _lParam$[ebp]
	push	esi
	push	edi
	push	DWORD PTR _hwnd$[ebp]
	call	DWORD PTR __imp__DefWindowProcA@16
	pop	edi

; 395  : }

	pop	esi
	pop	ebp
	ret	16					; 00000010H
?__WndProc@@YGJPAUHWND__@@IIJ@Z ENDP			; __WndProc
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?DXW_ReleaseWinMode@@YAXXZ
_TEXT	SEGMENT
?DXW_ReleaseWinMode@@YAXXZ PROC				; DXW_ReleaseWinMode, COMDAT

; 482  :     TRACE0("DXW_ReleaseWinMode\n");
; 483  : }

	ret	0
?DXW_ReleaseWinMode@@YAXXZ ENDP				; DXW_ReleaseWinMode
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?DXW_DisplayInfo@@YAXXZ
_TEXT	SEGMENT
?DXW_DisplayInfo@@YAXXZ PROC				; DXW_DisplayInfo, COMDAT

; 4428 : 	///// ÇÁ·¹ÀÓ¼ö ÃøÁ¤ ¹× ±âÅ¸ Á¤º¸
; 4429 :     if (gAppSet.bIsDisplayInfo)

	cmp	DWORD PTR ?gAppSet@@3UtagAPP_SET@@A+8, 0
	je	$LN2@DXW_Displa

; 4430 :     {
; 4431 : 		DWORD dwFps = gFpsMng.GetFPS();

	push	esi
	mov	ecx, OFFSET ?gFpsMng@@3VCFpsMng@@A	; gFpsMng
	call	?GetFPS@CFpsMng@@QAEKXZ			; CFpsMng::GetFPS

; 4432 : 
; 4433 : 		/////
; 4434 : 		__GetDC(g_pDDSBack);

	push	DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	mov	esi, eax
	call	?__GetDC@@YAXPAUIDirectDrawSurface7@@@Z	; __GetDC

; 4435 : 		{
; 4436 : 			__PutTextf(10, 30, PEN, "P3PAT %d/%d", P3randpat,P3randpat2);

	push	DWORD PTR ?P3randpat2@@3HA		; P3randpat2
	push	DWORD PTR ?P3randpat@@3HA		; P3randpat
	push	OFFSET ??_C@_0M@JLGAMLOF@P3PAT?5?$CFd?1?$CFd@
	push	16777215				; 00ffffffH
	push	30					; 0000001eH
	push	10					; 0000000aH
	call	?__PutTextf@@YAXHHKPADZZ		; __PutTextf

; 4437 : 			__PutTextf(10, 10, PEN, "FPS %d", dwFps);

	push	esi
	push	OFFSET ??_C@_06KJFAFILI@FPS?5?$CFd@
	push	16777215				; 00ffffffH
	push	10					; 0000000aH
	push	10					; 0000000aH
	call	?__PutTextf@@YAXHHKPADZZ		; __PutTextf

; 4438 : 			__PutTextf(465, 741, PEN, "%d/%d", PlayerHP, PlayerMHP);

	push	DWORD PTR ?PlayerMHP@@3HA		; PlayerMHP
	push	DWORD PTR ?PlayerHP@@3HA		; PlayerHP
	push	OFFSET ??_C@_05LCKIIOJE@?$CFd?1?$CFd@
	push	16777215				; 00ffffffH
	push	741					; 000002e5H
	push	465					; 000001d1H
	call	?__PutTextf@@YAXHHKPADZZ		; __PutTextf
	add	esp, 72					; 00000048H

; 4439 : 		}
; 4440 : 		__ReleaseDC(g_pDDSBack);

	push	DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	call	?__ReleaseDC@@YAXPAUIDirectDrawSurface7@@@Z ; __ReleaseDC
	add	esp, 4
	pop	esi
$LN2@DXW_Displa:

; 4441 : 	}
; 4442 : }

	ret	0
?DXW_DisplayInfo@@YAXXZ ENDP				; DXW_DisplayInfo
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?DXW_MainLoop@@YAXXZ
_TEXT	SEGMENT
$T1 = -48						; size = 16
$T2 = -48						; size = 16
$T3 = -48						; size = 16
$T4 = -48						; size = 16
$T5 = -48						; size = 16
$T6 = -48						; size = 16
$T7 = -48						; size = 16
$T8 = -48						; size = 16
$T9 = -48						; size = 16
$T10 = -48						; size = 16
$T11 = -48						; size = 16
$T12 = -48						; size = 16
$T13 = -48						; size = 16
$T14 = -48						; size = 16
$T15 = -48						; size = 16
$T16 = -48						; size = 16
$T17 = -48						; size = 16
$T18 = -48						; size = 16
$T19 = -48						; size = 16
$T20 = -48						; size = 16
$T21 = -48						; size = 16
$T22 = -48						; size = 16
$T23 = -48						; size = 16
$T24 = -48						; size = 16
$T25 = -28						; size = 4
$T26 = -28						; size = 4
$T27 = -28						; size = 4
$T28 = -28						; size = 4
tv11812 = -28						; size = 4
tv12032 = -24						; size = 4
tv11905 = -24						; size = 4
tv11446 = -24						; size = 4
?SpikeX@@3PAHA$1 = -20					; size = 4
$T29 = -20						; size = 4
_nX$3$ = -20						; size = 4
tv11976 = -20						; size = 4
_bnY$3$ = -16						; size = 4
_bnY$2$ = -16						; size = 4
_nY$2$ = -16						; size = 4
?SpikeX@@3PAHA$2 = -12					; size = 4
?BARR@@3HA$1 = -12					; size = 4
$T30 = -12						; size = 4
?BAR@@3HA$3 = -12					; size = 4
?BAR@@3HA$2 = -12					; size = 4
?BAR@@3HA$1 = -12					; size = 4
tv12039 = -12						; size = 4
tv12037 = -12						; size = 4
_bnY$1$ = -8						; size = 4
_bnX$3$ = -8						; size = 4
_bnX$2$ = -8						; size = 4
_nY$3$ = -4						; size = 4
_bnX$1$ = -4						; size = 4
_nY$1$ = -4						; size = 4
?DXW_MainLoop@@YAXXZ PROC				; DXW_MainLoop, COMDAT

; 636  : {

	push	ebx
	mov	ebx, esp
	sub	esp, 8
	and	esp, -16				; fffffff0H
	add	esp, 4
	push	ebp
	mov	ebp, DWORD PTR [ebx+4]
	mov	DWORD PTR [esp+4], ebp
	mov	ebp, esp

; 637  : 	HRESULT hRet;
; 638  : 
; 639  : 	//////////////////////////////////////////////////////////		
; 640  : 	RECT rcBox = { 100, 100, 300, 300 };
; 641  : 
; 642  : 	//// ¿¬»êÃ³¸®
; 643  : 	WORD wPixel = __GetPixelRGB16(0, 0, 0);
; 644  : 	int nX, bnX; //ÇÃ·¹ÀÌ¾î¿Í º¸½ºÀÇ XÁÂÇ¥
; 645  : 	int nY, bnY; //ÇÃ·¹ÀÌ¾î¿Í º¸½ºÀÇ YÁÂÇ¥
; 646  : 	int SnX, SnY; //½ºÅ³À» Ç¥½ÃÇÒ X,YÁÂÇ¥.
; 647  : 	int i = 0;
; 648  : 	if (g_nPhaze >= 1 && Knockback == FALSE && PlayerHP > 1 && g_nPhaze < 4)

	mov	ecx, DWORD PTR ?g_nPhaze@@3HA		; g_nPhaze
	sub	esp, 56					; 00000038H
	push	esi
	mov	esi, DWORD PTR __imp__GetKeyState@4
	push	edi
	mov	edi, DWORD PTR ?Knockback@@3HA		; Knockback
	cmp	ecx, 1
	jl	$LN1311@DXW_MainLo
	test	edi, edi
	jne	$LN1311@DXW_MainLo
	cmp	DWORD PTR ?PlayerHP@@3HA, 1		; PlayerHP
	jle	$LN1311@DXW_MainLo
	cmp	ecx, 4
	jge	$LN1311@DXW_MainLo

; 649  : 	{
; 650  : 		if (::GetKeyState(VK_LEFT) & 0x80 && g_bJump == 0 && g_bAtt == FALSE && g_bRush == FALSE) //¿ÞÂÊ ÀÌµ¿ ·ÎÁ÷

	push	37					; 00000025H
	call	esi
	test	al, al
	mov	eax, DWORD PTR ?g_bJump@@3HA		; g_bJump
	jns	SHORT $LN47@DXW_MainLo
	test	eax, eax
	jne	SHORT $LN47@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, eax		; g_bAtt
	jne	SHORT $LN47@DXW_MainLo
	cmp	DWORD PTR ?g_bRush@@3HA, eax		; g_bRush
	jne	SHORT $LN47@DXW_MainLo

; 651  : 		{
; 652  : 			Hspeed -= 2;

	sub	DWORD PTR ?Hspeed@@3HA, 2		; Hspeed

; 653  : 			g_bAccel = TRUE;

	mov	DWORD PTR ?g_bAccel@@3HA, 1		; g_bAccel

; 654  : 			g_bLeft = TRUE;

	mov	DWORD PTR ?g_bLeft@@3HA, 1		; g_bLeft

; 655  : 			g_bRight = FALSE;

	mov	DWORD PTR ?g_bRight@@3HA, eax		; g_bRight

; 656  : 			g_bLookL = TRUE;

	mov	DWORD PTR ?g_bLookL@@3HA, 1		; g_bLookL

; 657  : 			g_bLookR = FALSE;

	mov	DWORD PTR ?g_bLookR@@3HA, eax		; g_bLookR
	jmp	SHORT $LN1297@DXW_MainLo
$LN47@DXW_MainLo:

; 658  : 		}
; 659  : 		else if (g_Pos.x > 0 && g_bJump == 1) //Á¡ÇÁ Áß °¡¼Ó

	cmp	DWORD PTR ?g_Pos@@3UtagPOINT@@A, 0
	jle	SHORT $LN1297@DXW_MainLo
	cmp	eax, 1
	jne	SHORT $LN1297@DXW_MainLo

; 660  : 		{
; 661  : 			if (g_bJLeft == 1)

	cmp	DWORD PTR ?g_bJLeft@@3HA, eax		; g_bJLeft
	jne	SHORT $LN50@DXW_MainLo

; 662  : 			{
; 663  : 				if (g_bSetSpeed == 0)

	cmp	DWORD PTR ?g_bSetSpeed@@3HA, 0		; g_bSetSpeed
	jne	SHORT $LN1074@DXW_MainLo

; 664  : 				{
; 665  : 					Hspeed -= 1;

	dec	DWORD PTR ?Hspeed@@3HA			; Hspeed

; 666  : 				}
; 667  : 				/*if (g_bJaccel == 1)
; 668  : 				{
; 669  : 				Hspeed -= 1;
; 670  : 				}*/
; 671  : 			}

	jmp	SHORT $LN1074@DXW_MainLo
$LN50@DXW_MainLo:

; 672  : 			else if (g_bJRight == 0 && ::GetKeyState(VK_LEFT) & 0x80) //Á¡ÇÁ Áß °¡¼Ó

	cmp	DWORD PTR ?g_bJRight@@3HA, 0		; g_bJRight
	jne	SHORT $LN1297@DXW_MainLo
	push	37					; 00000025H
	call	esi
	test	al, al
	jns	SHORT $LN1297@DXW_MainLo

; 673  : 			{
; 674  : 				if (Hspeed > -2)

	mov	eax, DWORD PTR ?Hspeed@@3HA		; Hspeed
	cmp	eax, -2					; fffffffeH
	jle	SHORT $LN1297@DXW_MainLo

; 675  : 				{
; 676  : 					Hspeed -= 1;

	dec	eax
	mov	DWORD PTR ?Hspeed@@3HA, eax		; Hspeed
$LN1297@DXW_MainLo:

; 677  : 				}
; 678  : 			}
; 679  : 		}
; 680  : 		if (g_bJLeft == 1 && ::GetKeyState(VK_RIGHT) & 0x80) //Á¡ÇÁ Áß ¹Ý´ë Å°¸¦ ´­·¶À»¶§ °¨¼Ó.

	cmp	DWORD PTR ?g_bJLeft@@3HA, 1		; g_bJLeft
	jne	SHORT $LN57@DXW_MainLo
$LN1074@DXW_MainLo:
	push	39					; 00000027H
	call	esi
	test	al, al
	jns	SHORT $LN57@DXW_MainLo

; 681  : 		{
; 682  : 			if (Hspeed > -3)

	mov	eax, DWORD PTR ?Hspeed@@3HA		; Hspeed
	cmp	eax, -3					; fffffffdH
	jle	SHORT $LN56@DXW_MainLo

; 683  : 			{
; 684  : 				Hspeed += 1;

	inc	eax

; 685  : 				g_bSetSpeed = TRUE; //°¨¼Ó ÇÑ°èÄ¡ ¼³Á¤

	mov	DWORD PTR ?g_bSetSpeed@@3HA, 1		; g_bSetSpeed
	mov	DWORD PTR ?Hspeed@@3HA, eax		; Hspeed

; 686  : 			}
; 687  : 			else

	jmp	SHORT $LN57@DXW_MainLo
$LN56@DXW_MainLo:

; 688  : 			{
; 689  : 				Hspeed = -3;

	mov	DWORD PTR ?Hspeed@@3HA, -3		; Hspeed, fffffffdH
$LN57@DXW_MainLo:

; 690  : 			}
; 691  : 		}
; 692  : 		//////////////////
; 693  : 		if (::GetKeyState(VK_RIGHT) & 0x80 && g_bJump == 0 && g_bAtt == FALSE && g_bRush == FALSE) //¿À¸¥ÂÊ ÀÌµ¿ ·ÎÁ÷

	push	39					; 00000027H
	call	esi
	test	al, al
	jns	SHORT $LN58@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	jne	SHORT $LN58@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN58@DXW_MainLo
	cmp	DWORD PTR ?g_bRush@@3HA, 0		; g_bRush
	jne	SHORT $LN58@DXW_MainLo

; 694  : 		{
; 695  : 			Hspeed += 1;

	mov	eax, DWORD PTR ?Hspeed@@3HA		; Hspeed
	inc	eax

; 696  : 			g_bAccel = TRUE;

	mov	DWORD PTR ?g_bAccel@@3HA, 1		; g_bAccel
	mov	DWORD PTR ?Hspeed@@3HA, eax		; Hspeed

; 697  : 			g_bLeft = FALSE;

	mov	DWORD PTR ?g_bLeft@@3HA, 0		; g_bLeft

; 698  : 			g_bRight = TRUE;

	mov	DWORD PTR ?g_bRight@@3HA, 1		; g_bRight

; 699  : 			g_bLookR = TRUE;

	mov	DWORD PTR ?g_bLookR@@3HA, 1		; g_bLookR

; 700  : 			g_bLookL = FALSE;

	mov	DWORD PTR ?g_bLookL@@3HA, 0		; g_bLookL
	jmp	SHORT $LN65@DXW_MainLo
$LN58@DXW_MainLo:

; 701  : 		}
; 702  : 		else if (g_Pos.x < HRES - 50 && g_bJump == 1)

	cmp	DWORD PTR ?g_Pos@@3UtagPOINT@@A, 974	; 000003ceH
	jge	SHORT $LN1301@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 1		; g_bJump
	jne	SHORT $LN1301@DXW_MainLo

; 703  : 		{
; 704  : 			if (g_bJRight == 1)

	cmp	DWORD PTR ?g_bJRight@@3HA, 1		; g_bJRight
	jne	SHORT $LN61@DXW_MainLo

; 705  : 			{
; 706  : 				if (g_bSetSpeed == 0)

	cmp	DWORD PTR ?g_bSetSpeed@@3HA, 0		; g_bSetSpeed
	jne	SHORT $LN1075@DXW_MainLo

; 707  : 				{
; 708  : 					Hspeed += 1;

	inc	DWORD PTR ?Hspeed@@3HA			; Hspeed

; 709  : 				}
; 710  : 				/*if (g_bJaccel == 1)
; 711  : 				{
; 712  : 				Hspeed += 1;
; 713  : 				}*/
; 714  : 			}

	jmp	SHORT $LN1075@DXW_MainLo
$LN61@DXW_MainLo:

; 715  : 			else if (g_bJLeft == 0 && ::GetKeyState(VK_RIGHT) & 0x80)

	cmp	DWORD PTR ?g_bJLeft@@3HA, 0		; g_bJLeft
	jne	SHORT $LN1301@DXW_MainLo
	push	39					; 00000027H
	call	esi
	test	al, al
	mov	eax, DWORD PTR ?Hspeed@@3HA		; Hspeed
	jns	SHORT $LN65@DXW_MainLo

; 716  : 			{
; 717  : 				if (Hspeed < 2)

	cmp	eax, 2
	jge	SHORT $LN65@DXW_MainLo

; 718  : 				{
; 719  : 					Hspeed += 1;

	inc	eax
	mov	DWORD PTR ?Hspeed@@3HA, eax		; Hspeed
	jmp	SHORT $LN65@DXW_MainLo
$LN1301@DXW_MainLo:

; 720  : 				}
; 721  : 			}
; 722  : 		}
; 723  : 		if (g_bJRight == 1 && ::GetKeyState(VK_LEFT) & 0x80)

	mov	eax, DWORD PTR ?Hspeed@@3HA		; Hspeed
$LN65@DXW_MainLo:
	cmp	DWORD PTR ?g_bJRight@@3HA, 1		; g_bJRight
	jne	SHORT $LN68@DXW_MainLo
$LN1075@DXW_MainLo:
	push	37					; 00000025H
	call	esi
	test	al, al
	mov	eax, DWORD PTR ?Hspeed@@3HA		; Hspeed
	jns	SHORT $LN68@DXW_MainLo

; 724  : 		{
; 725  : 			if (Hspeed > 3)

	cmp	eax, 3
	jle	SHORT $LN67@DXW_MainLo

; 726  : 			{
; 727  : 				Hspeed -= 1;

	dec	eax

; 728  : 				g_bSetSpeed = TRUE;

	mov	DWORD PTR ?g_bSetSpeed@@3HA, 1		; g_bSetSpeed

; 729  : 			}
; 730  : 			else

	jmp	SHORT $LN1591@DXW_MainLo
$LN67@DXW_MainLo:

; 731  : 			{
; 732  : 				Hspeed = 3;

	mov	eax, 3
$LN1591@DXW_MainLo:

; 733  : 			}
; 734  : 		}
; 735  : 		if (g_bAtt == TRUE && g_bJump == FALSE)

	mov	DWORD PTR ?Hspeed@@3HA, eax		; Hspeed
$LN68@DXW_MainLo:
	cmp	DWORD PTR ?g_bAtt@@3HA, 1		; g_bAtt
	jne	SHORT $LN72@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	jne	SHORT $LN72@DXW_MainLo

; 736  : 		{
; 737  : 			if (Hspeed > 0)

	test	eax, eax
	jle	SHORT $LN1440@DXW_MainLo

; 738  : 			{
; 739  : 				Hspeed -= 1;

	dec	eax
	jmp	SHORT $LN1441@DXW_MainLo
$LN1440@DXW_MainLo:

; 740  : 			}
; 741  : 			else if (Hspeed < 0)

	jns	SHORT $LN72@DXW_MainLo

; 742  : 			{
; 743  : 				Hspeed += 1;

	inc	eax
$LN1441@DXW_MainLo:

; 744  : 			}
; 745  : 		}
; 746  : 		if (g_bRush == TRUE)

	mov	DWORD PTR ?Hspeed@@3HA, eax		; Hspeed
$LN72@DXW_MainLo:
	cmp	DWORD PTR ?g_bRush@@3HA, 1		; g_bRush
	jne	SHORT $LN73@DXW_MainLo

; 747  : 		{
; 748  : 			if (Hspeed > 0)

	test	eax, eax
	jg	SHORT $LN1296@DXW_MainLo

; 749  : 			{
; 750  : 				Hspeed = 0;
; 751  : 			}
; 752  : 			else if (Hspeed < 0)

	jns	SHORT $LN84@DXW_MainLo
$LN1296@DXW_MainLo:

; 753  : 			{
; 754  : 				Hspeed = 0;

	mov	DWORD PTR ?Hspeed@@3HA, 0		; Hspeed

; 755  : 			}
; 756  : 		}

	jmp	SHORT $LN84@DXW_MainLo
$LN73@DXW_MainLo:

; 757  : 		///////////////////////
; 758  : 		///////////////////////
; 759  : 		///////////////////////
; 760  : 		///////////////////////
; 761  : 		//¾Æ¹« Å°µµ ÀÔ·ÂÇÏÁö ¾Ê¾ÒÀ» °æ¿ì °¨¼Ó
; 762  : 		else if (::GetKeyState(VK_LEFT) & 0x80) {}

	push	37					; 00000025H
	call	esi
	test	al, al
	js	SHORT $LN84@DXW_MainLo

; 763  : 		else if (::GetKeyState(VK_RIGHT) & 0x80) {}

	push	39					; 00000027H
	call	esi
	test	al, al
	js	SHORT $LN84@DXW_MainLo

; 764  : 		else {
; 765  : 			g_bAccel = FALSE; g_bLeft = FALSE; g_bRight = FALSE;
; 766  : 			if (Hspeed > 0)

	mov	eax, DWORD PTR ?Hspeed@@3HA		; Hspeed
	mov	DWORD PTR ?g_bAccel@@3HA, 0		; g_bAccel
	mov	DWORD PTR ?g_bLeft@@3HA, 0		; g_bLeft
	mov	DWORD PTR ?g_bRight@@3HA, 0		; g_bRight
	test	eax, eax
	jle	SHORT $LN1442@DXW_MainLo

; 767  : 			{
; 768  : 				Hspeed -= 1;

	dec	eax
	jmp	SHORT $LN1443@DXW_MainLo
$LN1442@DXW_MainLo:

; 769  : 			}
; 770  : 			else if (Hspeed < 0)

	jns	SHORT $LN84@DXW_MainLo

; 771  : 			{
; 772  : 				Hspeed += 1;

	inc	eax
$LN1443@DXW_MainLo:

; 773  : 			}
; 774  : 		}
; 775  : 		//Á¡ÇÁ ·ÎÁ÷
; 776  : 		if (::GetKeyState(0x5A) & 0x80 && g_bJump == FALSE && g_bAtt == FALSE)

	mov	DWORD PTR ?Hspeed@@3HA, eax		; Hspeed
$LN84@DXW_MainLo:
	push	90					; 0000005aH
	call	esi
	test	al, al
	jns	SHORT $LN88@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	jne	SHORT $LN88@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN88@DXW_MainLo

; 777  : 		{
; 778  : 			g_bJump = TRUE;
; 779  : 			if (g_bAccel == 1)

	cmp	DWORD PTR ?g_bAccel@@3HA, 1		; g_bAccel
	mov	ecx, 1
	mov	eax, DWORD PTR ?g_bJaccel@@3HA		; g_bJaccel
	cmove	eax, ecx
	mov	DWORD PTR ?g_bJump@@3HA, 1		; g_bJump
	mov	DWORD PTR ?g_bJaccel@@3HA, eax		; g_bJaccel

; 780  : 			{
; 781  : 				g_bJaccel = TRUE;
; 782  : 			}
; 783  : 			if (g_bRight == 1)

	cmp	DWORD PTR ?g_bRight@@3HA, ecx		; g_bRight
	jne	SHORT $LN87@DXW_MainLo

; 784  : 			{
; 785  : 				g_bJRight = TRUE;

	mov	DWORD PTR ?g_bJRight@@3HA, ecx		; g_bJRight

; 786  : 				g_bJLeft = FALSE;

	mov	DWORD PTR ?g_bJLeft@@3HA, 0		; g_bJLeft
$LN87@DXW_MainLo:

; 787  : 			}
; 788  : 			if (g_bLeft == 1)

	cmp	DWORD PTR ?g_bLeft@@3HA, ecx		; g_bLeft
	jne	SHORT $LN88@DXW_MainLo

; 789  : 			{
; 790  : 				g_bJLeft = TRUE;

	mov	DWORD PTR ?g_bJLeft@@3HA, ecx		; g_bJLeft

; 791  : 				g_bJRight = FALSE;

	mov	DWORD PTR ?g_bJRight@@3HA, 0		; g_bJRight
$LN88@DXW_MainLo:

; 792  : 			}
; 793  : 		}
; 794  : 		//°¡¼Óµµ ÃÖ´ëÄ¡ ¼³Á¤
; 795  : 		if (Hspeed > 5)

	mov	eax, DWORD PTR ?Hspeed@@3HA		; Hspeed
	cmp	eax, 5
	jle	SHORT $LN89@DXW_MainLo

; 796  : 		{
; 797  : 			Hspeed = 5;

	mov	DWORD PTR ?Hspeed@@3HA, 5		; Hspeed
	jmp	SHORT $LN91@DXW_MainLo
$LN89@DXW_MainLo:

; 798  : 		}
; 799  : 		else if (Hspeed < -5)

	mov	ecx, -5					; fffffffbH
	cmp	eax, ecx
	cmovl	eax, ecx
	mov	DWORD PTR ?Hspeed@@3HA, eax		; Hspeed
$LN91@DXW_MainLo:

; 800  : 		{
; 801  : 			Hspeed = -5;
; 802  : 		}
; 803  : 		if (::GetKeyState(0x43) & 0x80 && g_bJump == FALSE && g_bRush == FALSE && Timer[9] == 0 && g_bLookR == TRUE)

	push	67					; 00000043H
	call	esi
	test	al, al
	jns	$LN92@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	jne	SHORT $LN92@DXW_MainLo
	cmp	DWORD PTR ?g_bRush@@3HA, 0		; g_bRush
	jne	SHORT $LN92@DXW_MainLo
	cmp	DWORD PTR ?Timer@@3PAHA+36, 0
	jne	SHORT $LN92@DXW_MainLo
	cmp	DWORD PTR ?g_bLookR@@3HA, 1		; g_bLookR
	jne	SHORT $LN92@DXW_MainLo

; 804  : 		{
; 805  : 			if (g_bAtt == TRUE)

	cmp	DWORD PTR ?g_bAtt@@3HA, 1		; g_bAtt
	jne	SHORT $LN95@DXW_MainLo

; 806  : 			{
; 807  : 				Aframe == 0; g_bAL = FALSE, g_bAR = FALSE, g_bAtt = FALSE; g_bHit = FALSE;
; 808  : 				if (g_pDS[3])

	mov	eax, DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+12
	mov	DWORD PTR ?g_bAL@@3HA, 0		; g_bAL
	mov	DWORD PTR ?g_bAR@@3HA, 0		; g_bAR
	mov	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	mov	DWORD PTR ?g_bHit@@3HA, 0		; g_bHit
	test	eax, eax
	je	SHORT $LN95@DXW_MainLo

; 809  : 					m_HHSound.Stop(g_pDS[3]);

	push	eax
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Stop@CHHSound@@QAEXPAUIDirectSoundBuffer@@@Z ; CHHSound::Stop
$LN95@DXW_MainLo:

; 810  : 			}
; 811  : 			g_bRush = TRUE;
; 812  : 			g_bRushR = TRUE;

	mov	DWORD PTR ?g_bRushR@@3HA, 1		; g_bRushR

; 813  : 			Cframe = 7;

	mov	DWORD PTR ?Cframe@@3HA, 7		; Cframe

; 814  : 			if (g_pDS[4])
; 815  : 				m_HHSound.Stop(g_pDS[4]);
; 816  : 			m_HHSound.Play(g_pDS[4], false);

	jmp	$LN1593@DXW_MainLo
$LN92@DXW_MainLo:

; 817  : 		}
; 818  : 		else if (::GetKeyState(0x43) & 0x80 && g_bJump == FALSE && g_bRush == FALSE && Timer[9] == 0 && g_bLookL == TRUE)

	push	67					; 00000043H
	call	esi
	test	al, al
	jns	$LN1304@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	jne	$LN1304@DXW_MainLo
	cmp	DWORD PTR ?g_bRush@@3HA, 0		; g_bRush
	jne	$LN1304@DXW_MainLo
	cmp	DWORD PTR ?Timer@@3PAHA+36, 0
	jne	$LN1308@DXW_MainLo
	cmp	DWORD PTR ?g_bLookL@@3HA, 1		; g_bLookL
	jne	$LN1310@DXW_MainLo

; 819  : 		{
; 820  : 			if (g_bAtt == TRUE)

	cmp	DWORD PTR ?g_bAtt@@3HA, 1		; g_bAtt
	jne	SHORT $LN99@DXW_MainLo

; 821  : 			{
; 822  : 				Aframe == 0; g_bAL = FALSE, g_bAR = FALSE, g_bAtt = FALSE; g_bHit = FALSE;
; 823  : 				if (g_pDS[3])

	mov	eax, DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+12
	mov	DWORD PTR ?g_bAL@@3HA, 0		; g_bAL
	mov	DWORD PTR ?g_bAR@@3HA, 0		; g_bAR
	mov	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	mov	DWORD PTR ?g_bHit@@3HA, 0		; g_bHit
	test	eax, eax
	je	SHORT $LN99@DXW_MainLo

; 824  : 					m_HHSound.Stop(g_pDS[3]);

	push	eax
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Stop@CHHSound@@QAEXPAUIDirectSoundBuffer@@@Z ; CHHSound::Stop
$LN99@DXW_MainLo:

; 825  : 			}
; 826  : 			g_bRush = TRUE;
; 827  : 			g_bRushL = TRUE;

	mov	DWORD PTR ?g_bRushL@@3HA, 1		; g_bRushL

; 828  : 			Cframe = 0;

	mov	DWORD PTR ?Cframe@@3HA, 0		; Cframe
$LN1593@DXW_MainLo:

; 829  : 			if (g_pDS[4])
; 830  : 				m_HHSound.Stop(g_pDS[4]);
; 831  : 			m_HHSound.Play(g_pDS[4], false);
; 832  : 		}
; 833  : 		if (g_bRush == TRUE)

	mov	eax, DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+16
	mov	DWORD PTR ?g_bRush@@3HA, 1		; g_bRush
	test	eax, eax
	je	SHORT $LN100@DXW_MainLo
	push	eax
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Stop@CHHSound@@QAEXPAUIDirectSoundBuffer@@@Z ; CHHSound::Stop
	mov	eax, DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+16
$LN100@DXW_MainLo:
	push	0
	push	eax
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Play@CHHSound@@QAEXPAUIDirectSoundBuffer@@_N@Z ; CHHSound::Play
$LN1304@DXW_MainLo:
	cmp	DWORD PTR ?g_bRush@@3HA, 1		; g_bRush
	jne	$LN1308@DXW_MainLo

; 834  : 		{
; 835  : 			if (Cframe < 8 && g_bRushR)

	mov	ecx, DWORD PTR ?Cframe@@3HA		; Cframe
	cmp	ecx, 8
	jge	$LN1308@DXW_MainLo
	cmp	DWORD PTR ?g_bRushR@@3HA, 0		; g_bRushR
	mov	edx, DWORD PTR ?g_Pos@@3UtagPOINT@@A
	je	SHORT $LN1306@DXW_MainLo

; 836  : 			{
; 837  : 				if (Cframe > 5)

	cmp	ecx, 5
	jle	SHORT $LN103@DXW_MainLo

; 838  : 				{
; 839  : 					g_Pos.x += 32;

	add	edx, 32					; 00000020H
$LN103@DXW_MainLo:

; 840  : 				}
; 841  : 				Timer[8]++;

	mov	eax, DWORD PTR ?Timer@@3PAHA+32
	inc	eax
	mov	DWORD PTR ?Timer@@3PAHA+32, eax

; 842  : 				if (Timer[8] == 4 && Cframe > 0)

	cmp	eax, 4
	jne	SHORT $LN104@DXW_MainLo
	test	ecx, ecx
	jle	SHORT $LN1445@DXW_MainLo

; 843  : 				{
; 844  : 					Timer[8] = 0;

	xor	eax, eax

; 845  : 					Cframe--;

	dec	ecx
	mov	DWORD PTR ?Timer@@3PAHA+32, eax
	mov	DWORD PTR ?Cframe@@3HA, ecx		; Cframe
$LN104@DXW_MainLo:

; 846  : 				}
; 847  : 				if (Cframe == 0)

	test	ecx, ecx
$LN1445@DXW_MainLo:
	jne	SHORT $LN107@DXW_MainLo

; 848  : 				{
; 849  : 					if (Timer[8] > 8)

	cmp	eax, 8
	jle	SHORT $LN106@DXW_MainLo

; 850  : 					{
; 851  : 						g_bRush = FALSE;
; 852  : 						g_bRushR = FALSE;
; 853  : 						Timer[9] = 50;
; 854  : 						Timer[8] = 0;

	xor	eax, eax
	mov	DWORD PTR ?g_bRush@@3HA, 0		; g_bRush

; 855  : 						Cframe = 0;

	xor	ecx, ecx
	mov	DWORD PTR ?g_bRushR@@3HA, 0		; g_bRushR
	mov	DWORD PTR ?Timer@@3PAHA+36, 50		; 00000032H
	mov	DWORD PTR ?Timer@@3PAHA+32, eax
	mov	DWORD PTR ?Cframe@@3HA, ecx		; Cframe

; 856  : 					}
; 857  : 					else

	jmp	SHORT $LN1076@DXW_MainLo
$LN1310@DXW_MainLo:

; 817  : 		}
; 818  : 		else if (::GetKeyState(0x43) & 0x80 && g_bJump == FALSE && g_bRush == FALSE && Timer[9] == 0 && g_bLookL == TRUE)

	mov	edx, DWORD PTR ?g_Pos@@3UtagPOINT@@A
	jmp	$LN114@DXW_MainLo
$LN106@DXW_MainLo:

; 858  : 					{
; 859  : 						Timer[8]++;

	inc	eax
	mov	DWORD PTR ?Timer@@3PAHA+32, eax

; 860  : 					}
; 861  : 				}
; 862  : 			}
; 863  : 			if (Cframe < 8 && g_bRushL)

	jmp	SHORT $LN1076@DXW_MainLo
$LN1306@DXW_MainLo:

; 834  : 		{
; 835  : 			if (Cframe < 8 && g_bRushR)

	mov	eax, DWORD PTR ?Timer@@3PAHA+32
$LN107@DXW_MainLo:

; 860  : 					}
; 861  : 				}
; 862  : 			}
; 863  : 			if (Cframe < 8 && g_bRushL)

	cmp	ecx, 8
	jge	SHORT $LN113@DXW_MainLo
$LN1076@DXW_MainLo:
	cmp	DWORD PTR ?g_bRushL@@3HA, 0		; g_bRushL
	je	SHORT $LN113@DXW_MainLo

; 864  : 			{
; 865  : 				if (Cframe < 2)

	cmp	ecx, 2
	jge	SHORT $LN109@DXW_MainLo

; 866  : 				{
; 867  : 					g_Pos.x -= 32;

	sub	edx, 32					; 00000020H
$LN109@DXW_MainLo:

; 868  : 				}
; 869  : 				Timer[8]++;

	inc	eax
	mov	DWORD PTR ?Timer@@3PAHA+32, eax

; 870  : 				if (Timer[8] == 4 && Cframe < 7)

	cmp	eax, 4
	jne	SHORT $LN110@DXW_MainLo
	cmp	ecx, 7
	jge	SHORT $LN1446@DXW_MainLo

; 871  : 				{
; 872  : 					Timer[8] = 0;

	xor	eax, eax

; 873  : 					Cframe++;

	inc	ecx
	mov	DWORD PTR ?Timer@@3PAHA+32, eax
	mov	DWORD PTR ?Cframe@@3HA, ecx		; Cframe
$LN110@DXW_MainLo:

; 874  : 				}
; 875  : 				if (Cframe == 7)

	cmp	ecx, 7
$LN1446@DXW_MainLo:
	jne	SHORT $LN113@DXW_MainLo

; 876  : 				{
; 877  : 					if (Timer[8] > 8)

	cmp	eax, 8
	jle	SHORT $LN112@DXW_MainLo

; 878  : 					{
; 879  : 						g_bRush = FALSE;

	mov	DWORD PTR ?g_bRush@@3HA, 0		; g_bRush

; 880  : 						g_bRushL = FALSE;

	mov	DWORD PTR ?g_bRushL@@3HA, 0		; g_bRushL

; 881  : 						Timer[9] = 50;

	mov	DWORD PTR ?Timer@@3PAHA+36, 50		; 00000032H

; 882  : 						Timer[8] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+32, 0

; 883  : 						Cframe = 0;

	mov	DWORD PTR ?Cframe@@3HA, 0		; Cframe

; 884  : 					}
; 885  : 					else

	jmp	SHORT $LN1077@DXW_MainLo
$LN112@DXW_MainLo:

; 886  : 					{
; 887  : 						Timer[8]++;

	inc	eax
	mov	DWORD PTR ?Timer@@3PAHA+32, eax
	jmp	SHORT $LN113@DXW_MainLo
$LN1308@DXW_MainLo:

; 888  : 					}
; 889  : 				}
; 890  : 			}
; 891  : 
; 892  : 		}
; 893  : 		if (Timer[9] > 0)

	mov	edx, DWORD PTR ?g_Pos@@3UtagPOINT@@A
$LN113@DXW_MainLo:
	cmp	DWORD PTR ?Timer@@3PAHA+36, 0
	jle	SHORT $LN114@DXW_MainLo
$LN1077@DXW_MainLo:

; 894  : 		{
; 895  : 			Timer[9]--;

	dec	DWORD PTR ?Timer@@3PAHA+36
$LN114@DXW_MainLo:

; 896  : 		}
; 897  : 		g_Pos.x += Hspeed;

	add	edx, DWORD PTR ?Hspeed@@3HA		; Hspeed
	mov	ecx, DWORD PTR ?g_nPhaze@@3HA		; g_nPhaze
	mov	edi, DWORD PTR ?Knockback@@3HA		; Knockback
	jmp	SHORT $LN46@DXW_MainLo
$LN1311@DXW_MainLo:

; 898  : 		//È­¸é ¹ÛÀ¸·Î ÀÌµ¿ÇÏ´Â°ÍÀ» Á¦ÇÑÇÔ.
; 899  : 		//Áß·Â °ü·Ã ¹°¸®¿¬»ê
; 900  : 	}
; 901  : 	if (g_bJump)

	mov	edx, DWORD PTR ?g_Pos@@3UtagPOINT@@A
$LN46@DXW_MainLo:
	cmp	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	je	$LN119@DXW_MainLo

; 902  : 	{
; 903  : 		if (Gravity > -20)

	mov	eax, DWORD PTR ?Gravity@@3HA		; Gravity
	cmp	eax, -20				; ffffffecH
	jle	$LN119@DXW_MainLo

; 904  : 		{
; 905  : 			Gravity -= 1;

	dec	eax
	mov	DWORD PTR ?Gravity@@3HA, eax		; Gravity
	mov	eax, DWORD PTR ?g_Pos@@3UtagPOINT@@A+4
	sub	eax, DWORD PTR ?Gravity@@3HA		; Gravity

; 906  : 			g_Pos.y -= Gravity;

	mov	DWORD PTR ?g_Pos@@3UtagPOINT@@A+4, eax
	cmp	eax, 590				; 0000024eH

; 907  : 			if (g_Pos.y > 590 && g_nPhaze == 1) //¹Ù´Ú

	jle	SHORT $LN117@DXW_MainLo
	cmp	ecx, 1
	jne	SHORT $LN117@DXW_MainLo

; 908  : 			{
; 909  : 				g_Pos.y = 590;

	mov	DWORD PTR ?g_Pos@@3UtagPOINT@@A+4, 590	; 0000024eH

; 910  : 				Gravity = 13;
; 911  : 				g_bSetSpeed = FALSE;
; 912  : 				g_bJump = FALSE;
; 913  : 				g_bJaccel = FALSE;
; 914  : 				g_bJLeft = FALSE;
; 915  : 				g_bJRight = FALSE;
; 916  : 			}
; 917  : 			if (g_Pos.y > 500 && g_nPhaze == 2) //¹Ù´Ú

	jmp	SHORT $LN1448@DXW_MainLo
$LN117@DXW_MainLo:
	cmp	eax, 500				; 000001f4H
	jle	SHORT $LN118@DXW_MainLo
	cmp	ecx, 2
	jne	SHORT $LN118@DXW_MainLo

; 918  : 			{
; 919  : 				g_Pos.y = 500;

	mov	DWORD PTR ?g_Pos@@3UtagPOINT@@A+4, 500	; 000001f4H

; 920  : 				Gravity = 13;
; 921  : 				g_bSetSpeed = FALSE;
; 922  : 				g_bJump = FALSE;
; 923  : 				g_bJaccel = FALSE;
; 924  : 				g_bJLeft = FALSE;
; 925  : 				g_bJRight = FALSE;
; 926  : 			}
; 927  : 			if (g_Pos.y > 510 && g_nPhaze == 3) //¹Ù´Ú

	jmp	SHORT $LN1448@DXW_MainLo
$LN118@DXW_MainLo:
	cmp	eax, 510				; 000001feH
	jle	SHORT $LN119@DXW_MainLo
	cmp	ecx, 3
	jne	SHORT $LN119@DXW_MainLo

; 928  : 			{
; 929  : 				g_Pos.y = 510;

	mov	DWORD PTR ?g_Pos@@3UtagPOINT@@A+4, 510	; 000001feH
$LN1448@DXW_MainLo:

; 930  : 				Gravity = 13;
; 931  : 				g_bSetSpeed = FALSE;
; 932  : 				g_bJump = FALSE;
; 933  : 				g_bJaccel = FALSE;
; 934  : 				g_bJLeft = FALSE;
; 935  : 				g_bJRight = FALSE;
; 936  : 			}
; 937  : 
; 938  : 		}
; 939  : 	}
; 940  : 	if (Knockback == TRUE)

	mov	DWORD PTR ?Gravity@@3HA, 13		; Gravity, 0000000dH
	mov	DWORD PTR ?g_bSetSpeed@@3HA, 0		; g_bSetSpeed
	mov	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	mov	DWORD PTR ?g_bJaccel@@3HA, 0		; g_bJaccel
	mov	DWORD PTR ?g_bJLeft@@3HA, 0		; g_bJLeft
	mov	DWORD PTR ?g_bJRight@@3HA, 0		; g_bJRight
$LN119@DXW_MainLo:
	cmp	edi, 1
	jne	SHORT $LN126@DXW_MainLo

; 941  : 	{
; 942  : 		g_Pos.x += Knockspd;

	mov	eax, DWORD PTR ?Knockspd@@3HA		; Knockspd
	add	edx, eax

; 943  : 	}
; 944  : 	if (Knockback == TRUE && Knockspd > 0)

	test	eax, eax
	jle	SHORT $LN1449@DXW_MainLo

; 945  : 	{
; 946  : 		Knockspd -= 2;

	sub	eax, 2
	mov	DWORD PTR ?Knockspd@@3HA, eax		; Knockspd
	test	eax, eax

; 947  : 		if (Knockspd <= 0)

	jle	SHORT $LN1295@DXW_MainLo
$LN126@DXW_MainLo:

; 964  : 	}
; 965  : 	if (Timer[18] > 0 && Knockback == TRUE && Delay ==TRUE)

	mov	eax, DWORD PTR ?Timer@@3PAHA+72
	test	eax, eax
	jle	SHORT $LN1451@DXW_MainLo
	cmp	edi, 1
	jne	SHORT $LN127@DXW_MainLo
	cmp	DWORD PTR ?Delay@@3HA, edi		; Delay
	jne	SHORT $LN127@DXW_MainLo

; 966  : 	{
; 967  : 		Timer[18] -= 1;

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+72, eax
	jmp	SHORT $LN129@DXW_MainLo
$LN1449@DXW_MainLo:

; 948  : 		{
; 949  : 			Knockspd = 0;
; 950  : 		}
; 951  : 	}
; 952  : 	else if (Knockback == TRUE && Knockspd < 0)

	jns	SHORT $LN1081@DXW_MainLo

; 953  : 	{
; 954  : 		Knockspd += 2;

	add	eax, 2
	mov	DWORD PTR ?Knockspd@@3HA, eax		; Knockspd

; 955  : 		if (Knockspd >= 0)

	js	SHORT $LN1081@DXW_MainLo
$LN1295@DXW_MainLo:

; 956  : 		{
; 957  : 			Knockspd = 0;

	mov	DWORD PTR ?Knockspd@@3HA, 0		; Knockspd

; 958  : 		}
; 959  : 	}
; 960  : 	if (Knockback == TRUE && Knockspd == 0 && Delay == FALSE)

	jmp	SHORT $LN1082@DXW_MainLo
$LN1081@DXW_MainLo:
	test	eax, eax
	jne	SHORT $LN126@DXW_MainLo
$LN1082@DXW_MainLo:
	cmp	DWORD PTR ?Delay@@3HA, 0		; Delay
	jne	SHORT $LN126@DXW_MainLo

; 961  : 	{
; 962  : 		Timer[18] = 20;

	mov	eax, 20					; 00000014H

; 963  : 		Delay = TRUE;

	mov	DWORD PTR ?Delay@@3HA, 1		; Delay

; 966  : 	{
; 967  : 		Timer[18] -= 1;

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+72, eax
	jmp	SHORT $LN129@DXW_MainLo
$LN127@DXW_MainLo:

; 968  : 	}
; 969  : 	else if (Timer[18] == 0 && Knockback == TRUE && Delay ==TRUE) 

	test	eax, eax
$LN1451@DXW_MainLo:
	jne	SHORT $LN129@DXW_MainLo
	cmp	edi, 1
	jne	SHORT $LN129@DXW_MainLo
	cmp	DWORD PTR ?Delay@@3HA, edi		; Delay
	jne	SHORT $LN129@DXW_MainLo

; 970  : 	{
; 971  : 		Knockback = FALSE;

	mov	DWORD PTR ?Knockback@@3HA, 0		; Knockback

; 972  : 		Delay = FALSE;

	mov	DWORD PTR ?Delay@@3HA, 0		; Delay

; 973  : 		Hspeed = 0;

	mov	DWORD PTR ?Hspeed@@3HA, 0		; Hspeed

; 974  : 		Timer[18] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+72, 0
$LN129@DXW_MainLo:

; 975  : 	}
; 976  : 	if (g_Pos.x < 0)

	test	edx, edx
	jns	SHORT $LN130@DXW_MainLo

; 977  : 	{
; 978  : 		g_Pos.x = 0;

	mov	DWORD PTR ?g_Pos@@3UtagPOINT@@A, 0

; 979  : 	}
; 980  : 	if (g_Pos.x > HRES - 50)

	jmp	SHORT $LN131@DXW_MainLo
$LN130@DXW_MainLo:
	mov	eax, 974				; 000003ceH
	cmp	edx, eax
	cmovg	edx, eax
	mov	DWORD PTR ?g_Pos@@3UtagPOINT@@A, edx
$LN131@DXW_MainLo:

; 981  : 	{
; 982  : 		g_Pos.x = HRES - 50;
; 983  : 	}
; 984  : 	if (g_nPhaze > 0 && g_nPhaze < 4)

	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, 2
	ja	SHORT $LN1317@DXW_MainLo

; 985  : 	{
; 986  : 		if (Timer[28] > 0)

	mov	eax, DWORD PTR ?Timer@@3PAHA+112
	test	eax, eax
	jle	SHORT $LN133@DXW_MainLo

; 987  : 		{
; 988  : 			Timer[28]--;

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+112, eax
$LN133@DXW_MainLo:

; 989  : 		}
; 990  : 		if (::GetKeyState(VK_SPACE) & 0x80 && Timer[28] == 0 && Skilluse == FALSE)

	push	32					; 00000020H
	call	esi
	test	al, al
	jns	SHORT $LN1314@DXW_MainLo
	cmp	DWORD PTR ?Timer@@3PAHA+112, 0
	jne	SHORT $LN1314@DXW_MainLo
	cmp	DWORD PTR ?Skilluse@@3HA, 0		; Skilluse
	jne	SHORT $LN1314@DXW_MainLo

; 991  : 		{
; 992  : 			Timer[28] = 500;
; 993  : 			MaxTime = 500;
; 994  : 			Timer[29] = 3;
; 995  : 			Skilluse = TRUE;
; 996  : 			if (g_pDS[5])

	mov	eax, DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+20
	mov	DWORD PTR ?Timer@@3PAHA+112, 500	; 000001f4H
	mov	DWORD PTR ?MaxTime@@3HA, 500		; MaxTime, 000001f4H
	mov	DWORD PTR ?Timer@@3PAHA+116, 3
	mov	DWORD PTR ?Skilluse@@3HA, 1		; Skilluse
	test	eax, eax
	je	SHORT $LN135@DXW_MainLo

; 997  : 				m_HHSound.Stop(g_pDS[5]);

	push	eax
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Stop@CHHSound@@QAEXPAUIDirectSoundBuffer@@@Z ; CHHSound::Stop
	mov	eax, DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+20
$LN135@DXW_MainLo:

; 998  : 			m_HHSound.Play(g_pDS[5], false);

	push	0
	push	eax
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Play@CHHSound@@QAEXPAUIDirectSoundBuffer@@_N@Z ; CHHSound::Play
$LN1314@DXW_MainLo:

; 999  : 		}
; 1000 : 	}
; 1001 : 	if (Skilluse == TRUE)

	mov	ecx, DWORD PTR ?g_nPhaze@@3HA		; g_nPhaze
$LN1317@DXW_MainLo:
	cmp	DWORD PTR ?Skilluse@@3HA, 1		; Skilluse
	mov	edi, 3
	mov	DWORD PTR tv11905[ebp], edi
	jne	$LN1318@DXW_MainLo

; 1002 : 	{
; 1003 : 		if (Timer[29] == 0)

	mov	eax, DWORD PTR ?Timer@@3PAHA+116
	test	eax, eax
	jne	$LN137@DXW_MainLo

; 1004 : 		{
; 1005 : 			if (PSframe < 8)

	mov	edx, DWORD PTR ?PSframe@@3HA		; PSframe
	cmp	edx, 8
	jge	SHORT $LN139@DXW_MainLo

; 1006 : 			{
; 1007 : 				Timer[29] = 4;

	mov	DWORD PTR ?Timer@@3PAHA+116, 4
	jmp	SHORT $LN141@DXW_MainLo
$LN139@DXW_MainLo:

; 1008 : 			}
; 1009 : 			else if (PSframe > 8)

	cmovg	eax, edi
	mov	DWORD PTR ?Timer@@3PAHA+116, eax
$LN141@DXW_MainLo:

; 1010 : 			{
; 1011 : 				Timer[29] = 3;
; 1012 : 			}
; 1013 : 			PSframe++;

	lea	eax, DWORD PTR [edx+1]
	mov	DWORD PTR ?PSframe@@3HA, eax		; PSframe
	test	eax, eax

; 1014 : 			if (PSframe > 0 && PSframe < 8)

	jle	SHORT $LN142@DXW_MainLo
	cmp	eax, 8
	jge	SHORT $LN142@DXW_MainLo

; 1015 : 			{
; 1016 : 				if (p1die == FALSE && g_nPhaze == 1)

	cmp	DWORD PTR ?p1die@@3HA, 0		; p1die
	jne	SHORT $LN144@DXW_MainLo
	cmp	ecx, 1
	jne	SHORT $LN144@DXW_MainLo

; 1017 : 				{
; 1018 : 					P1HP -= 15;

	sub	DWORD PTR ?P1HP@@3HA, 15		; P1HP, 0000000fH
	jmp	$LN138@DXW_MainLo
$LN144@DXW_MainLo:

; 1019 : 				}
; 1020 : 				else if (p2die == FALSE && g_nPhaze == 2)

	cmp	DWORD PTR ?p2die@@3HA, 0		; p2die
	jne	SHORT $LN146@DXW_MainLo
	cmp	ecx, 2
	jne	SHORT $LN146@DXW_MainLo

; 1021 : 				{
; 1022 : 					P2HP -= 20;

	sub	DWORD PTR ?P2HP@@3HA, 20		; P2HP, 00000014H
	jmp	$LN138@DXW_MainLo
$LN146@DXW_MainLo:

; 1023 : 				}
; 1024 : 				else if (p3die == FALSE && g_nPhaze == 3)

	cmp	DWORD PTR ?p3die@@3HA, 0		; p3die
	jne	$LN138@DXW_MainLo
	cmp	ecx, edi
	jne	$LN138@DXW_MainLo

; 1025 : 				{
; 1026 : 					P3HP -= 40;

	sub	DWORD PTR ?P3HP@@3HA, 40		; P3HP, 00000028H

; 1027 : 				}
; 1028 : 			}

	jmp	$LN138@DXW_MainLo
$LN142@DXW_MainLo:

; 1029 : 			else if (PSframe == 9 && BigHit == FALSE)

	cmp	eax, 9
	jne	$LN138@DXW_MainLo
	cmp	DWORD PTR ?BigHit@@3HA, 0		; BigHit
	jne	$LN138@DXW_MainLo

; 1030 : 			{
; 1031 : 				if (g_pDS[6])

	mov	eax, DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+24
	test	eax, eax
	je	SHORT $LN150@DXW_MainLo

; 1032 : 					m_HHSound.Stop(g_pDS[6]);

	push	eax
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Stop@CHHSound@@QAEXPAUIDirectSoundBuffer@@@Z ; CHHSound::Stop
	mov	eax, DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+24
$LN150@DXW_MainLo:

; 1033 : 				m_HHSound.Play(g_pDS[6], false);

	push	0
	push	eax
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Play@CHHSound@@QAEXPAUIDirectSoundBuffer@@_N@Z ; CHHSound::Play

; 1034 : 				if (p1die == FALSE)

	cmp	DWORD PTR ?p1die@@3HA, 0		; p1die
	jne	SHORT $LN151@DXW_MainLo

; 1035 : 				{
; 1036 : 					P1HP -= 150;

	mov	eax, DWORD PTR ?P1HP@@3HA		; P1HP

; 1037 : 					if (Skillcheat > 0)

	mov	ecx, DWORD PTR ?Skillcheat@@3HA		; Skillcheat
	add	eax, -150				; ffffff6aH
	mov	DWORD PTR ?P1HP@@3HA, eax		; P1HP
	test	ecx, ecx
	jle	SHORT $LN158@DXW_MainLo

; 1038 : 					{
; 1039 : 						P1HP -= Skillcheat;

	sub	eax, ecx
	mov	DWORD PTR ?P1HP@@3HA, eax		; P1HP

; 1040 : 					}
; 1041 : 				}

	jmp	SHORT $LN158@DXW_MainLo
$LN151@DXW_MainLo:

; 1042 : 				else if (p2die == FALSE)

	cmp	DWORD PTR ?p2die@@3HA, 0		; p2die
	jne	SHORT $LN154@DXW_MainLo

; 1043 : 				{
; 1044 : 					P2HP -= 200;

	mov	eax, DWORD PTR ?P2HP@@3HA		; P2HP

; 1045 : 					if (Skillcheat > 0)

	mov	ecx, DWORD PTR ?Skillcheat@@3HA		; Skillcheat
	add	eax, -200				; ffffff38H
	mov	DWORD PTR ?P2HP@@3HA, eax		; P2HP
	test	ecx, ecx
	jle	SHORT $LN158@DXW_MainLo

; 1046 : 					{
; 1047 : 						P2HP -= Skillcheat;

	sub	eax, ecx
	mov	DWORD PTR ?P2HP@@3HA, eax		; P2HP

; 1048 : 					}
; 1049 : 				}

	jmp	SHORT $LN158@DXW_MainLo
$LN154@DXW_MainLo:

; 1050 : 				else if (p3die == FALSE)

	cmp	DWORD PTR ?p3die@@3HA, 0		; p3die
	jne	SHORT $LN158@DXW_MainLo

; 1051 : 				{
; 1052 : 					P3HP -= 400;

	mov	eax, DWORD PTR ?P3HP@@3HA		; P3HP

; 1053 : 					if (Skillcheat > 0)

	mov	ecx, DWORD PTR ?Skillcheat@@3HA		; Skillcheat
	add	eax, -400				; fffffe70H
	mov	DWORD PTR ?P3HP@@3HA, eax		; P3HP
	test	ecx, ecx
	jle	SHORT $LN158@DXW_MainLo

; 1054 : 					{
; 1055 : 						P3HP -= Skillcheat;

	sub	eax, ecx
	mov	DWORD PTR ?P3HP@@3HA, eax		; P3HP
$LN158@DXW_MainLo:

; 1056 : 					}
; 1057 : 				}
; 1058 : 				BigHit = TRUE;
; 1059 : 			}
; 1060 : 		}

	mov	ecx, DWORD PTR ?g_nPhaze@@3HA		; g_nPhaze
	mov	DWORD PTR ?BigHit@@3HA, 1		; BigHit
	jmp	SHORT $LN138@DXW_MainLo
$LN137@DXW_MainLo:

; 1061 : 		else { Timer[29]--; }

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+116, eax
$LN138@DXW_MainLo:

; 1062 : 		if (PSframe > 19)

	cmp	DWORD PTR ?PSframe@@3HA, 19		; PSframe, 00000013H
	jle	SHORT $LN1318@DXW_MainLo

; 1063 : 		{
; 1064 : 			Skilluse = FALSE;

	mov	DWORD PTR ?Skilluse@@3HA, 0		; Skilluse

; 1065 : 			Timer[29] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+116, 0

; 1066 : 			PSframe = 0;

	mov	DWORD PTR ?PSframe@@3HA, 0		; PSframe

; 1067 : 			BigHit = FALSE;

	mov	DWORD PTR ?BigHit@@3HA, 0		; BigHit
$LN1318@DXW_MainLo:

; 1068 : 		}
; 1069 : 	}
; 1070 : 
; 1071 : 	switch (g_nPhaze)

	mov	edi, 5
	mov	DWORD PTR tv11976[ebp], edi
	cmp	ecx, edi
	ja	$LN2@DXW_MainLo
	jmp	DWORD PTR $LN1595@DXW_MainLo[ecx*4]
$LN160@DXW_MainLo:

; 1072 : 	{
; 1073 : 
; 1074 : 	case 0:
; 1075 : 		__PutImage(g_pDDSTITLE, 0, 0);

	push	0
	push	0
	push	DWORD PTR ?g_pDDSTITLE@@3PAUIDirectDrawSurface7@@A ; g_pDDSTITLE
	call	?__PutImage@@YAXPAUIDirectDrawSurface7@@HH@Z ; __PutImage
	add	esp, 12					; 0000000cH

; 1076 : 		if (::GetKeyState(VK_SPACE) & 0x80 && g_nPhaze == 0)

	push	32					; 00000020H
	call	esi
	mov	ecx, DWORD PTR ?g_nPhaze@@3HA		; g_nPhaze
	test	al, al
	jns	$LN2@DXW_MainLo
	test	ecx, ecx
	jne	$LN1452@DXW_MainLo

; 1077 : 		{
; 1078 : 			g_nPhaze = 1;

	mov	DWORD PTR ?g_nPhaze@@3HA, 1		; g_nPhaze

; 1079 : 			Timer[12] = 300;

	mov	DWORD PTR ?Timer@@3PAHA+48, 300		; 0000012cH

; 1080 : 		}
; 1081 : 		break;

	jmp	$LN1087@DXW_MainLo
$LN162@DXW_MainLo:

; 1082 : 	case 1:
; 1083 : 		if (musicstart == TRUE)

	cmp	DWORD PTR ?musicstart@@3HA, 1		; musicstart
	je	SHORT $LN164@DXW_MainLo

; 1084 : 		{
; 1085 : 		}
; 1086 : 			else
; 1087 : 			{
; 1088 : 				m_HHSound.Play(g_pDS[0], true);

	push	1
	push	DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Play@CHHSound@@QAEXPAUIDirectSoundBuffer@@_N@Z ; CHHSound::Play

; 1089 : 				musicstart = TRUE;

	mov	DWORD PTR ?musicstart@@3HA, 1		; musicstart
$LN164@DXW_MainLo:

; 1090 : 			}
; 1091 : 			//¹è°æ
; 1092 : 			::__PutImage(g_pDDSBG, Bx, 0);

	push	0
	push	DWORD PTR ?Bx@@3HA			; Bx
	push	DWORD PTR ?g_pDDSBG@@3PAUIDirectDrawSurface7@@A ; g_pDDSBG
	call	?__PutImage@@YAXPAUIDirectDrawSurface7@@HH@Z ; __PutImage

; 1093 : 			if (Timer[11] > 0)

	mov	eax, DWORD PTR ?Timer@@3PAHA+44
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	SHORT $LN165@DXW_MainLo

; 1094 : 			{
; 1095 : 				Timer[11] -= 1;

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+44, eax
$LN165@DXW_MainLo:

; 1096 : 			}
; 1097 : 			if (Timer[12] > 0)

	mov	eax, DWORD PTR ?Timer@@3PAHA+48
	test	eax, eax
	jle	SHORT $LN166@DXW_MainLo

; 1098 : 			{
; 1099 : 				Timer[12] -= 1;

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+48, eax
$LN166@DXW_MainLo:

; 1100 : 			}
; 1101 : 			if (g_bCast == FALSE && g_bCFire == FALSE && Timer[12] == 0 && BossAtt == FALSE)

	mov	edx, DWORD PTR ?g_bCast@@3HA		; g_bCast
	test	edx, edx
	jne	SHORT $LN167@DXW_MainLo
	cmp	DWORD PTR ?g_bCFire@@3HA, edx		; g_bCFire
	jne	SHORT $LN167@DXW_MainLo
	test	eax, eax
	jne	SHORT $LN167@DXW_MainLo
	cmp	DWORD PTR ?BossAtt@@3HA, eax		; BossAtt
	jne	SHORT $LN167@DXW_MainLo

; 1102 : 			{
; 1103 : 				g_bCast = TRUE;

	mov	edx, 1

; 1104 : 				Timer[10] = 5;

	mov	DWORD PTR ?Timer@@3PAHA+40, edi
	mov	DWORD PTR ?g_bCast@@3HA, edx		; g_bCast
$LN167@DXW_MainLo:

; 1105 : 			}
; 1106 : 			//ÀÌµ¿ ¹× Á¡ÇÁ ·ÎÁ÷
; 1107 : 			///////////////////////
; 1108 : 			///////////////////////
; 1109 : 			///////////////////////
; 1110 : 			///////////////////////
; 1111 : 			//				g_BPos.x += 1;
; 1112 : 
; 1113 : 				if (g_BPos.x + 60 < g_Pos.x && g_bCast == FALSE) //º¸½º ¿À¸¥ÂÊ ÀüÈ¯

	mov	ecx, DWORD PTR ?g_BPos@@3UtagPOINT@@A
	mov	edi, DWORD PTR ?g_Pos@@3UtagPOINT@@A
	lea	eax, DWORD PTR [ecx+60]
	cmp	eax, edi
	jge	SHORT $LN168@DXW_MainLo
	test	edx, edx
	jne	SHORT $LN168@DXW_MainLo

; 1114 : 				{
; 1115 : 					g_bBLR = TRUE;

	mov	DWORD PTR ?g_bBLR@@3HA, 1		; g_bBLR

; 1116 : 					g_bBLL = FALSE;

	mov	DWORD PTR ?g_bBLL@@3HA, edx		; g_bBLL
	jmp	SHORT $LN170@DXW_MainLo
$LN168@DXW_MainLo:

; 1117 : 				}
; 1118 : 				else if (g_BPos.x > g_Pos.x && g_bCast == FALSE) //º¸½º ¿ÞÂÊ ÀüÈ¯

	cmp	ecx, edi
	jle	SHORT $LN170@DXW_MainLo
	test	edx, edx
	jne	SHORT $LN170@DXW_MainLo

; 1119 : 				{
; 1120 : 					g_bBLR = FALSE;

	mov	DWORD PTR ?g_bBLR@@3HA, edx		; g_bBLR

; 1121 : 					g_bBLL = TRUE;

	mov	DWORD PTR ?g_bBLL@@3HA, 1		; g_bBLL
$LN170@DXW_MainLo:

; 1122 : 				}
; 1123 : 				if (g_BPos.x + 300 < g_Pos.x && g_bCast == FALSE) //º¸½º ¿À¸¥ÂÊ ÀÌµ¿

	lea	eax, DWORD PTR [ecx+300]
	cmp	eax, edi
	jge	SHORT $LN171@DXW_MainLo
	test	edx, edx
	jne	SHORT $LN171@DXW_MainLo

; 1124 : 				{
; 1125 : 					if (BossAtt == FALSE)

	cmp	DWORD PTR ?BossAtt@@3HA, edx		; BossAtt
	jne	SHORT $LN173@DXW_MainLo

; 1126 : 					{
; 1127 : 						g_BPos.x += 1;

	inc	ecx
	mov	DWORD PTR ?g_BPos@@3UtagPOINT@@A, ecx
$LN173@DXW_MainLo:

; 1128 : 					}
; 1129 : 					g_bBLR = TRUE;

	mov	DWORD PTR ?g_bBLR@@3HA, 1		; g_bBLR

; 1130 : 					g_bBLL = FALSE;

	mov	DWORD PTR ?g_bBLL@@3HA, 0		; g_bBLL
	jmp	SHORT $LN174@DXW_MainLo
$LN171@DXW_MainLo:

; 1131 : 				}
; 1132 : 				else if (g_BPos.x - 200 > g_Pos.x && g_bCast == FALSE) //º¸½º ¿ÞÂÊ ÀÌµ¿

	lea	eax, DWORD PTR [ecx-200]
	cmp	eax, edi
	jle	SHORT $LN174@DXW_MainLo
	test	edx, edx
	jne	SHORT $LN174@DXW_MainLo

; 1133 : 				{
; 1134 : 					if (BossAtt == FALSE)

	cmp	DWORD PTR ?BossAtt@@3HA, edx		; BossAtt
	jne	SHORT $LN175@DXW_MainLo

; 1135 : 					{
; 1136 : 						g_BPos.x -= 1;

	dec	ecx
	mov	DWORD PTR ?g_BPos@@3UtagPOINT@@A, ecx
$LN175@DXW_MainLo:

; 1137 : 					}
; 1138 : 					g_bBLR = FALSE;

	mov	DWORD PTR ?g_bBLR@@3HA, 0		; g_bBLR

; 1139 : 					g_bBLL = TRUE;

	mov	DWORD PTR ?g_bBLL@@3HA, 1		; g_bBLL
$LN174@DXW_MainLo:

; 1140 : 				}
; 1141 : 				if (::GetKeyState(0x58) & 0x80 && g_bAtt == FALSE && g_bRush == FALSE) //°ø°Ý ·ÎÁ÷

	push	88					; 00000058H
	call	esi
	test	al, al
	jns	SHORT $LN1319@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN1319@DXW_MainLo
	cmp	DWORD PTR ?g_bRush@@3HA, 0		; g_bRush
	jne	SHORT $LN1319@DXW_MainLo

; 1142 : 			{
; 1143 : 				if (g_bLookR == TRUE)

	cmp	DWORD PTR ?g_bLookR@@3HA, 1		; g_bLookR
	jne	SHORT $LN177@DXW_MainLo

; 1144 : 				{
; 1145 : 					g_bAR = TRUE;

	mov	DWORD PTR ?g_bAR@@3HA, 1		; g_bAR

; 1146 : 					g_bAtt = TRUE;
; 1147 : 					Aframe = 12;

	mov	DWORD PTR ?Aframe@@3HA, 12		; Aframe, 0000000cH

; 1148 : 					if (g_pDS[3])
; 1149 : 						m_HHSound.Stop(g_pDS[3]);
; 1150 : 					m_HHSound.Play(g_pDS[3], false);

	jmp	SHORT $LN1455@DXW_MainLo
$LN177@DXW_MainLo:

; 1151 : 				}
; 1152 : 				else if (g_bLookL == TRUE)

	cmp	DWORD PTR ?g_bLookL@@3HA, 1		; g_bLookL
	jne	SHORT $LN1319@DXW_MainLo

; 1153 : 				{
; 1154 : 					g_bAL = TRUE;

	mov	DWORD PTR ?g_bAL@@3HA, 1		; g_bAL

; 1155 : 					g_bAtt = TRUE;
; 1156 : 					Aframe = 0;

	mov	DWORD PTR ?Aframe@@3HA, 0		; Aframe
$LN1455@DXW_MainLo:

; 1157 : 					if (g_pDS[3])
; 1158 : 						m_HHSound.Stop(g_pDS[3]);
; 1159 : 					m_HHSound.Play(g_pDS[3], false);
; 1160 : 				}
; 1161 : 			}
; 1162 : 			//ÀÌµ¿ ¹× Á¡ÇÁ ·ÎÁ÷ ³¡
; 1163 : 			//// Ç¥¸é Å¬¸®¾î	
; 1164 : 			//_FillSurface(g_pDDSBack, 0x00000000);
; 1165 : 			nX = g_Pos.x;

	mov	eax, DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+12
	mov	DWORD PTR ?g_bAtt@@3HA, 1		; g_bAtt
	test	eax, eax
	je	SHORT $LN181@DXW_MainLo
	push	eax
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Stop@CHHSound@@QAEXPAUIDirectSoundBuffer@@@Z ; CHHSound::Stop
	mov	eax, DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+12
$LN181@DXW_MainLo:
	push	0
	push	eax
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Play@CHHSound@@QAEXPAUIDirectSoundBuffer@@_N@Z ; CHHSound::Play
$LN1319@DXW_MainLo:

; 1166 : 			nY = g_Pos.y;
; 1167 : 			bnX = g_BPos.x;
; 1168 : 			bnY = g_BPos.y;
; 1169 : 			SnX = nX;
; 1170 : 			SnY = nY - 65;
; 1171 : 			//ÇÃ·¹ÀÌ¾î ÇÇ°Ý·ºÆ® ¼³Á¤
; 1172 : 			if (g_bLookL)

	cmp	DWORD PTR ?g_bLookL@@3HA, 0		; g_bLookL
	mov	edi, DWORD PTR ?g_Pos@@3UtagPOINT@@A+4
	mov	ecx, DWORD PTR ?g_BPos@@3UtagPOINT@@A
	mov	eax, DWORD PTR ?g_BPos@@3UtagPOINT@@A+4
	mov	esi, DWORD PTR ?g_Pos@@3UtagPOINT@@A
	mov	DWORD PTR _nY$2$[ebp], edi
	mov	DWORD PTR _bnX$1$[ebp], ecx
	mov	DWORD PTR _bnY$1$[ebp], eax
	je	SHORT $LN182@DXW_MainLo

; 1173 : 			{
; 1174 : 				PHIT = { nX + 11,nY + 10,nX + 45,nY + 80 };

	lea	eax, DWORD PTR [esi+11]
	mov	DWORD PTR $T24[ebp], eax
	lea	eax, DWORD PTR [edi+10]
	mov	DWORD PTR $T24[ebp+4], eax
	lea	eax, DWORD PTR [esi+45]
	jmp	SHORT $LN1456@DXW_MainLo
$LN182@DXW_MainLo:

; 1175 : 			}
; 1176 : 			else if (g_bLookR)

	cmp	DWORD PTR ?g_bLookR@@3HA, 0		; g_bLookR
	je	SHORT $LN184@DXW_MainLo

; 1177 : 			{
; 1178 : 				PHIT = { nX + 25,nY + 10,nX + 58,nY + 80 };

	lea	eax, DWORD PTR [esi+25]
	mov	DWORD PTR $T23[ebp], eax
	lea	eax, DWORD PTR [edi+10]
	mov	DWORD PTR $T23[ebp+4], eax
	lea	eax, DWORD PTR [esi+58]
$LN1456@DXW_MainLo:

; 1179 : 			}
; 1180 : 			//Ä³½ºÆÃ ¾Ö´Ï¸ÞÀÌ¼Ç
; 1181 : 			if (g_bCast == TRUE && g_bBLL ==TRUE)

	mov	DWORD PTR $T23[ebp+8], eax
	lea	eax, DWORD PTR [edi+80]
	mov	DWORD PTR $T23[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T23[ebp]
	mov	eax, DWORD PTR _bnY$1$[ebp]
	movups	XMMWORD PTR ?PHIT@@3UtagRECT@@A, xmm0
$LN184@DXW_MainLo:
	mov	edx, DWORD PTR ?g_bCast@@3HA		; g_bCast
	cmp	edx, 1
	jne	SHORT $LN1320@DXW_MainLo
	add	eax, -30				; ffffffe2H
	mov	DWORD PTR $T26[ebp], eax
	cmp	DWORD PTR ?g_bBLL@@3HA, edx		; g_bBLL
	jne	SHORT $LN1277@DXW_MainLo

; 1182 : 			{
; 1183 : 				::__PutAnimeSprite(g_pDDSCast, bnX, bnY - 30, 20, CAframe, 192, 192, 0);

	push	0
	push	192					; 000000c0H
	push	192					; 000000c0H
	push	DWORD PTR ?CAframe@@3HA			; CAframe
	push	20					; 00000014H
	push	eax
	push	ecx
	push	DWORD PTR ?g_pDDSCast@@3PAUIDirectDrawSurface7@@A ; g_pDDSCast
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite

; 1184 : 			}
; 1185 : 			if (g_bCast == TRUE && g_bBLR == TRUE)

	mov	edx, DWORD PTR ?g_bCast@@3HA		; g_bCast
	add	esp, 32					; 00000020H
	cmp	edx, 1
	jne	SHORT $LN1320@DXW_MainLo
	mov	ecx, DWORD PTR _bnX$1$[ebp]
	mov	eax, DWORD PTR $T26[ebp]
$LN1277@DXW_MainLo:
	cmp	DWORD PTR ?g_bBLR@@3HA, 1		; g_bBLR
	jne	SHORT $LN1320@DXW_MainLo

; 1186 : 			{
; 1187 : 				::__PutAnimeSprite(g_pDDSCast, bnX-20, bnY - 30, 20, CAframe, 192, 192, 0);

	push	0
	push	192					; 000000c0H
	push	192					; 000000c0H
	push	DWORD PTR ?CAframe@@3HA			; CAframe
	push	20					; 00000014H
	push	eax
	lea	eax, DWORD PTR [ecx-20]
	push	eax
	push	DWORD PTR ?g_pDDSCast@@3PAUIDirectDrawSurface7@@A ; g_pDDSCast
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	mov	edx, DWORD PTR ?g_bCast@@3HA		; g_bCast
	add	esp, 32					; 00000020H
$LN1320@DXW_MainLo:

; 1188 : 			}
; 1189 : 			if (Timer[10] > 0 && g_bCast == TRUE)

	mov	eax, DWORD PTR ?Timer@@3PAHA+40
	test	eax, eax
	jle	SHORT $LN1073@DXW_MainLo
	cmp	edx, 1
	jne	SHORT $LN1321@DXW_MainLo

; 1190 : 			{
; 1191 : 				Timer[10] -= 1;

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+40, eax
$LN1321@DXW_MainLo:

; 1197 : 			}
; 1198 : 			if (CAframe == 20)

	mov	eax, DWORD PTR ?CAframe@@3HA		; CAframe
	jmp	SHORT $LN189@DXW_MainLo
$LN1073@DXW_MainLo:

; 1192 : 			}
; 1193 : 			else if (Timer[10] <= 0 && CAframe <= 19 && g_bCast == TRUE)

	mov	eax, DWORD PTR ?CAframe@@3HA		; CAframe
	cmp	eax, 19					; 00000013H
	jg	SHORT $LN189@DXW_MainLo
	cmp	edx, 1
	jne	SHORT $LN189@DXW_MainLo

; 1194 : 			{
; 1195 : 				CAframe++;

	inc	eax

; 1196 : 				Timer[10] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+40, 2
	mov	DWORD PTR ?CAframe@@3HA, eax		; CAframe
$LN189@DXW_MainLo:

; 1197 : 			}
; 1198 : 			if (CAframe == 20)

	cmp	eax, 20					; 00000014H
	jne	SHORT $LN190@DXW_MainLo

; 1199 : 			{
; 1200 : 				Timer[10] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+40, 0

; 1201 : 				CAframe = 0;

	mov	DWORD PTR ?CAframe@@3HA, 0		; CAframe

; 1202 : 				g_bCast = FALSE;

	mov	DWORD PTR ?g_bCast@@3HA, 0		; g_bCast

; 1203 : 				Timer[12] = (rand() % 200) + 250;

	call	_rand
	cdq
	mov	ecx, 200				; 000000c8H
	idiv	ecx

; 1204 : 				g_bCFire = TRUE;

	mov	DWORD PTR ?g_bCFire@@3HA, 1		; g_bCFire
	add	edx, 250				; 000000faH
	mov	DWORD PTR ?Timer@@3PAHA+48, edx

; 1205 : 			}
; 1206 : 			//¹ß»çµÈ ¸¶¹ý ¾Ö´Ï¸ÞÀÌ¼Ç
; 1207 : 			if (g_bCFire == TRUE && g_bBLL == TRUE && g_bCRight == FALSE && g_bCLeft == FALSE)

	jmp	SHORT $LN1089@DXW_MainLo
$LN190@DXW_MainLo:
	cmp	DWORD PTR ?g_bCFire@@3HA, 1		; g_bCFire
	jne	$LN1324@DXW_MainLo
$LN1089@DXW_MainLo:
	cmp	DWORD PTR ?g_bBLL@@3HA, 1		; g_bBLL
	jne	SHORT $LN1322@DXW_MainLo
	cmp	DWORD PTR ?g_bCRight@@3HA, 0		; g_bCRight
	jne	SHORT $LN1322@DXW_MainLo
	cmp	DWORD PTR ?g_bCLeft@@3HA, 0		; g_bCLeft
	mov	edx, DWORD PTR _bnX$1$[ebp]
	jne	SHORT $LN1323@DXW_MainLo

; 1208 : 			{
; 1209 : 				cx = bnX - 130;
; 1210 : 				cy = bnY - 330;

	mov	eax, DWORD PTR _bnY$1$[ebp]
	lea	ecx, DWORD PTR [edx-130]
	add	eax, -330				; fffffeb6H
	mov	DWORD PTR ?cx@@3HA, ecx			; cx
	mov	DWORD PTR ?cy@@3HA, eax			; cy

; 1211 : 				g_bCLeft = TRUE;
; 1212 : 				Timer[11] = 3;

	mov	eax, 3
	mov	DWORD PTR ?g_bCLeft@@3HA, 1		; g_bCLeft
	mov	DWORD PTR ?Timer@@3PAHA+44, eax
	jmp	SHORT $LN1090@DXW_MainLo
$LN1322@DXW_MainLo:
	mov	edx, DWORD PTR _bnX$1$[ebp]
$LN1323@DXW_MainLo:

; 1213 : 			}
; 1214 : 			if (g_bCFire == TRUE && g_bBLR == TRUE && g_bCRight == FALSE && g_bCLeft == FALSE)

	mov	ecx, DWORD PTR ?cx@@3HA			; cx
	mov	eax, DWORD PTR ?Timer@@3PAHA+44
$LN1090@DXW_MainLo:
	cmp	DWORD PTR ?g_bBLR@@3HA, 1		; g_bBLR
	jne	SHORT $LN192@DXW_MainLo
	cmp	DWORD PTR ?g_bCRight@@3HA, 0		; g_bCRight
	jne	SHORT $LN192@DXW_MainLo
	cmp	DWORD PTR ?g_bCLeft@@3HA, 0		; g_bCLeft
	jne	SHORT $LN192@DXW_MainLo

; 1215 : 			{
; 1216 : 				cx = bnX + 30;
; 1217 : 				cy = bnY - 330;

	mov	eax, DWORD PTR _bnY$1$[ebp]
	lea	ecx, DWORD PTR [edx+30]

; 1218 : 				g_bCRight = TRUE;
; 1219 : 				Timer[11] = 3;
; 1220 : 			}
; 1221 : 			if (g_bCLeft == TRUE)

	mov	edx, DWORD PTR ?CAAframe@@3HA		; CAAframe
	add	eax, -330				; fffffeb6H
	mov	DWORD PTR ?cy@@3HA, eax			; cy
	mov	eax, 3

; 1237 : 				{
; 1238 : 					Timer[11] -= 1;

	dec	eax
	mov	DWORD PTR ?g_bCRight@@3HA, 1		; g_bCRight
	mov	DWORD PTR ?Timer@@3PAHA+44, eax
	jmp	SHORT $LN200@DXW_MainLo
$LN1324@DXW_MainLo:

; 1205 : 			}
; 1206 : 			//¹ß»çµÈ ¸¶¹ý ¾Ö´Ï¸ÞÀÌ¼Ç
; 1207 : 			if (g_bCFire == TRUE && g_bBLL == TRUE && g_bCRight == FALSE && g_bCLeft == FALSE)

	mov	eax, DWORD PTR ?Timer@@3PAHA+44
	mov	ecx, DWORD PTR ?cx@@3HA			; cx
$LN192@DXW_MainLo:

; 1218 : 				g_bCRight = TRUE;
; 1219 : 				Timer[11] = 3;
; 1220 : 			}
; 1221 : 			if (g_bCLeft == TRUE)

	cmp	DWORD PTR ?g_bCLeft@@3HA, 1		; g_bCLeft
	jne	SHORT $LN1326@DXW_MainLo

; 1222 : 			{
; 1223 : 				if (Timer[11] > 0)

	test	eax, eax
	jle	SHORT $LN1457@DXW_MainLo

; 1224 : 				{
; 1225 : 					Timer[11] -= 1;

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+44, eax
$LN1325@DXW_MainLo:

; 1231 : 				}
; 1232 : 				cx -= 7;

	mov	edx, DWORD PTR ?CAAframe@@3HA		; CAAframe
	sub	ecx, 7
	mov	DWORD PTR ?cx@@3HA, ecx			; cx
	jmp	SHORT $LN193@DXW_MainLo
$LN1457@DXW_MainLo:

; 1226 : 				}
; 1227 : 				else if (Timer[11] == 0)

	jne	SHORT $LN1325@DXW_MainLo

; 1228 : 				{
; 1229 : 					CAAframe += 1;

	mov	edx, DWORD PTR ?CAAframe@@3HA		; CAAframe

; 1230 : 					Timer[11] = 3;

	mov	eax, 3
	inc	edx
	mov	DWORD PTR ?Timer@@3PAHA+44, eax

; 1231 : 				}
; 1232 : 				cx -= 7;

	sub	ecx, 7
	mov	DWORD PTR ?cx@@3HA, ecx			; cx
	jmp	SHORT $LN193@DXW_MainLo
$LN1326@DXW_MainLo:

; 1218 : 				g_bCRight = TRUE;
; 1219 : 				Timer[11] = 3;
; 1220 : 			}
; 1221 : 			if (g_bCLeft == TRUE)

	mov	edx, DWORD PTR ?CAAframe@@3HA		; CAAframe
$LN193@DXW_MainLo:

; 1233 : 			}
; 1234 : 			if (g_bCRight == TRUE)

	cmp	DWORD PTR ?g_bCRight@@3HA, 1		; g_bCRight
	jne	SHORT $LN197@DXW_MainLo

; 1235 : 			{
; 1236 : 				if (Timer[11] > 0)

	test	eax, eax
	jle	SHORT $LN1458@DXW_MainLo

; 1237 : 				{
; 1238 : 					Timer[11] -= 1;

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+44, eax
	jmp	SHORT $LN200@DXW_MainLo
$LN1458@DXW_MainLo:

; 1239 : 				}
; 1240 : 				else if (Timer[11] == 0)

	jne	SHORT $LN200@DXW_MainLo

; 1241 : 				{
; 1242 : 					CAAframe += 1;

	inc	edx

; 1243 : 					Timer[11] = 3;

	mov	DWORD PTR ?Timer@@3PAHA+44, 3
$LN200@DXW_MainLo:

; 1244 : 				}
; 1245 : 				cx += 7;

	add	ecx, 7
	mov	DWORD PTR ?cx@@3HA, ecx			; cx
$LN197@DXW_MainLo:

; 1246 : 			}
; 1247 : 			if (CAAframe == 10)

	xor	eax, eax
	cmp	edx, 10					; 0000000aH
	cmove	edx, eax
	mov	DWORD PTR ?CAAframe@@3HA, edx		; CAAframe

; 1248 : 			{
; 1249 : 				CAAframe = 0;
; 1250 : 			}
; 1251 : 			if (cx < -100 || cx > HRES -200 && g_bCFire == TRUE)

	cmp	ecx, -100				; ffffff9cH
	jl	$LN204@DXW_MainLo
	cmp	ecx, 824				; 00000338H
	jle	SHORT $LN202@DXW_MainLo
	cmp	DWORD PTR ?g_bCFire@@3HA, 1		; g_bCFire
	je	SHORT $LN204@DXW_MainLo
$LN202@DXW_MainLo:

; 1261 : 			}
; 1262 : 			else if (cx > -100 && cx < HRES - 200 && g_bCFire == TRUE)

	lea	eax, DWORD PTR [ecx+99]
	cmp	eax, 922				; 0000039aH
	ja	SHORT $LN205@DXW_MainLo
	cmp	DWORD PTR ?g_bCFire@@3HA, 1		; g_bCFire
	jne	$LN206@DXW_MainLo

; 1263 : 			{
; 1264 : 				Cast = { cx + 100,cy + 50,cx + 240,cy + 500 };

	lea	eax, DWORD PTR [ecx+100]
	mov	DWORD PTR $T22[ebp], eax
	mov	eax, DWORD PTR ?cy@@3HA			; cy
	add	eax, 50					; 00000032H
	mov	DWORD PTR $T22[ebp+4], eax
	lea	eax, DWORD PTR [ecx+240]
	mov	DWORD PTR $T22[ebp+8], eax
	mov	eax, DWORD PTR ?cy@@3HA			; cy
	add	eax, 500				; 000001f4H
	mov	DWORD PTR $T22[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T22[ebp]
	movups	XMMWORD PTR ?Cast@@3UtagRECT@@A, xmm0
	jmp	SHORT $LN1093@DXW_MainLo
$LN205@DXW_MainLo:

; 1265 : 			}
; 1266 : 			if (g_bCFire == TRUE)

	cmp	DWORD PTR ?g_bCFire@@3HA, 1		; g_bCFire
	jne	SHORT $LN206@DXW_MainLo
$LN1093@DXW_MainLo:

; 1267 : 			{
; 1268 : 				::__PutAnimeSprite(g_pDDSCastAtt, cx,cy, 10, CAAframe, 344, 522, 0);

	push	0
	push	522					; 0000020aH
	push	344					; 00000158H
	push	edx
	push	10					; 0000000aH
	push	DWORD PTR ?cy@@3HA			; cy
	push	ecx
	push	DWORD PTR ?g_pDDSCastAtt@@3PAUIDirectDrawSurface7@@A ; g_pDDSCastAtt
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	jmp	SHORT $LN206@DXW_MainLo
$LN204@DXW_MainLo:

; 1252 : 			{
; 1253 : 				g_bCFire = FALSE;
; 1254 : 				g_bCLeft = FALSE;
; 1255 : 				g_bCRight = FALSE;
; 1256 : 				CastHit = FALSE;
; 1257 : 				Timer[11] = 0;
; 1258 : 				cx = 0;
; 1259 : 				CAAframe = 0;
; 1260 : 				Cast = {0,0,1,1};

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000
	mov	DWORD PTR ?g_bCFire@@3HA, eax		; g_bCFire
	mov	DWORD PTR ?g_bCLeft@@3HA, eax		; g_bCLeft
	mov	DWORD PTR ?g_bCRight@@3HA, eax		; g_bCRight
	mov	DWORD PTR ?CastHit@@3HA, eax		; CastHit
	mov	DWORD PTR ?Timer@@3PAHA+44, eax
	mov	DWORD PTR ?cx@@3HA, eax			; cx
	mov	DWORD PTR ?CAAframe@@3HA, eax		; CAAframe
	movups	XMMWORD PTR ?Cast@@3UtagRECT@@A, xmm0
$LN206@DXW_MainLo:

; 1269 : 			}
; 1270 : 
; 1271 : 			if (IntersectRect(&rcDest, &Cast, &PHIT) && CastHit == FALSE)

	push	OFFSET ?PHIT@@3UtagRECT@@A		; PHIT
	push	OFFSET ?Cast@@3UtagRECT@@A		; Cast
	push	OFFSET ?rcDest@@3UtagRECT@@A		; rcDest
	call	DWORD PTR __imp__IntersectRect@12
	test	eax, eax
	je	SHORT $LN210@DXW_MainLo
	cmp	DWORD PTR ?CastHit@@3HA, 0		; CastHit
	jne	SHORT $LN210@DXW_MainLo

; 1272 : 			{
; 1273 : 				PlayerHP -= 2000;

	sub	DWORD PTR ?PlayerHP@@3HA, 2000		; PlayerHP, 000007d0H

; 1274 : 				Cast = { 0,0,1,1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000

; 1275 : 				CastHit = TRUE;
; 1276 : 				if (PHplay == FALSE)

	mov	eax, DWORD PTR ?PHplay@@3HA		; PHplay
	mov	DWORD PTR ?CastHit@@3HA, 1		; CastHit
	movups	XMMWORD PTR ?Cast@@3UtagRECT@@A, xmm0
	test	eax, eax
	je	SHORT $LN1294@DXW_MainLo

; 1277 : 				{
; 1278 : 					PHplay = TRUE;
; 1279 : 					Timer[25] = 3;
; 1280 : 					PHframe = 0;
; 1281 : 				}
; 1282 : 				else if (PHplay == TRUE)

	cmp	eax, 1
	jne	SHORT $LN210@DXW_MainLo
$LN1294@DXW_MainLo:

; 1283 : 				{
; 1284 : 					PHplay = TRUE;

	mov	DWORD PTR ?PHplay@@3HA, 1		; PHplay

; 1285 : 					Timer[25] = 3;

	mov	DWORD PTR ?Timer@@3PAHA+100, 3

; 1286 : 					PHframe = 0;

	mov	DWORD PTR ?PHframe@@3HA, 0		; PHframe
$LN210@DXW_MainLo:

; 1287 : 				}
; 1288 : 			}
; 1289 : 			//// º¸½º ½ºÅÄµù
; 1290 : 			if (Timer[17] == 0 && BossAtt == FALSE)

	mov	eax, DWORD PTR ?Timer@@3PAHA+68
	mov	ecx, DWORD PTR ?BossAtt@@3HA		; BossAtt
	test	eax, eax
	jne	SHORT $LN1459@DXW_MainLo
	test	ecx, ecx
	jne	SHORT $LN215@DXW_MainLo

; 1291 : 			{ 
; 1292 : 				Timer[16] = 4;
; 1293 : 				BossAtt = TRUE;
; 1294 : 				if (g_bBLL == TRUE)

	cmp	DWORD PTR ?g_bBLL@@3HA, 1		; g_bBLL
	mov	eax, 4
	mov	DWORD PTR ?Timer@@3PAHA+64, eax
	mov	DWORD PTR ?BossAtt@@3HA, 1		; BossAtt
	jne	SHORT $LN213@DXW_MainLo

; 1295 : 				{
; 1296 : 					BKframe = 0;
; 1297 : 					BAL = TRUE;
; 1298 : 					BAR = FALSE;

	mov	DWORD PTR ?BAR@@3HA$1[ebp], ecx
	lea	edx, DWORD PTR [ecx+1]
	jmp	SHORT $LN214@DXW_MainLo
$LN213@DXW_MainLo:

; 1299 : 				}
; 1300 : 				else { BKframe = 11; BAR = TRUE; BAL = FALSE; }

	mov	DWORD PTR ?BAR@@3HA$1[ebp], 1
	mov	ecx, 11					; 0000000bH
	xor	edx, edx
$LN214@DXW_MainLo:
	mov	edi, DWORD PTR ?BAR@@3HA$1[ebp]
	mov	DWORD PTR ?BAL@@3HA, edx		; BAL
	mov	DWORD PTR ?BKframe@@3HA, ecx		; BKframe
	mov	DWORD PTR ?BAR@@3HA, edi		; BAR
	jmp	SHORT $LN1094@DXW_MainLo
$LN1459@DXW_MainLo:

; 1301 : 			}
; 1302 : 			else if (Timer[17] > 0)

	jle	SHORT $LN215@DXW_MainLo

; 1303 : 			{
; 1304 : 				Timer[17] -= 1;

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+68, eax
$LN215@DXW_MainLo:

; 1305 : 			}
; 1306 : 			if (BossAtt == TRUE)

	mov	edx, DWORD PTR ?BAL@@3HA		; BAL
	cmp	ecx, 1
	mov	ecx, DWORD PTR ?BKframe@@3HA		; BKframe
	jne	$LN1327@DXW_MainLo
	mov	edi, DWORD PTR ?BAR@@3HA		; BAR
	mov	eax, DWORD PTR ?Timer@@3PAHA+64
	mov	DWORD PTR ?BAR@@3HA$1[ebp], edi
$LN1094@DXW_MainLo:

; 1307 : 			{
; 1308 : 				if (BAL == TRUE)

	cmp	edx, 1
	jne	SHORT $LN217@DXW_MainLo

; 1309 : 				{
; 1310 : 					::__PutAnimeSprite(g_pDDSBossAtt, bnX-273, bnY-111, 12, BKframe, 593, 321, 0);

	mov	eax, DWORD PTR _bnY$1$[ebp]
	push	0
	push	321					; 00000141H
	push	593					; 00000251H
	push	ecx
	push	12					; 0000000cH
	add	eax, -111				; ffffff91H
	push	eax
	mov	eax, DWORD PTR _bnX$1$[ebp]
	add	eax, -273				; fffffeefH
	push	eax
	push	DWORD PTR ?g_pDDSBossAtt@@3PAUIDirectDrawSurface7@@A ; g_pDDSBossAtt
	jmp	SHORT $LN1460@DXW_MainLo
$LN217@DXW_MainLo:

; 1311 : 				}
; 1312 : 				else if (BAR == TRUE)

	cmp	DWORD PTR ?BAR@@3HA$1[ebp], 1
	mov	edi, DWORD PTR _nY$2$[ebp]
	jne	SHORT $LN219@DXW_MainLo

; 1313 : 				{
; 1314 : 					::__PutAnimeSprite(g_pDDSBossAttR, bnX-147, bnY-111, 12, BKframe, 593, 321, 0);

	mov	eax, DWORD PTR _bnY$1$[ebp]
	push	0
	push	321					; 00000141H
	push	593					; 00000251H
	push	ecx
	push	12					; 0000000cH
	add	eax, -111				; ffffff91H
	push	eax
	mov	eax, DWORD PTR _bnX$1$[ebp]
	add	eax, -147				; ffffff6dH
	push	eax
	push	DWORD PTR ?g_pDDSBossAttR@@3PAUIDirectDrawSurface7@@A ; g_pDDSBossAttR
$LN1460@DXW_MainLo:

; 1315 : 				}
; 1316 : 				if (Timer[16] > 0)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	mov	edi, DWORD PTR ?BAR@@3HA		; BAR
	add	esp, 32					; 00000020H
	mov	edx, DWORD PTR ?BAL@@3HA		; BAL
	mov	ecx, DWORD PTR ?BKframe@@3HA		; BKframe
	mov	eax, DWORD PTR ?Timer@@3PAHA+64
	mov	DWORD PTR ?BAR@@3HA$1[ebp], edi
	mov	edi, DWORD PTR _nY$2$[ebp]
$LN219@DXW_MainLo:
	test	eax, eax
	jle	SHORT $LN1461@DXW_MainLo

; 1317 : 				{
; 1318 : 					Timer[16] -= 1;

	dec	eax
	jmp	SHORT $LN1462@DXW_MainLo
$LN1461@DXW_MainLo:

; 1319 : 				}
; 1320 : 				else if (Timer[16] == 0)

	jne	SHORT $LN231@DXW_MainLo

; 1321 : 				{
; 1322 : 					if (BAL == TRUE)

	cmp	edx, 1
	jne	SHORT $LN223@DXW_MainLo

; 1323 : 					{
; 1324 : 						BKframe++;

	inc	ecx
	jmp	SHORT $LN1463@DXW_MainLo
$LN223@DXW_MainLo:

; 1325 : 					}
; 1326 : 					else if (BAR == TRUE)

	cmp	DWORD PTR ?BAR@@3HA$1[ebp], 1
	jne	SHORT $LN225@DXW_MainLo

; 1327 : 					{
; 1328 : 						BKframe--;

	dec	ecx
$LN1463@DXW_MainLo:

; 1329 : 					}
; 1330 : 					if (BKframe < 5 && BAL == TRUE)

	mov	DWORD PTR ?BKframe@@3HA, ecx		; BKframe
$LN225@DXW_MainLo:
	cmp	ecx, 5
	jge	SHORT $LN1464@DXW_MainLo
	cmp	edx, 1
	jne	SHORT $LN226@DXW_MainLo

; 1331 : 					{
; 1332 : 						Timer[16] = 8;

	lea	eax, DWORD PTR [edx+7]
	jmp	SHORT $LN1465@DXW_MainLo
$LN226@DXW_MainLo:

; 1333 : 					}
; 1334 : 					else if (BKframe > 5 && BAL == TRUE)

	cmp	ecx, 5
$LN1464@DXW_MainLo:
	jle	SHORT $LN228@DXW_MainLo
	cmp	edx, 1
	cmove	eax, DWORD PTR tv11976[ebp]
$LN1465@DXW_MainLo:

; 1335 : 					{
; 1336 : 						Timer[16] = 5;
; 1337 : 					}
; 1338 : 					if (BKframe >8 && BAR == TRUE)

	mov	DWORD PTR ?Timer@@3PAHA+64, eax
$LN228@DXW_MainLo:
	cmp	ecx, 8
	jle	SHORT $LN1466@DXW_MainLo
	cmp	DWORD PTR ?BAR@@3HA$1[ebp], 1
	jne	SHORT $LN229@DXW_MainLo

; 1339 : 					{
; 1340 : 						Timer[16] = 8;

	mov	DWORD PTR ?Timer@@3PAHA+64, 8
	jmp	SHORT $LN231@DXW_MainLo
$LN229@DXW_MainLo:

; 1341 : 					}
; 1342 : 					else if (BKframe < 8 && BAR == TRUE)

	cmp	ecx, 8
$LN1466@DXW_MainLo:
	jge	SHORT $LN231@DXW_MainLo
	cmp	DWORD PTR ?BAR@@3HA$1[ebp], 1
	cmove	eax, DWORD PTR tv11976[ebp]
$LN1462@DXW_MainLo:

; 1343 : 					{
; 1344 : 						Timer[16] = 5;
; 1345 : 					}
; 1346 : 				}
; 1347 : 				if (BKframe == 12 && BAL == TRUE)

	mov	DWORD PTR ?Timer@@3PAHA+64, eax
$LN231@DXW_MainLo:
	cmp	ecx, 12					; 0000000cH
	jne	SHORT $LN232@DXW_MainLo
	cmp	edx, 1
	jne	$LN237@DXW_MainLo

; 1348 : 				{
; 1349 : 					Timer[17] = (rand() % 150) + 200;

	call	_rand
	cdq
	mov	ecx, 150				; 00000096H
	idiv	ecx

; 1350 : 					Timer[16] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+64, 0
	add	edx, 200				; 000000c8H

; 1351 : 					BossAtt = FALSE;

	mov	DWORD PTR ?BossAtt@@3HA, 0		; BossAtt
	mov	DWORD PTR ?Timer@@3PAHA+68, edx

; 1352 : 					BAL = FALSE;

	mov	DWORD PTR ?BAL@@3HA, 0			; BAL

; 1353 : 					BAR = FALSE;

	mov	DWORD PTR ?BAR@@3HA, 0			; BAR

; 1354 : 					KnockHIT = FALSE;

	mov	DWORD PTR ?KnockHIT@@3HA, 0		; KnockHIT

; 1355 : 					BKframe = 0;

	mov	DWORD PTR ?BKframe@@3HA, 0		; BKframe

; 1356 : 					Knock = { 0,0,1,1 };
; 1357 : 				}
; 1358 : 				if (BKframe == 0 && BAR == TRUE)

	jmp	$LN1467@DXW_MainLo
$LN232@DXW_MainLo:
	test	ecx, ecx
	jne	SHORT $LN233@DXW_MainLo
	cmp	DWORD PTR ?BAR@@3HA$1[ebp], 1
	jne	$LN237@DXW_MainLo

; 1359 : 				{
; 1360 : 					Timer[17] = (rand ()% 150)+ 200;

	call	_rand
	cdq
	mov	ecx, 150				; 00000096H
	idiv	ecx

; 1361 : 					Timer[16] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+64, 0
	add	edx, 200				; 000000c8H

; 1362 : 					BossAtt = FALSE;

	mov	DWORD PTR ?BossAtt@@3HA, 0		; BossAtt
	mov	DWORD PTR ?Timer@@3PAHA+68, edx

; 1363 : 					BAL = FALSE;

	mov	DWORD PTR ?BAL@@3HA, 0			; BAL

; 1364 : 					BAR = FALSE;

	mov	DWORD PTR ?BAR@@3HA, 0			; BAR

; 1365 : 					BKframe = 0;

	mov	DWORD PTR ?BKframe@@3HA, 0		; BKframe

; 1366 : 					KnockHIT = FALSE;

	mov	DWORD PTR ?KnockHIT@@3HA, 0		; KnockHIT

; 1367 : 					Knock = { 0,0,1,1 };
; 1368 : 				}
; 1369 : 			}
; 1370 : 			if (BKframe > 4 && BAL == TRUE && KnockHIT == FALSE)

	jmp	$LN1467@DXW_MainLo
$LN1327@DXW_MainLo:

; 1305 : 			}
; 1306 : 			if (BossAtt == TRUE)

	mov	eax, DWORD PTR ?BAR@@3HA		; BAR
	mov	DWORD PTR ?BAR@@3HA$1[ebp], eax
$LN233@DXW_MainLo:

; 1367 : 					Knock = { 0,0,1,1 };
; 1368 : 				}
; 1369 : 			}
; 1370 : 			if (BKframe > 4 && BAL == TRUE && KnockHIT == FALSE)

	cmp	ecx, 4
	jle	SHORT $LN234@DXW_MainLo
	cmp	edx, 1
	jne	SHORT $LN234@DXW_MainLo
	cmp	DWORD PTR ?KnockHIT@@3HA, 0		; KnockHIT
	jne	SHORT $LN234@DXW_MainLo

; 1371 : 			{
; 1372 : 				Knock = { bnX - 183 ,bnY - 20,bnX + 40,bnY + 140 };

	mov	eax, DWORD PTR _bnX$1$[ebp]
	add	eax, -183				; ffffff49H
	mov	DWORD PTR $T21[ebp], eax
	mov	eax, DWORD PTR _bnY$1$[ebp]
	add	eax, -20				; ffffffecH
	mov	DWORD PTR $T21[ebp+4], eax
	mov	eax, DWORD PTR _bnX$1$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR $T21[ebp+8], eax
	mov	eax, DWORD PTR _bnY$1$[ebp]
	add	eax, 140				; 0000008cH
	mov	DWORD PTR $T21[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T21[ebp]
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
$LN234@DXW_MainLo:

; 1373 : 			}
; 1374 : 			if (BKframe <7 && BAR == TRUE && KnockHIT == FALSE)

	mov	eax, DWORD PTR ?BAR@@3HA$1[ebp]
	cmp	ecx, 7
	jge	SHORT $LN235@DXW_MainLo
	cmp	eax, 1
	jne	SHORT $LN235@DXW_MainLo
	cmp	DWORD PTR ?KnockHIT@@3HA, 0		; KnockHIT
	jne	SHORT $LN235@DXW_MainLo

; 1375 : 			{
; 1376 : 				Knock = { bnX + 130 ,bnY - 20,bnX + 353,bnY + 140 };

	mov	eax, DWORD PTR _bnX$1$[ebp]
	add	eax, 130				; 00000082H
	mov	DWORD PTR $T20[ebp], eax
	mov	eax, DWORD PTR _bnY$1$[ebp]
	add	eax, -20				; ffffffecH
	mov	DWORD PTR $T20[ebp+4], eax
	mov	eax, DWORD PTR _bnX$1$[ebp]
	add	eax, 353				; 00000161H
	mov	DWORD PTR $T20[ebp+8], eax
	mov	eax, DWORD PTR _bnY$1$[ebp]
	add	eax, 140				; 0000008cH
	mov	DWORD PTR $T20[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T20[ebp]
	mov	eax, DWORD PTR ?BAR@@3HA$1[ebp]
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
$LN235@DXW_MainLo:

; 1377 : 			}
; 1378 : 			if (BKframe > 6 && BAL == TRUE)

	cmp	ecx, 6
	jle	SHORT $LN1468@DXW_MainLo
	cmp	edx, 1
	jne	SHORT $LN236@DXW_MainLo

; 1379 : 			{
; 1380 : 				Knock = {0,0,1,1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
$LN236@DXW_MainLo:

; 1381 : 			}
; 1382 : 			if (BKframe <6 && BAR == TRUE)

	cmp	ecx, 6
$LN1468@DXW_MainLo:
	jge	SHORT $LN237@DXW_MainLo
	cmp	eax, 1
	jne	SHORT $LN237@DXW_MainLo
$LN1467@DXW_MainLo:

; 1383 : 			{
; 1384 : 				Knock = {0,0,1,1};
; 1385 : 			}
; 1386 : 			if (IntersectRect(&rcDest, &Knock, &PHIT))

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
$LN237@DXW_MainLo:
	push	OFFSET ?PHIT@@3UtagRECT@@A		; PHIT
	push	OFFSET ?Knock@@3UtagRECT@@A		; Knock
	push	OFFSET ?rcDest@@3UtagRECT@@A		; rcDest
	call	DWORD PTR __imp__IntersectRect@12
	test	eax, eax
	je	$LN1332@DXW_MainLo

; 1387 : 			{
; 1388 : 				if (BAR == TRUE && Knockback == FALSE)

	cmp	DWORD PTR ?BAR@@3HA, 1			; BAR
	mov	eax, DWORD PTR ?Knockback@@3HA		; Knockback
	jne	$LN239@DXW_MainLo
	test	eax, eax
	jne	$LN239@DXW_MainLo

; 1389 : 				{
; 1390 : 					Knockspd = 30;
; 1391 : 					Knockback = TRUE;
; 1392 : 					PlayerHP -= 1000;

	sub	DWORD PTR ?PlayerHP@@3HA, 1000		; PlayerHP, 000003e8H

; 1393 : 					KnockHIT = TRUE;
; 1394 : 					Knock = { 0,0,1,1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000

; 1395 : 					if (PHplay == FALSE)

	mov	eax, DWORD PTR ?PHplay@@3HA		; PHplay
	mov	DWORD PTR ?Knockspd@@3HA, 30		; Knockspd, 0000001eH
	mov	DWORD PTR ?Knockback@@3HA, 1		; Knockback
	mov	DWORD PTR ?KnockHIT@@3HA, 1		; KnockHIT
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
	test	eax, eax
	je	SHORT $LN1293@DXW_MainLo

; 1396 : 					{
; 1397 : 						PHplay = TRUE;
; 1398 : 						Timer[25] = 3;
; 1399 : 						PHframe = 0;
; 1400 : 					}
; 1401 : 					else if (PHplay == TRUE)

	cmp	eax, 1
	jne	SHORT $LN243@DXW_MainLo
$LN1293@DXW_MainLo:

; 1402 : 					{
; 1403 : 						PHplay = TRUE;

	mov	DWORD PTR ?PHplay@@3HA, 1		; PHplay

; 1404 : 						Timer[25] = 3;

	mov	DWORD PTR ?Timer@@3PAHA+100, 3

; 1405 : 						PHframe = 0;

	mov	DWORD PTR ?PHframe@@3HA, 0		; PHframe
$LN243@DXW_MainLo:

; 1406 : 					}
; 1407 : 					if (g_bRush == TRUE)

	cmp	DWORD PTR ?g_bRush@@3HA, 1		; g_bRush
	jne	SHORT $LN1329@DXW_MainLo

; 1408 : 					{
; 1409 : 						g_bRush = FALSE;

	mov	DWORD PTR ?g_bRush@@3HA, 0		; g_bRush

; 1410 : 						g_bRushL = FALSE;

	mov	DWORD PTR ?g_bRushL@@3HA, 0		; g_bRushL

; 1411 : 						g_bRushR = FALSE;

	mov	DWORD PTR ?g_bRushR@@3HA, 0		; g_bRushR

; 1412 : 						Timer[9] = 20;

	mov	DWORD PTR ?Timer@@3PAHA+36, 20		; 00000014H

; 1413 : 						Timer[8] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+32, 0

; 1414 : 						Cframe = 0;

	mov	DWORD PTR ?Cframe@@3HA, 0		; Cframe
$LN1329@DXW_MainLo:

; 1415 : 					}
; 1416 : 
; 1417 : 					if (g_bJump == TRUE)

	cmp	DWORD PTR ?g_bJump@@3HA, 1		; g_bJump
	jne	$LN1332@DXW_MainLo

; 1418 : 					{
; 1419 : 						Knockspd = 35;

	mov	DWORD PTR ?Knockspd@@3HA, 35		; Knockspd, 00000023H

; 1420 : 					}
; 1421 : 				}

	jmp	$LN1332@DXW_MainLo
$LN239@DXW_MainLo:

; 1422 : 				else if (BAL == TRUE && Knockback == FALSE)

	cmp	DWORD PTR ?BAL@@3HA, 1			; BAL
	jne	$LN1332@DXW_MainLo
	test	eax, eax
	jne	$LN1332@DXW_MainLo

; 1423 : 				{
; 1424 : 					Knockspd = -30;
; 1425 : 					Knockback = TRUE;
; 1426 : 					KnockHIT = TRUE;
; 1427 : 					PlayerHP -= 1000;

	sub	DWORD PTR ?PlayerHP@@3HA, 1000		; PlayerHP, 000003e8H
	mov	eax, -30				; ffffffe2H

; 1428 : 					Knock = { 0,0,1,1 };
; 1429 : 					if (PHplay == FALSE)

	cmp	DWORD PTR ?PHplay@@3HA, 0		; PHplay
	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000
	mov	DWORD PTR ?Knockback@@3HA, 1		; Knockback
	mov	DWORD PTR ?KnockHIT@@3HA, 1		; KnockHIT
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
	jne	SHORT $LN1330@DXW_MainLo

; 1430 : 					{
; 1431 : 						PHplay = TRUE;

	mov	DWORD PTR ?PHplay@@3HA, 1		; PHplay

; 1432 : 						Timer[25] = 3;

	mov	DWORD PTR ?Timer@@3PAHA+100, 3

; 1433 : 						PHframe = 0;

	mov	DWORD PTR ?PHframe@@3HA, 0		; PHframe
$LN1330@DXW_MainLo:

; 1434 : 					}
; 1435 : 					if (g_bRush == TRUE)

	cmp	DWORD PTR ?g_bRush@@3HA, 1		; g_bRush
	jne	SHORT $LN1331@DXW_MainLo

; 1436 : 					{
; 1437 : 						g_bRush = FALSE;

	mov	DWORD PTR ?g_bRush@@3HA, 0		; g_bRush

; 1438 : 						g_bRushL = FALSE;

	mov	DWORD PTR ?g_bRushL@@3HA, 0		; g_bRushL

; 1439 : 						g_bRushR = FALSE;

	mov	DWORD PTR ?g_bRushR@@3HA, 0		; g_bRushR

; 1440 : 						Timer[9] = 20;

	mov	DWORD PTR ?Timer@@3PAHA+36, 20		; 00000014H

; 1441 : 						Timer[8] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+32, 0

; 1442 : 						Cframe = 0;

	mov	DWORD PTR ?Cframe@@3HA, 0		; Cframe
$LN1331@DXW_MainLo:

; 1443 : 					}
; 1444 : 					if (g_bJump == TRUE)

	cmp	DWORD PTR ?g_bJump@@3HA, 1		; g_bJump
	mov	ecx, -35				; ffffffddH
	cmove	eax, ecx
	mov	DWORD PTR ?Knockspd@@3HA, eax		; Knockspd
$LN1332@DXW_MainLo:

; 1445 : 					{
; 1446 : 						Knockspd = -35;
; 1447 : 					}
; 1448 : 				}
; 1449 : 			}
; 1450 : 			if (p1die == FALSE && BossAtt == FALSE)

	cmp	DWORD PTR ?p1die@@3HA, 0		; p1die
	jne	$LN256@DXW_MainLo
	cmp	DWORD PTR ?BossAtt@@3HA, 0		; BossAtt
	jne	$LN256@DXW_MainLo

; 1451 : 			{
; 1452 : 				BOSS = { bnX + 10 ,bnY,bnX + 170,bnY + 148 };

	mov	ecx, DWORD PTR _bnX$1$[ebp]
	mov	edx, DWORD PTR _bnY$1$[ebp]
	mov	DWORD PTR $T19[ebp+4], edx
	lea	eax, DWORD PTR [ecx+10]
	mov	DWORD PTR $T19[ebp], eax
	lea	eax, DWORD PTR [ecx+170]
	mov	DWORD PTR $T19[ebp+8], eax
	lea	eax, DWORD PTR [edx+148]
	mov	DWORD PTR $T19[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T19[ebp]

; 1453 : 				if (Timer[1] >= 8)

	mov	eax, DWORD PTR ?Timer@@3PAHA+4
	movups	XMMWORD PTR ?BOSS@@3UtagRECT@@A, xmm0
	cmp	eax, 8
	jl	SHORT $LN251@DXW_MainLo

; 1454 : 				{
; 1455 : 					Timer[1] = 0;
; 1456 : 					Bframe++;

	mov	eax, DWORD PTR ?Bframe@@3HA		; Bframe
	inc	eax
	mov	DWORD PTR ?Timer@@3PAHA+4, 0
	mov	DWORD PTR ?Bframe@@3HA, eax		; Bframe
	cmp	eax, 7

; 1457 : 					if (Bframe >= 7)

	jl	SHORT $LN252@DXW_MainLo

; 1458 : 					{
; 1459 : 						Bframe = 0;

	xor	eax, eax
	mov	DWORD PTR ?Bframe@@3HA, eax		; Bframe

; 1460 : 					}
; 1461 : 				}

	jmp	SHORT $LN252@DXW_MainLo
$LN251@DXW_MainLo:

; 1462 : 				else { Timer[1]++; }

	inc	eax
	mov	DWORD PTR ?Timer@@3PAHA+4, eax
	mov	eax, DWORD PTR ?Bframe@@3HA		; Bframe
$LN252@DXW_MainLo:

; 1463 : 				if (g_bBLL == TRUE)

	cmp	DWORD PTR ?g_bBLL@@3HA, 1		; g_bBLL
	jne	SHORT $LN254@DXW_MainLo

; 1464 : 				{
; 1465 : 					::__PutAnimeSprite(g_pDDSTwo, bnX, bnY, 8, Bframe, 174, 148, 0);

	push	0
	push	148					; 00000094H
	push	174					; 000000aeH
	push	eax
	push	8
	push	edx
	push	ecx
	push	DWORD PTR ?g_pDDSTwo@@3PAUIDirectDrawSurface7@@A ; g_pDDSTwo
	jmp	SHORT $LN1469@DXW_MainLo
$LN254@DXW_MainLo:

; 1466 : 				}
; 1467 : 				else if (g_bBLR == TRUE)

	cmp	DWORD PTR ?g_bBLR@@3HA, 1		; g_bBLR
	jne	SHORT $LN256@DXW_MainLo

; 1468 : 				{
; 1469 : 					::__PutAnimeSprite(g_pDDSTwoR, bnX, bnY, 8, Bframe, 174, 148, 0);

	push	0
	push	148					; 00000094H
	push	174					; 000000aeH
	push	eax
	push	8
	push	edx
	push	ecx
	push	DWORD PTR ?g_pDDSTwoR@@3PAUIDirectDrawSurface7@@A ; g_pDDSTwoR
$LN1469@DXW_MainLo:

; 1470 : 				}
; 1471 : 			}
; 1472 : 			if (Timer[0] >= 26)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN256@DXW_MainLo:
	mov	eax, DWORD PTR ?Timer@@3PAHA
	xor	ecx, ecx
	cmp	eax, 26					; 0000001aH
	cmovge	eax, ecx
	mov	DWORD PTR ?Timer@@3PAHA, eax

; 1473 : 			{
; 1474 : 				Timer[0] = 0;
; 1475 : 			}
; 1476 : 			//Ä³¸¯ÅÍ µ¹Áø ¾Ö´Ï¸ÞÀÌ¼Ç
; 1477 : 			if (g_bRush == FALSE)

	cmp	DWORD PTR ?g_bRush@@3HA, ecx		; g_bRush
	jne	$LN1337@DXW_MainLo

; 1478 : 			{
; 1479 : 				//½ºÅÄµù
; 1480 : 				if (g_bLookL == 1 && g_bJump == 0 && g_bLeft == 0 && g_bRight == 0 && g_bAtt == FALSE)

	cmp	DWORD PTR ?g_bLookL@@3HA, 1		; g_bLookL
	jne	SHORT $LN259@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, ecx		; g_bJump
	jne	SHORT $LN259@DXW_MainLo
	cmp	DWORD PTR ?g_bLeft@@3HA, ecx		; g_bLeft
	jne	SHORT $LN259@DXW_MainLo
	cmp	DWORD PTR ?g_bRight@@3HA, ecx		; g_bRight
	jne	SHORT $LN259@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, ecx		; g_bAtt
	jne	SHORT $LN259@DXW_MainLo

; 1481 : 				{
; 1482 : 					::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 0, 86, 81, 0);

	push	ecx
	push	81					; 00000051H
	push	86					; 00000056H
	push	ecx
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A ; g_pDDSOne
	jmp	SHORT $LN1470@DXW_MainLo
$LN259@DXW_MainLo:

; 1483 : 				}
; 1484 : 				else if (g_bLookR == 1 && g_bJump == 0 && g_bLeft == 0 && g_bRight == 0 && g_bAtt == FALSE)

	cmp	DWORD PTR ?g_bLookR@@3HA, 1		; g_bLookR
	jne	SHORT $LN261@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, ecx		; g_bJump
	jne	SHORT $LN261@DXW_MainLo
	cmp	DWORD PTR ?g_bLeft@@3HA, ecx		; g_bLeft
	jne	SHORT $LN261@DXW_MainLo
	cmp	DWORD PTR ?g_bRight@@3HA, ecx		; g_bRight
	jne	SHORT $LN261@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, ecx		; g_bAtt
	jne	SHORT $LN261@DXW_MainLo

; 1485 : 				{
; 1486 : 					::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 8, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	8
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOneR@@3PAUIDirectDrawSurface7@@A ; g_pDDSOneR
$LN1470@DXW_MainLo:

; 1487 : 				}
; 1488 : 				//Á¡ÇÁ
; 1489 : 				if (g_bLookL == 1 && g_bJump == 1 && g_bAtt == FALSE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN261@DXW_MainLo:
	cmp	DWORD PTR ?g_bLookL@@3HA, 1		; g_bLookL
	jne	SHORT $LN262@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 1		; g_bJump
	jne	SHORT $LN262@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN262@DXW_MainLo

; 1490 : 				{
; 1491 : 					::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 3, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	3
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A ; g_pDDSOne
	jmp	SHORT $LN1471@DXW_MainLo
$LN262@DXW_MainLo:

; 1492 : 				}
; 1493 : 				else if (g_bLookR == 1 && g_bJump == 1 && g_bAtt == FALSE)

	cmp	DWORD PTR ?g_bLookR@@3HA, 1		; g_bLookR
	jne	SHORT $LN264@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 1		; g_bJump
	jne	SHORT $LN264@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN264@DXW_MainLo

; 1494 : 				{
; 1495 : 					::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 5, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	5
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOneR@@3PAUIDirectDrawSurface7@@A ; g_pDDSOneR
$LN1471@DXW_MainLo:

; 1496 : 				}
; 1497 : 				//¹«ºù
; 1498 : 				if (g_bLeft == 1 && g_bJump == 0 && Timer[0] < 5 && g_bJump == 0 && g_bAtt == FALSE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN264@DXW_MainLo:
	cmp	DWORD PTR ?g_bLeft@@3HA, 1		; g_bLeft
	jne	$LN271@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	jne	SHORT $LN271@DXW_MainLo
	cmp	DWORD PTR ?Timer@@3PAHA, 5
	jge	SHORT $LN1104@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN1106@DXW_MainLo

; 1499 : 				{
; 1500 : 					::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 1, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	1
	jmp	SHORT $LN1472@DXW_MainLo
$LN1104@DXW_MainLo:

; 1501 : 				}
; 1502 : 				else if (g_bLeft == 1 && g_bJump == 0 && Timer[0] >= 5 && Timer[0] < 12 && g_bAtt == FALSE)

	cmp	DWORD PTR ?Timer@@3PAHA, 12		; 0000000cH
	jge	SHORT $LN1107@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	je	SHORT $LN1473@DXW_MainLo
$LN1106@DXW_MainLo:

; 1503 : 				{
; 1504 : 					::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 0, 86, 81, 0);
; 1505 : 				}
; 1506 : 				else if (g_bLeft == 1 && g_bJump == 0 && Timer[0] >= 12 && Timer[0] < 19 && g_bAtt == FALSE)

	cmp	DWORD PTR ?Timer@@3PAHA, 12		; 0000000cH
	jl	SHORT $LN1108@DXW_MainLo
$LN1107@DXW_MainLo:
	cmp	DWORD PTR ?Timer@@3PAHA, 19		; 00000013H
	jge	SHORT $LN1109@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN1108@DXW_MainLo

; 1507 : 				{
; 1508 : 					::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 2, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	2
	jmp	SHORT $LN1472@DXW_MainLo
$LN1108@DXW_MainLo:

; 1509 : 				}
; 1510 : 				else if (g_bLeft == 1 && g_bJump == 0 && Timer[0] >= 19 && g_bAtt == FALSE)

	cmp	DWORD PTR ?Timer@@3PAHA, 19		; 00000013H
	jl	SHORT $LN271@DXW_MainLo
$LN1109@DXW_MainLo:
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN271@DXW_MainLo
$LN1473@DXW_MainLo:

; 1511 : 				{
; 1512 : 					::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 0, 86, 81, 0);
; 1513 : 				}
; 1514 : 				if (g_bRight == 1 && g_bJump == 0 && Timer[0] < 5 && g_bAtt == FALSE)

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	0
$LN1472@DXW_MainLo:
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A ; g_pDDSOne
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN271@DXW_MainLo:
	cmp	DWORD PTR ?g_bRight@@3HA, 1		; g_bRight
	jne	$LN278@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	jne	SHORT $LN278@DXW_MainLo
	cmp	DWORD PTR ?Timer@@3PAHA, 5
	jge	SHORT $LN1114@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN1115@DXW_MainLo

; 1515 : 				{
; 1516 : 					::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 7, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	7
	jmp	SHORT $LN1474@DXW_MainLo
$LN1114@DXW_MainLo:

; 1517 : 				}
; 1518 : 				else if (g_bRight == 1 && g_bJump == 0 && Timer[0] >= 5 && Timer[0] < 12 && g_bAtt == FALSE)

	cmp	DWORD PTR ?Timer@@3PAHA, 12		; 0000000cH
	jge	SHORT $LN1116@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	je	SHORT $LN1475@DXW_MainLo
$LN1115@DXW_MainLo:

; 1519 : 				{
; 1520 : 					::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 8, 86, 81, 0);
; 1521 : 				}
; 1522 : 				else if (g_bRight == 1 && g_bJump == 0 && Timer[0] >= 12 && Timer[0] < 19 && g_bAtt == FALSE)

	cmp	DWORD PTR ?Timer@@3PAHA, 12		; 0000000cH
	jl	SHORT $LN1117@DXW_MainLo
$LN1116@DXW_MainLo:
	cmp	DWORD PTR ?Timer@@3PAHA, 19		; 00000013H
	jge	SHORT $LN1118@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN1117@DXW_MainLo

; 1523 : 				{
; 1524 : 					::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 6, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	6
	jmp	SHORT $LN1474@DXW_MainLo
$LN1117@DXW_MainLo:

; 1525 : 				}
; 1526 : 				else if (g_bRight == 1 && g_bJump == 0 && Timer[0] >= 19 && g_bAtt == FALSE)

	cmp	DWORD PTR ?Timer@@3PAHA, 19		; 00000013H
	jl	SHORT $LN278@DXW_MainLo
$LN1118@DXW_MainLo:
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN278@DXW_MainLo
$LN1475@DXW_MainLo:

; 1527 : 				{
; 1528 : 					::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 8, 86, 81, 0);
; 1529 : 				}
; 1530 : 				if (g_bAtt == TRUE && g_bAR == TRUE && Timer[4] < 7)

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	8
$LN1474@DXW_MainLo:
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOneR@@3PAUIDirectDrawSurface7@@A ; g_pDDSOneR
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN278@DXW_MainLo:
	cmp	DWORD PTR ?g_bAtt@@3HA, 1		; g_bAtt
	jne	$LN1336@DXW_MainLo
	cmp	DWORD PTR ?g_bAR@@3HA, 1		; g_bAR
	mov	eax, DWORD PTR ?Timer@@3PAHA+16
	jne	SHORT $LN1123@DXW_MainLo
	cmp	eax, 7
	jge	SHORT $LN1125@DXW_MainLo

; 1531 : 				{
; 1532 : 					::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 1, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	1
	jmp	SHORT $LN1476@DXW_MainLo
$LN1125@DXW_MainLo:

; 1533 : 				}
; 1534 : 				else if (g_bAtt == TRUE && g_bAR == TRUE && Timer[4] >= 7 && Timer[4] < 14)

	cmp	eax, 14					; 0000000eH
	jge	SHORT $LN1127@DXW_MainLo

; 1535 : 				{
; 1536 : 					::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 2, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	2
	jmp	SHORT $LN1476@DXW_MainLo
$LN1127@DXW_MainLo:

; 1537 : 				}
; 1538 : 				else if (g_bAtt == TRUE && g_bAR == TRUE && Timer[4] >= 14 && Timer[4] < 21)

	cmp	eax, 21					; 00000015H
	jge	SHORT $LN1129@DXW_MainLo

; 1539 : 				{
; 1540 : 					::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 3, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	3
	jmp	SHORT $LN1476@DXW_MainLo
$LN1129@DXW_MainLo:

; 1541 : 				}
; 1542 : 				else if (g_bAtt == TRUE && g_bAR == TRUE && Timer[4] >= 21 && Timer[4] < 27)

	cmp	eax, 27					; 0000001bH
	jge	SHORT $LN1131@DXW_MainLo

; 1543 : 				{
; 1544 : 					::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 4, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	4
	jmp	SHORT $LN1476@DXW_MainLo
$LN1131@DXW_MainLo:

; 1545 : 				}
; 1546 : 				else if (g_bAtt == TRUE && g_bAR == TRUE && Timer[4] >= 27 && Timer[4] < 39)

	cmp	eax, 39					; 00000027H
	jge	SHORT $LN1123@DXW_MainLo

; 1547 : 				{
; 1548 : 					::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 0, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	0
$LN1476@DXW_MainLo:

; 1549 : 				}
; 1550 : 				if (g_bAtt == TRUE && g_bAL == TRUE && Timer[4] < 7)

	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOneR@@3PAUIDirectDrawSurface7@@A ; g_pDDSOneR
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	cmp	DWORD PTR ?g_bAtt@@3HA, 1		; g_bAtt
	jne	$LN1336@DXW_MainLo

; 1527 : 				{
; 1528 : 					::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 8, 86, 81, 0);
; 1529 : 				}
; 1530 : 				if (g_bAtt == TRUE && g_bAR == TRUE && Timer[4] < 7)

	mov	eax, DWORD PTR ?Timer@@3PAHA+16
$LN1123@DXW_MainLo:

; 1549 : 				}
; 1550 : 				if (g_bAtt == TRUE && g_bAL == TRUE && Timer[4] < 7)

	cmp	DWORD PTR ?g_bAL@@3HA, 1		; g_bAL
	jne	SHORT $LN1136@DXW_MainLo
	cmp	eax, 7
	jge	SHORT $LN1138@DXW_MainLo

; 1551 : 				{
; 1552 : 					::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 4, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	4
	jmp	SHORT $LN1477@DXW_MainLo
$LN1138@DXW_MainLo:

; 1553 : 				}
; 1554 : 				else if (g_bAtt == TRUE && g_bAL == TRUE && Timer[4] >= 7 && Timer[4] < 14)

	cmp	eax, 14					; 0000000eH
	jge	SHORT $LN1140@DXW_MainLo

; 1555 : 				{
; 1556 : 					::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 5, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	5
	jmp	SHORT $LN1477@DXW_MainLo
$LN1140@DXW_MainLo:

; 1557 : 				}
; 1558 : 				else if (g_bAtt == TRUE && g_bAL == TRUE && Timer[4] >= 14 && Timer[4] < 21)

	cmp	eax, 21					; 00000015H
	jge	SHORT $LN1142@DXW_MainLo

; 1559 : 				{
; 1560 : 					::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 6, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	6
	jmp	SHORT $LN1477@DXW_MainLo
$LN1142@DXW_MainLo:

; 1561 : 				}
; 1562 : 				else if (g_bAtt == TRUE && g_bAL == TRUE && Timer[4] >= 21 && Timer[4] < 27)

	cmp	eax, 27					; 0000001bH
	jge	SHORT $LN1144@DXW_MainLo

; 1563 : 				{
; 1564 : 					::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 7, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	7
	jmp	SHORT $LN1477@DXW_MainLo
$LN1144@DXW_MainLo:

; 1565 : 				}
; 1566 : 				else if (g_bAtt == TRUE && g_bAL == TRUE && Timer[4] >= 27 && Timer[4] < 39)

	cmp	eax, 39					; 00000027H
	jge	SHORT $LN1136@DXW_MainLo

; 1567 : 				{
; 1568 : 					::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 8, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	8
$LN1477@DXW_MainLo:

; 1569 : 				}
; 1570 : 				if (g_bAtt == TRUE && Timer[4] < 38)

	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A ; g_pDDSOne
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	cmp	DWORD PTR ?g_bAtt@@3HA, 1		; g_bAtt
	jne	SHORT $LN1336@DXW_MainLo
	mov	eax, DWORD PTR ?Timer@@3PAHA+16
$LN1136@DXW_MainLo:
	cmp	eax, 38					; 00000026H
	jge	SHORT $LN1336@DXW_MainLo

; 1571 : 				{
; 1572 : 					Timer[4]++;

	inc	eax
	mov	DWORD PTR ?Timer@@3PAHA+16, eax

; 1573 : 				}
; 1574 : 				else

	jmp	SHORT $LN1337@DXW_MainLo
$LN1336@DXW_MainLo:

; 1575 : 				{
; 1576 : 					Timer[4] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+16, 0
$LN1337@DXW_MainLo:

; 1577 : 				}
; 1578 : 			}
; 1579 : 			if (g_bRushL == TRUE)

	cmp	DWORD PTR ?g_bRushL@@3HA, 1		; g_bRushL
	jne	SHORT $LN299@DXW_MainLo

; 1580 : 			{
; 1581 : 				::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 7, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	7
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A ; g_pDDSOne
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite

; 1582 : 				::__PutAnimeSprite(g_pDDSCHARGE, nX - 170, nY - 100, 8, Cframe, 511, 263, 0);

	push	0
	push	263					; 00000107H
	push	511					; 000001ffH
	push	DWORD PTR ?Cframe@@3HA			; Cframe
	lea	eax, DWORD PTR [edi-100]
	push	8
	push	eax
	lea	eax, DWORD PTR [esi-170]
	push	eax
	push	DWORD PTR ?g_pDDSCHARGE@@3PAUIDirectDrawSurface7@@A ; g_pDDSCHARGE
	jmp	SHORT $LN1478@DXW_MainLo
$LN299@DXW_MainLo:

; 1583 : 			}
; 1584 : 			else if (g_bRushR == TRUE)

	cmp	DWORD PTR ?g_bRushR@@3HA, 1		; g_bRushR
	jne	SHORT $LN301@DXW_MainLo

; 1585 : 			{
; 1586 : 				::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 1, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	1
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOneR@@3PAUIDirectDrawSurface7@@A ; g_pDDSOneR
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite

; 1587 : 				::__PutAnimeSprite(g_pDDSCHARGER, nX - 250, nY - 100, 8, Cframe, 511, 263, 0);

	push	0
	push	263					; 00000107H
	push	511					; 000001ffH
	push	DWORD PTR ?Cframe@@3HA			; Cframe
	lea	eax, DWORD PTR [edi-100]
	push	8
	push	eax
	lea	eax, DWORD PTR [esi-250]
	push	eax
	push	DWORD PTR ?g_pDDSCHARGER@@3PAUIDirectDrawSurface7@@A ; g_pDDSCHARGER
$LN1478@DXW_MainLo:

; 1588 : 			}
; 1589 : 			if (g_bAtt == TRUE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 64					; 00000040H
$LN301@DXW_MainLo:
	cmp	DWORD PTR ?g_bAtt@@3HA, 1		; g_bAtt
	jne	$LN311@DXW_MainLo

; 1590 : 			{
; 1591 : 				if (g_bAL == TRUE)

	cmp	DWORD PTR ?g_bAL@@3HA, 1		; g_bAL
	jne	$LN303@DXW_MainLo

; 1592 : 				{
; 1593 : 					if (g_bHit == FALSE)

	cmp	DWORD PTR ?g_bHit@@3HA, 0		; g_bHit
	lea	ecx, DWORD PTR [edi-65]
	jne	SHORT $LN305@DXW_MainLo

; 1594 : 					{
; 1595 : 						HIT = { SnX - 130,SnY + 10,SnX + 90,SnY + 180 };

	lea	eax, DWORD PTR [esi-130]
	mov	DWORD PTR $T18[ebp], eax
	lea	eax, DWORD PTR [ecx+10]
	mov	DWORD PTR $T18[ebp+4], eax
	lea	eax, DWORD PTR [esi+90]
	mov	DWORD PTR $T18[ebp+8], eax
	lea	eax, DWORD PTR [ecx+180]
	mov	DWORD PTR $T18[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T18[ebp]

; 1596 : 					}
; 1597 : 					else

	jmp	SHORT $LN1479@DXW_MainLo
$LN305@DXW_MainLo:

; 1598 : 					{
; 1599 : 						HIT = { 0, 0, 1, 1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000
$LN1479@DXW_MainLo:

; 1600 : 					}
; 1601 : 					if (Timer[2] < 2)

	mov	eax, DWORD PTR ?Timer@@3PAHA+8
	movups	XMMWORD PTR ?HIT@@3UtagRECT@@A, xmm0
	cmp	eax, 2
	jge	SHORT $LN307@DXW_MainLo

; 1602 : 					{
; 1603 : 						Timer[2]++;

	inc	eax
	mov	DWORD PTR ?Timer@@3PAHA+8, eax

; 1604 : 					}
; 1605 : 					else

	mov	eax, DWORD PTR ?Aframe@@3HA		; Aframe
	jmp	SHORT $LN310@DXW_MainLo
$LN307@DXW_MainLo:

; 1606 : 					{
; 1607 : 						Timer[2] = 0;
; 1608 : 						if (Aframe < 12)

	mov	eax, DWORD PTR ?Aframe@@3HA		; Aframe
	mov	DWORD PTR ?Timer@@3PAHA+8, 0
	cmp	eax, 12					; 0000000cH
	jge	SHORT $LN309@DXW_MainLo

; 1609 : 						{
; 1610 : 							Aframe++;

	inc	eax
	mov	DWORD PTR ?Aframe@@3HA, eax		; Aframe
	jmp	SHORT $LN310@DXW_MainLo
$LN309@DXW_MainLo:

; 1611 : 						}
; 1612 : 						else { Aframe == 0; g_bAL = FALSE, g_bAR = FALSE, g_bAtt = FALSE; g_bHit = FALSE;}

	mov	DWORD PTR ?g_bAL@@3HA, 0		; g_bAL
	mov	DWORD PTR ?g_bAR@@3HA, 0		; g_bAR
	mov	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	mov	DWORD PTR ?g_bHit@@3HA, 0		; g_bHit
$LN310@DXW_MainLo:

; 1613 : 					}
; 1614 : 					::__PutAnimeSprite(g_pDDSSkill, SnX - 140, SnY, 13, Aframe, 301, 218, 0);

	push	0
	push	218					; 000000daH
	push	301					; 0000012dH
	push	eax
	push	13					; 0000000dH
	push	ecx
	lea	eax, DWORD PTR [esi-140]
	push	eax
	push	DWORD PTR ?g_pDDSSkill@@3PAUIDirectDrawSurface7@@A ; g_pDDSSkill
	jmp	$LN1480@DXW_MainLo
$LN303@DXW_MainLo:

; 1615 : 				}
; 1616 : 				else if (g_bAR == TRUE)

	cmp	DWORD PTR ?g_bAR@@3HA, 1		; g_bAR
	jne	$LN311@DXW_MainLo

; 1617 : 				{
; 1618 : 					if (g_bHit == FALSE)

	cmp	DWORD PTR ?g_bHit@@3HA, 0		; g_bHit
	lea	ecx, DWORD PTR [edi-65]
	jne	SHORT $LN312@DXW_MainLo

; 1619 : 					{
; 1620 : 						HIT = { SnX - 10,SnY + 10,SnX + 220,SnY + 180 };

	lea	eax, DWORD PTR [esi-10]
	mov	DWORD PTR $T17[ebp], eax
	lea	eax, DWORD PTR [ecx+10]
	mov	DWORD PTR $T17[ebp+4], eax
	lea	eax, DWORD PTR [esi+220]
	mov	DWORD PTR $T17[ebp+8], eax
	lea	eax, DWORD PTR [ecx+180]
	mov	DWORD PTR $T17[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T17[ebp]

; 1621 : 					}
; 1622 : 					else

	jmp	SHORT $LN1481@DXW_MainLo
$LN312@DXW_MainLo:

; 1623 : 					{
; 1624 : 						HIT = { 0, 0, 1, 1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000
$LN1481@DXW_MainLo:

; 1625 : 					}
; 1626 : 					if (Timer[2] < 2)

	mov	eax, DWORD PTR ?Timer@@3PAHA+8
	movups	XMMWORD PTR ?HIT@@3UtagRECT@@A, xmm0
	cmp	eax, 2
	jge	SHORT $LN314@DXW_MainLo

; 1627 : 					{
; 1628 : 						Timer[2]++;

	inc	eax
	mov	DWORD PTR ?Timer@@3PAHA+8, eax

; 1629 : 					}
; 1630 : 					else

	mov	eax, DWORD PTR ?Aframe@@3HA		; Aframe
	jmp	SHORT $LN317@DXW_MainLo
$LN314@DXW_MainLo:

; 1631 : 					{
; 1632 : 						Timer[2] = 0;
; 1633 : 						if (Aframe > 0)

	mov	eax, DWORD PTR ?Aframe@@3HA		; Aframe
	mov	DWORD PTR ?Timer@@3PAHA+8, 0
	test	eax, eax
	jle	SHORT $LN316@DXW_MainLo

; 1634 : 						{
; 1635 : 							Aframe--;

	dec	eax
	mov	DWORD PTR ?Aframe@@3HA, eax		; Aframe
	jmp	SHORT $LN317@DXW_MainLo
$LN316@DXW_MainLo:

; 1636 : 						}
; 1637 : 						else { Aframe == 0; g_bAL = FALSE, g_bAR = FALSE, g_bAtt = FALSE; g_bHit = FALSE;}

	mov	DWORD PTR ?g_bAL@@3HA, 0		; g_bAL
	mov	DWORD PTR ?g_bAR@@3HA, 0		; g_bAR
	mov	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	mov	DWORD PTR ?g_bHit@@3HA, 0		; g_bHit
$LN317@DXW_MainLo:

; 1638 : 					}
; 1639 : 					::__PutAnimeSprite(g_pDDSSkillR, SnX - 70, SnY, 13, Aframe, 301, 218, 0);

	push	0
	push	218					; 000000daH
	push	301					; 0000012dH
	push	eax
	push	13					; 0000000dH
	push	ecx
	lea	eax, DWORD PTR [esi-70]
	push	eax
	push	DWORD PTR ?g_pDDSSkillR@@3PAUIDirectDrawSurface7@@A ; g_pDDSSkillR
$LN1480@DXW_MainLo:

; 1640 : 				}
; 1641 : 			}
; 1642 : 			if (bossimmu == FALSE && g_bHit == FALSE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN311@DXW_MainLo:
	cmp	DWORD PTR ?bossimmu@@3HA, 0		; bossimmu
	jne	$LN1338@DXW_MainLo
	cmp	DWORD PTR ?g_bHit@@3HA, 0		; g_bHit
	jne	$LN1338@DXW_MainLo

; 1643 : 			{
; 1644 : 				if (IntersectRect(&rcDest, &BOSS, &HIT))

	push	OFFSET ?HIT@@3UtagRECT@@A		; HIT
	push	OFFSET ?BOSS@@3UtagRECT@@A		; BOSS
	push	OFFSET ?rcDest@@3UtagRECT@@A		; rcDest
	call	DWORD PTR __imp__IntersectRect@12
	test	eax, eax
	je	$LN1338@DXW_MainLo

; 1645 : 				{
; 1646 : 					P1HP -= 25;

	sub	DWORD PTR ?P1HP@@3HA, 25		; P1HP, 00000019H

; 1647 : 					bossimmu = TRUE;
; 1648 : 					Timer[5] = 20;
; 1649 : 					g_bHit = TRUE;
; 1650 : 					if (BHMPlay == FALSE)

	cmp	DWORD PTR ?BHMPlay@@3HA, 0		; BHMPlay
	mov	DWORD PTR ?bossimmu@@3HA, 1		; bossimmu
	mov	DWORD PTR ?Timer@@3PAHA+20, 20		; 00000014H
	mov	DWORD PTR ?g_bHit@@3HA, 1		; g_bHit
	jne	SHORT $LN320@DXW_MainLo

; 1651 : 					{
; 1652 : 						BHMPlay = TRUE;

	mov	DWORD PTR ?BHMPlay@@3HA, 1		; BHMPlay

; 1653 : 						BHplay[0] = TRUE;
; 1654 : 						Timer[24] = 2;

	jmp	SHORT $LN1482@DXW_MainLo
$LN320@DXW_MainLo:

; 1655 : 					}
; 1656 : 					else if (BHMPlay == TRUE)

	cmp	DWORD PTR ?BHMPlay@@3HA, 1		; BHMPlay
	jne	SHORT $LN1338@DXW_MainLo

; 1657 : 					{
; 1658 : 						BHplay[0] = TRUE;
; 1659 : 						BHplay[1] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA+4, 0

; 1660 : 						BHplay[2] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA+8, 0

; 1661 : 						BHframe[0] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA, 0

; 1662 : 						BHframe[1] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA+4, 0

; 1663 : 						BHframe[2] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA+8, 0

; 1664 : 						Timer[24] = 2;
; 1665 : 						Timer[26] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+104, 2

; 1666 : 						Timer[27] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+108, 2
$LN1482@DXW_MainLo:

; 1667 : 					}
; 1668 : 				}
; 1669 : 			}
; 1670 : 			if (g_bRight == 1 || g_bLeft == 1 && g_bJump == 0)

	mov	DWORD PTR ?Timer@@3PAHA+96, 2
	mov	DWORD PTR ?BHplay@@3PAHA, 1
$LN1338@DXW_MainLo:
	cmp	DWORD PTR ?g_bRight@@3HA, 1		; g_bRight
	je	SHORT $LN325@DXW_MainLo
	cmp	DWORD PTR ?g_bLeft@@3HA, 1		; g_bLeft
	jne	SHORT $LN323@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	je	SHORT $LN325@DXW_MainLo
$LN323@DXW_MainLo:

; 1673 : 			}
; 1674 : 			else
; 1675 : 			{
; 1676 : 				Timer[0] = 0;

	mov	DWORD PTR ?Timer@@3PAHA, 0
	jmp	SHORT $LN324@DXW_MainLo
$LN325@DXW_MainLo:

; 1671 : 			{
; 1672 : 				Timer[0] += 1;

	inc	DWORD PTR ?Timer@@3PAHA
$LN324@DXW_MainLo:

; 1677 : 			}
; 1678 : 			if (p1die == 0)

	cmp	DWORD PTR ?p1die@@3HA, 0		; p1die
	jne	$LN1345@DXW_MainLo

; 1679 : 			{
; 1680 : 				if (Timer[7] == 0)

	cmp	DWORD PTR ?Timer@@3PAHA+28, 0
	jne	$LN1345@DXW_MainLo

; 1681 : 				{
; 1682 : 					if (g_bBAT == TRUE)

	cmp	DWORD PTR ?g_bBAT@@3HA, 1		; g_bBAT
	jne	$LN328@DXW_MainLo

; 1683 : 					{
; 1684 : 						if (BAframe < 10 && Timer[6] < 3)

	mov	eax, DWORD PTR ?BAframe@@3HA		; BAframe
	cmp	eax, 10					; 0000000aH
	jge	SHORT $LN1341@DXW_MainLo
	cmp	DWORD PTR ?Timer@@3PAHA+24, 3
	jge	SHORT $LN330@DXW_MainLo

; 1685 : 						{
; 1686 : 							BAHIT[0] = { 35,200,115,700 };

	movaps	xmm0, XMMWORD PTR __xmm@000002bc00000073000000c800000023

; 1687 : 							BAHIT[1] = { 255,200,335,700 };
; 1688 : 							BAHIT[2] = { 475,200,555,700 };
; 1689 : 							BAHIT[3] = { 695,200,775,700 };
; 1690 : 							BAHIT[4] = { 915,200,995,700 };
; 1691 : 							Timer[6]++;

	inc	DWORD PTR ?Timer@@3PAHA+24
	movups	XMMWORD PTR ?BAHIT@@3PAUtagRECT@@A, xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000002bc0000014f000000c8000000ff
	movups	XMMWORD PTR ?BAHIT@@3PAUtagRECT@@A+16, xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000002bc0000022b000000c8000001db
	movups	XMMWORD PTR ?BAHIT@@3PAUtagRECT@@A+32, xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000002bc00000307000000c8000002b7
	movups	XMMWORD PTR ?BAHIT@@3PAUtagRECT@@A+48, xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000002bc000003e3000000c800000393
	movups	XMMWORD PTR ?BAHIT@@3PAUtagRECT@@A+64, xmm0
	jmp	SHORT $LN1341@DXW_MainLo
$LN330@DXW_MainLo:

; 1692 : 						}
; 1693 : 						else if (BAframe < 10 && Timer[6] >= 3)
; 1694 : 						{
; 1695 : 							BAframe++;

	inc	eax

; 1696 : 							Timer[6] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+24, 0
	mov	DWORD PTR ?BAframe@@3HA, eax		; BAframe
$LN1341@DXW_MainLo:

; 1697 : 						}
; 1698 : 						if (BAframe >= 13)

	cmp	eax, 13					; 0000000dH
	jl	$LN5@DXW_MainLo

; 1699 : 						{
; 1700 : 							int i = 0;
; 1701 : 							for (i = 0; i < 5; i++)

	mov	eax, OFFSET ?RandNum@@3PAHA		; RandNum
	mov	edi, OFFSET ?BAHIT@@3PAUtagRECT@@A	; BAHIT
	mov	DWORD PTR tv12039[ebp], eax
$LL6@DXW_MainLo:

; 1702 : 							{
; 1703 : 								if (RandNum[i] == FALSE)

	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN4@DXW_MainLo

; 1704 : 								{
; 1705 : 									if (IntersectRect(&rcDest, &BAHIT[i], &PHIT))

	push	OFFSET ?PHIT@@3UtagRECT@@A		; PHIT
	push	edi
	push	OFFSET ?rcDest@@3UtagRECT@@A		; rcDest
	call	DWORD PTR __imp__IntersectRect@12
	test	eax, eax
	je	SHORT $LN1405@DXW_MainLo

; 1706 : 									{
; 1707 : 										PlayerHP -= 500;

	sub	DWORD PTR ?PlayerHP@@3HA, 500		; PlayerHP, 000001f4H

; 1708 : 										BAHIT[i] = { 0,0,1,1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000

; 1709 : 										if (PHplay == FALSE)

	mov	eax, DWORD PTR ?PHplay@@3HA		; PHplay
	movups	XMMWORD PTR [edi], xmm0
	test	eax, eax
	je	SHORT $LN1292@DXW_MainLo

; 1710 : 										{
; 1711 : 											PHplay = TRUE;
; 1712 : 											Timer[25] = 3;
; 1713 : 											PHframe = 0;
; 1714 : 										}
; 1715 : 										else if (PHplay == TRUE)

	cmp	eax, 1
	jne	SHORT $LN1405@DXW_MainLo
$LN1292@DXW_MainLo:

; 1716 : 										{
; 1717 : 											PHplay = TRUE;

	mov	DWORD PTR ?PHplay@@3HA, 1		; PHplay

; 1718 : 											Timer[25] = 3;

	mov	DWORD PTR ?Timer@@3PAHA+100, 3

; 1719 : 											PHframe = 0;

	mov	DWORD PTR ?PHframe@@3HA, 0		; PHframe
$LN1405@DXW_MainLo:

; 1699 : 						{
; 1700 : 							int i = 0;
; 1701 : 							for (i = 0; i < 5; i++)

	mov	eax, DWORD PTR tv12039[ebp]
$LN4@DXW_MainLo:
	add	eax, 4
	add	edi, 16					; 00000010H
	mov	DWORD PTR tv12039[ebp], eax
	cmp	eax, OFFSET ?RandNum@@3PAHA+20
	jl	SHORT $LL6@DXW_MainLo
	mov	eax, DWORD PTR ?BAframe@@3HA		; BAframe
	mov	edi, DWORD PTR _nY$2$[ebp]
$LN5@DXW_MainLo:

; 1720 : 										}
; 1721 : 									}
; 1722 : 								}
; 1723 : 							}
; 1724 : 						}
; 1725 : 						if (BAframe >= 10 && Timer[6] < 2 && BAframe < 19)

	cmp	eax, 10					; 0000000aH
	jl	SHORT $LN341@DXW_MainLo
	cmp	DWORD PTR ?Timer@@3PAHA+24, 2
	jge	SHORT $LN1271@DXW_MainLo
	cmp	eax, 19					; 00000013H
	jge	SHORT $LN341@DXW_MainLo

; 1726 : 						{
; 1727 : 							Timer[6]++;

	inc	DWORD PTR ?Timer@@3PAHA+24
	jmp	SHORT $LN341@DXW_MainLo
$LN1271@DXW_MainLo:

; 1728 : 						}
; 1729 : 						else if (BAframe >= 10 && Timer[6] >= 2 && BAframe < 19)

	cmp	eax, 19					; 00000013H
	jge	SHORT $LN341@DXW_MainLo

; 1730 : 						{
; 1731 : 							BAframe++;

	inc	eax

; 1732 : 							Timer[6] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+24, 0
	mov	DWORD PTR ?BAframe@@3HA, eax		; BAframe
$LN341@DXW_MainLo:

; 1733 : 						}
; 1734 : 						switch (Randpat)

	mov	ecx, DWORD PTR ?Randpat@@3HA		; Randpat
	sub	ecx, 0
	je	$LN342@DXW_MainLo
	sub	ecx, 1
	je	$LN343@DXW_MainLo
	sub	ecx, 1
	jne	$LN354@DXW_MainLo

; 1745 : 						case 2:
; 1746 : 							if (RandNum[0] == TRUE)

	cmp	DWORD PTR ?RandNum@@3PAHA, 1
	push	ecx
	push	656					; 00000290H
	push	600					; 00000258H
	push	eax
	push	20					; 00000014H
	push	50					; 00000032H
	push	-170					; ffffff56H
	jne	SHORT $LN345@DXW_MainLo

; 1747 : 							{
; 1748 : 								::__PutAnimeSprite(g_BossAtt2, -170, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt2@@3PAUIDirectDrawSurface7@@A ; g_BossAtt2

; 1749 : 							}
; 1750 : 							else

	jmp	SHORT $LN1483@DXW_MainLo
$LN345@DXW_MainLo:

; 1751 : 							{
; 1752 : 								::__PutAnimeSprite(g_BossAtt, -170, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
$LN1483@DXW_MainLo:

; 1753 : 							}
; 1754 : 							if (RandNum[1] == TRUE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	cmp	DWORD PTR ?RandNum@@3PAHA+4, 1
	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	50					; 00000032H
	jne	SHORT $LN347@DXW_MainLo

; 1755 : 							{
; 1756 : 								::__PutAnimeSprite(g_BossAtt2, 50, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt2@@3PAUIDirectDrawSurface7@@A ; g_BossAtt2

; 1757 : 							}
; 1758 : 							else

	jmp	SHORT $LN1484@DXW_MainLo
$LN347@DXW_MainLo:

; 1759 : 							{
; 1760 : 								::__PutAnimeSprite(g_BossAtt, 50, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
$LN1484@DXW_MainLo:

; 1761 : 							}
; 1762 : 							if (RandNum[2] == TRUE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	cmp	DWORD PTR ?RandNum@@3PAHA+8, 1
	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	270					; 0000010eH
	jne	SHORT $LN349@DXW_MainLo

; 1763 : 							{
; 1764 : 								::__PutAnimeSprite(g_BossAtt2, 270, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt2@@3PAUIDirectDrawSurface7@@A ; g_BossAtt2

; 1765 : 							}
; 1766 : 							else

	jmp	SHORT $LN1485@DXW_MainLo
$LN349@DXW_MainLo:

; 1767 : 							{
; 1768 : 								::__PutAnimeSprite(g_BossAtt, 270, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
$LN1485@DXW_MainLo:

; 1769 : 							}
; 1770 : 							if (RandNum[3] == TRUE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	cmp	DWORD PTR ?RandNum@@3PAHA+12, 1
	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	490					; 000001eaH
	jne	SHORT $LN351@DXW_MainLo

; 1771 : 							{
; 1772 : 								::__PutAnimeSprite(g_BossAtt2, 490, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt2@@3PAUIDirectDrawSurface7@@A ; g_BossAtt2

; 1773 : 							}
; 1774 : 							else

	jmp	SHORT $LN1486@DXW_MainLo
$LN351@DXW_MainLo:

; 1775 : 							{
; 1776 : 								::__PutAnimeSprite(g_BossAtt, 490, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
$LN1486@DXW_MainLo:

; 1777 : 							}
; 1778 : 							if (RandNum[4] == TRUE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	cmp	DWORD PTR ?RandNum@@3PAHA+16, 1
	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	710					; 000002c6H
	jne	$LN353@DXW_MainLo

; 1779 : 							{
; 1780 : 								::__PutAnimeSprite(g_BossAtt2, 710, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt2@@3PAUIDirectDrawSurface7@@A ; g_BossAtt2

; 1781 : 							}
; 1782 : 							else

	jmp	$LN1487@DXW_MainLo
$LN343@DXW_MainLo:

; 1740 : 							break;
; 1741 : 						case 1:
; 1742 : 							::__PutAnimeSprite(g_BossAtt, 50, 50, 20, BAframe, 600, 656, 0);

	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	eax
	push	20					; 00000014H
	push	50					; 00000032H
	push	50					; 00000032H
	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite

; 1743 : 							::__PutAnimeSprite(g_BossAtt, 490, 50, 20, BAframe, 600, 656, 0);

	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	490					; 000001eaH
	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 64					; 00000040H

; 1744 : 							break;

	jmp	SHORT $LN1488@DXW_MainLo
$LN342@DXW_MainLo:

; 1735 : 						{
; 1736 : 						case 0:
; 1737 : 							::__PutAnimeSprite(g_BossAtt, -170, 50, 20, BAframe, 600, 656, 0);

	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	eax
	push	20					; 00000014H
	push	50					; 00000032H
	push	-170					; ffffff56H
	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite

; 1738 : 							::__PutAnimeSprite(g_BossAtt, 270, 50, 20, BAframe, 600, 656, 0);

	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	270					; 0000010eH
	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 64					; 00000040H

; 1739 : 							::__PutAnimeSprite(g_BossAtt, 710, 50, 20, BAframe, 600, 656, 0);

	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	710					; 000002c6H
$LN353@DXW_MainLo:

; 1783 : 							{
; 1784 : 								::__PutAnimeSprite(g_BossAtt, 710, 50, 20, BAframe, 600, 656, 0);
; 1785 : 							}
; 1786 : 							break;
; 1787 : 						}
; 1788 : 						if (BAframe >= 19)

	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
$LN1487@DXW_MainLo:
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN1488@DXW_MainLo:
	mov	eax, DWORD PTR ?BAframe@@3HA		; BAframe
$LN354@DXW_MainLo:
	cmp	eax, 19					; 00000013H
	jl	$LN1345@DXW_MainLo

; 1789 : 						{
; 1790 : 							if (Timer[6] > 2)

	cmp	DWORD PTR ?Timer@@3PAHA+24, 2
	jle	SHORT $LN356@DXW_MainLo

; 1791 : 							{
; 1792 : 								BAframe = 0;
; 1793 : 								Randpat2 = Randpat;

	mov	eax, DWORD PTR ?Randpat@@3HA		; Randpat

; 1794 : 								g_bBAT = FALSE;
; 1795 : 								Timer[7] = 60;
; 1796 : 								if (P1HP < 250)

	mov	ecx, 10					; 0000000aH
	cmp	DWORD PTR ?P1HP@@3HA, 250		; P1HP, 000000faH
	mov	DWORD PTR ?Randpat2@@3HA, eax		; Randpat2
	mov	eax, 60					; 0000003cH
	cmovl	eax, ecx
	mov	DWORD PTR ?BAframe@@3HA, 0		; BAframe
	mov	DWORD PTR ?g_bBAT@@3HA, 0		; g_bBAT
	mov	DWORD PTR ?Timer@@3PAHA+28, eax

; 1797 : 								{
; 1798 : 									Timer[7] -= 50;
; 1799 : 								}
; 1800 : 								Maximum = 0;

	mov	DWORD PTR ?Maximum@@3HA, 0		; Maximum

; 1801 : 								RandNum[0, 1, 2, 3, 4] = { 0 };

	mov	DWORD PTR ?RandNum@@3PAHA+16, 0

; 1802 : 							}
; 1803 : 							else

	jmp	$LN1345@DXW_MainLo
$LN356@DXW_MainLo:

; 1804 : 							{
; 1805 : 								Timer[6]++;

	inc	DWORD PTR ?Timer@@3PAHA+24

; 1806 : 							}
; 1807 : 						}
; 1808 : 					}
; 1809 : 					else

	jmp	$LN1345@DXW_MainLo
$LN328@DXW_MainLo:

; 1810 : 					{
; 1811 : 						Randpat = rand() % 3;

	call	_rand
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR ?Randpat@@3HA, edx		; Randpat
	cmp	edx, DWORD PTR ?Randpat2@@3HA		; Randpat2

; 1812 : 						if (Randpat == Randpat2)

	jne	SHORT $LN9@DXW_MainLo

; 1813 : 						{
; 1814 : 							switch (Randpat)

	mov	eax, edx
	sub	eax, 0
	je	SHORT $LN360@DXW_MainLo
	sub	eax, 1
	je	SHORT $LN361@DXW_MainLo
	sub	eax, 1
	jne	SHORT $LN9@DXW_MainLo

; 1822 : 							case 2:
; 1823 : 								Randpat = 0;

	xor	edx, edx
	mov	DWORD PTR ?Randpat@@3HA, edx		; Randpat
	jmp	$LN379@DXW_MainLo
$LN361@DXW_MainLo:

; 1818 : 								break;
; 1819 : 							case 1:
; 1820 : 								Randpat = 2;

	mov	DWORD PTR ?Randpat@@3HA, 2		; Randpat

; 1821 : 								break;

	jmp	SHORT $LN1272@DXW_MainLo
$LN360@DXW_MainLo:

; 1815 : 							{
; 1816 : 							case 0:
; 1817 : 								Randpat = 1;

	mov	edx, 1
	mov	DWORD PTR ?Randpat@@3HA, edx		; Randpat

; 1824 : 								break;
; 1825 : 							}
; 1826 : 						}
; 1827 : 						if (Randpat == 2)

	jmp	$LN379@DXW_MainLo
$LN9@DXW_MainLo:
	cmp	edx, 2
	jne	$LN379@DXW_MainLo
$LN1272@DXW_MainLo:

; 1828 : 						{
; 1829 : 							RandNum[0] = rand() % 2;

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN1422@DXW_MainLo
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN1422@DXW_MainLo:

; 1830 : 							if (RandNum[0] == 1 && Maximum < 2)

	mov	ecx, DWORD PTR ?Maximum@@3HA		; Maximum
	mov	DWORD PTR ?RandNum@@3PAHA, eax
	cmp	eax, 1
	jne	SHORT $LN366@DXW_MainLo
	cmp	ecx, 2
	jge	SHORT $LN364@DXW_MainLo

; 1831 : 							{
; 1832 : 								Maximum++;

	inc	ecx
	mov	DWORD PTR ?Maximum@@3HA, ecx		; Maximum
	jmp	SHORT $LN366@DXW_MainLo
$LN364@DXW_MainLo:

; 1833 : 							}
; 1834 : 							else if (RandNum[0] == 1 && Maximum >= 2)

	cmp	eax, 1
	jne	SHORT $LN366@DXW_MainLo
	xor	edx, edx
	cmp	ecx, 2
	cmovge	eax, edx
	mov	DWORD PTR ?RandNum@@3PAHA, eax
$LN366@DXW_MainLo:

; 1835 : 							{
; 1836 : 								RandNum[0] = 0;
; 1837 : 							}
; 1838 : 							RandNum[1] = rand() % 2;

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN1423@DXW_MainLo
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN1423@DXW_MainLo:

; 1839 : 							if (RandNum[1] == 1 && Maximum < 2)

	mov	ecx, DWORD PTR ?Maximum@@3HA		; Maximum
	mov	DWORD PTR ?RandNum@@3PAHA+4, eax
	cmp	eax, 1
	jne	SHORT $LN369@DXW_MainLo
	cmp	ecx, 2
	jge	SHORT $LN367@DXW_MainLo

; 1840 : 							{
; 1841 : 								Maximum++;

	inc	ecx
	mov	DWORD PTR ?Maximum@@3HA, ecx		; Maximum
	jmp	SHORT $LN369@DXW_MainLo
$LN367@DXW_MainLo:

; 1842 : 							}
; 1843 : 							else if (RandNum[1] == 1 && Maximum >= 2)

	cmp	eax, 1
	jne	SHORT $LN369@DXW_MainLo
	xor	edx, edx
	cmp	ecx, 2
	cmovge	eax, edx
	mov	DWORD PTR ?RandNum@@3PAHA+4, eax
$LN369@DXW_MainLo:

; 1844 : 							{
; 1845 : 								RandNum[1] = 0;
; 1846 : 							}
; 1847 : 							RandNum[2] = rand() % 2;

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN1424@DXW_MainLo
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN1424@DXW_MainLo:

; 1848 : 							if (RandNum[2] == 1 && Maximum < 2)

	mov	ecx, DWORD PTR ?Maximum@@3HA		; Maximum
	mov	DWORD PTR ?RandNum@@3PAHA+8, eax
	cmp	eax, 1
	jne	SHORT $LN372@DXW_MainLo
	cmp	ecx, 2
	jge	SHORT $LN370@DXW_MainLo

; 1849 : 							{
; 1850 : 								Maximum++;

	inc	ecx
	mov	DWORD PTR ?Maximum@@3HA, ecx		; Maximum
	jmp	SHORT $LN372@DXW_MainLo
$LN370@DXW_MainLo:

; 1851 : 							}
; 1852 : 							else if (RandNum[2] == 1 && Maximum >= 2)

	cmp	eax, 1
	jne	SHORT $LN372@DXW_MainLo
	xor	edx, edx
	cmp	ecx, 2
	cmovge	eax, edx
	mov	DWORD PTR ?RandNum@@3PAHA+8, eax
$LN372@DXW_MainLo:

; 1853 : 							{
; 1854 : 								RandNum[2] = 0;
; 1855 : 							}
; 1856 : 							RandNum[3] = rand() % 2;

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN1425@DXW_MainLo
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN1425@DXW_MainLo:

; 1857 : 							if (RandNum[3] == 1 && Maximum < 2)

	mov	ecx, DWORD PTR ?Maximum@@3HA		; Maximum
	mov	DWORD PTR ?RandNum@@3PAHA+12, eax
	cmp	eax, 1
	jne	SHORT $LN375@DXW_MainLo
	cmp	ecx, 2
	jge	SHORT $LN373@DXW_MainLo

; 1858 : 							{
; 1859 : 								Maximum++;

	inc	ecx
	mov	DWORD PTR ?Maximum@@3HA, ecx		; Maximum
	jmp	SHORT $LN375@DXW_MainLo
$LN373@DXW_MainLo:

; 1860 : 							}
; 1861 : 							else if (RandNum[3] == 1 && Maximum >= 2)

	cmp	eax, 1
	jne	SHORT $LN375@DXW_MainLo
	xor	edx, edx
	cmp	ecx, 2
	cmovge	eax, edx
	mov	DWORD PTR ?RandNum@@3PAHA+12, eax
$LN375@DXW_MainLo:

; 1862 : 							{
; 1863 : 								RandNum[3] = 0;
; 1864 : 							}
; 1865 : 							RandNum[4] = rand() % 2;

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN1426@DXW_MainLo
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN1426@DXW_MainLo:

; 1866 : 							if (RandNum[4] == 1 && Maximum < 2)

	mov	ecx, DWORD PTR ?Maximum@@3HA		; Maximum
	mov	DWORD PTR ?RandNum@@3PAHA+16, eax
	cmp	eax, 1
	jne	SHORT $LN378@DXW_MainLo
	cmp	ecx, 2
	jge	SHORT $LN376@DXW_MainLo

; 1867 : 							{
; 1868 : 								Maximum++;

	inc	ecx
	mov	DWORD PTR ?Maximum@@3HA, ecx		; Maximum
	jmp	SHORT $LN378@DXW_MainLo
$LN376@DXW_MainLo:

; 1869 : 							}
; 1870 : 							else if (RandNum[4] == 1 && Maximum >= 2)

	cmp	eax, 1
	jne	SHORT $LN378@DXW_MainLo
	xor	edx, edx
	cmp	ecx, 2
	cmovge	eax, edx
	mov	DWORD PTR ?RandNum@@3PAHA+16, eax
$LN378@DXW_MainLo:

; 1871 : 							{
; 1872 : 								RandNum[4] = 0;
; 1873 : 							}
; 1874 : 							if (Maximum == 0)

	test	ecx, ecx
	jne	SHORT $LN1344@DXW_MainLo

; 1875 : 							{
; 1876 : 								int n = 0;
; 1877 : 								n = rand() % 4;

	call	_rand
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN1427@DXW_MainLo
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN1427@DXW_MainLo:

; 1878 : 								RandNum[n] = 1;

	mov	DWORD PTR ?RandNum@@3PAHA[eax*4], 1
$LN1344@DXW_MainLo:

; 1879 : 							}
; 1880 : 						}
; 1881 : 						switch (Randpat)

	mov	edx, DWORD PTR ?Randpat@@3HA		; Randpat
$LN379@DXW_MainLo:
	sub	edx, 0
	je	SHORT $LN380@DXW_MainLo
	sub	edx, 1
	jne	SHORT $LN11@DXW_MainLo

; 1889 : 							break;
; 1890 : 						case 1:
; 1891 : 							RandNum[0] = 1;

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001

; 1892 : 							RandNum[1] = 0;
; 1893 : 							RandNum[2] = 1;
; 1894 : 							RandNum[3] = 0;
; 1895 : 							RandNum[4] = 1;

	mov	DWORD PTR ?RandNum@@3PAHA+16, 1
	jmp	SHORT $LN1494@DXW_MainLo
$LN380@DXW_MainLo:

; 1882 : 						{
; 1883 : 						case 0:
; 1884 : 							RandNum[0] = 0;

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000000000000100000000

; 1885 : 							RandNum[1] = 1;
; 1886 : 							RandNum[2] = 0;
; 1887 : 							RandNum[3] = 1;
; 1888 : 							RandNum[4] = 0;

	mov	DWORD PTR ?RandNum@@3PAHA+16, 0
$LN1494@DXW_MainLo:

; 1896 : 							break;
; 1897 : 						}
; 1898 : 						g_bBAT = TRUE;

	movups	XMMWORD PTR ?RandNum@@3PAHA, xmm0
$LN11@DXW_MainLo:
	mov	DWORD PTR ?g_bBAT@@3HA, 1		; g_bBAT
$LN1345@DXW_MainLo:

; 1899 : 					}
; 1900 : 				}
; 1901 : 			}
; 1902 : 			if (PHplay == TRUE)

	cmp	DWORD PTR ?PHplay@@3HA, 1		; PHplay
	jne	$LN388@DXW_MainLo

; 1903 : 			{
; 1904 : 				if (Timer[25] == 0)

	cmp	DWORD PTR ?Timer@@3PAHA+100, 0
	jne	SHORT $LN383@DXW_MainLo

; 1905 : 				{
; 1906 : 					PHframe++;

	mov	eax, DWORD PTR ?PHframe@@3HA		; PHframe
	inc	eax

; 1907 : 					Timer[25] = 3;

	mov	DWORD PTR ?Timer@@3PAHA+100, 3
	mov	DWORD PTR ?PHframe@@3HA, eax		; PHframe
	cmp	eax, 5

; 1908 : 					if (PHframe > 5)

	jle	SHORT $LN1145@DXW_MainLo

; 1909 : 					{
; 1910 : 						PHplay = FALSE;

	mov	DWORD PTR ?PHplay@@3HA, 0		; PHplay

; 1911 : 						PHframe = 0;

	mov	DWORD PTR ?PHframe@@3HA, 0		; PHframe

; 1912 : 						Timer[25] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+100, 0

; 1913 : 					}
; 1914 : 				}

	jmp	SHORT $LN388@DXW_MainLo
$LN383@DXW_MainLo:

; 1915 : 				else { Timer[25] --; }

	dec	DWORD PTR ?Timer@@3PAHA+100
$LN1145@DXW_MainLo:

; 1916 : 				if (PHplay == TRUE)
; 1917 : 				{
; 1918 : 					if (g_bLookL)

	add	edi, -70				; ffffffbaH
	cmp	DWORD PTR ?g_bLookL@@3HA, 0		; g_bLookL
	je	SHORT $LN1047@DXW_MainLo

; 1919 : 					{
; 1920 : 						::__PutAnimeSprite(g_pDDSDPlayerHit, nX - 50, nY - 70, 6, PHframe, 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?PHframe@@3HA			; PHframe
	lea	eax, DWORD PTR [esi-50]
	push	6
	push	edi
	push	eax
	push	DWORD PTR ?g_pDDSDPlayerHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDPlayerHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN1047@DXW_MainLo:

; 1921 : 					}
; 1922 : 					if (g_bLookR)

	cmp	DWORD PTR ?g_bLookR@@3HA, 0		; g_bLookR
	je	SHORT $LN388@DXW_MainLo

; 1923 : 					{
; 1924 : 						::__PutAnimeSprite(g_pDDSDPlayerHit, nX - 40, nY - 70, 6, PHframe, 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?PHframe@@3HA			; PHframe
	lea	eax, DWORD PTR [esi-40]
	push	6
	push	edi
	push	eax
	push	DWORD PTR ?g_pDDSDPlayerHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDPlayerHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN388@DXW_MainLo:

; 1925 : 					}
; 1926 : 				}
; 1927 : 			}
; 1928 : 			if (BHMPlay == TRUE)

	cmp	DWORD PTR ?BHMPlay@@3HA, 1		; BHMPlay
	jne	$LN413@DXW_MainLo

; 1929 : 			{
; 1930 : 				if (Timer[24] == 0 && BHplay[0] ==TRUE)

	cmp	DWORD PTR ?Timer@@3PAHA+96, 0
	jne	SHORT $LN390@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA, 1
	jne	SHORT $LN394@DXW_MainLo

; 1931 : 				{
; 1932 : 					BHframe[0]++;

	mov	eax, DWORD PTR ?BHframe@@3PAHA
	inc	eax

; 1933 : 					Timer[24] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+96, 2
	mov	DWORD PTR ?BHframe@@3PAHA, eax

; 1934 : 					if (BHframe[0] == 6)

	cmp	eax, 6
	jne	SHORT $LN392@DXW_MainLo

; 1935 : 					{
; 1936 : 						BHframe[0] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA, 0

; 1937 : 						Timer[24] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+96, 0

; 1938 : 						BHplay[0] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA, 0

; 1939 : 					}
; 1940 : 					if (BHframe[0] == 4 && BHplay[1] == FALSE)

	jmp	SHORT $LN394@DXW_MainLo
$LN392@DXW_MainLo:
	cmp	eax, 4
	jne	SHORT $LN394@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+4, 0
	jne	SHORT $LN394@DXW_MainLo

; 1941 : 					{
; 1942 : 						Timer[26] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+104, 2

; 1943 : 						BHplay[1] = TRUE;

	mov	DWORD PTR ?BHplay@@3PAHA+4, 1

; 1944 : 					}
; 1945 : 				}

	jmp	$LN1147@DXW_MainLo
$LN390@DXW_MainLo:

; 1946 : 				else if (Timer[24] > 0 && BHplay[0] == TRUE) { Timer[24]--; }

	jle	SHORT $LN394@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA, 1
	jne	SHORT $LN394@DXW_MainLo
	dec	DWORD PTR ?Timer@@3PAHA+96
$LN394@DXW_MainLo:

; 1947 : 				if (Timer[26] == 0 && BHplay[1] == TRUE)

	cmp	DWORD PTR ?Timer@@3PAHA+104, 0
	jne	SHORT $LN395@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+4, 1
	jne	SHORT $LN399@DXW_MainLo

; 1948 : 				{
; 1949 : 					BHframe[1]++;

	mov	eax, DWORD PTR ?BHframe@@3PAHA+4
	inc	eax

; 1950 : 					Timer[26] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+104, 2
	mov	DWORD PTR ?BHframe@@3PAHA+4, eax

; 1951 : 					if (BHframe[1] == 6)

	cmp	eax, 6
	jne	SHORT $LN397@DXW_MainLo

; 1952 : 					{
; 1953 : 						BHframe[1] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA+4, 0

; 1954 : 						Timer[26] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+104, 0

; 1955 : 						BHplay[1] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA+4, 0

; 1956 : 					}
; 1957 : 					if (BHframe[1] == 4 && BHplay[2] == FALSE)

	jmp	SHORT $LN399@DXW_MainLo
$LN397@DXW_MainLo:
	cmp	eax, 4
	jne	SHORT $LN399@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+8, 0
	jne	SHORT $LN399@DXW_MainLo

; 1958 : 					{
; 1959 : 						Timer[27] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+108, 2

; 1960 : 						BHplay[2] = TRUE;

	mov	DWORD PTR ?BHplay@@3PAHA+8, 1

; 1961 : 					}
; 1962 : 				}

	jmp	SHORT $LN1149@DXW_MainLo
$LN395@DXW_MainLo:

; 1963 : 				else if (Timer[26] > 0 && BHplay[1] == TRUE){ Timer[26]--; }

	jle	SHORT $LN399@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+4, 1
	jne	SHORT $LN399@DXW_MainLo
$LN1147@DXW_MainLo:
	dec	DWORD PTR ?Timer@@3PAHA+104
$LN399@DXW_MainLo:

; 1964 : 				if (Timer[27] == 0 && BHplay[2] == TRUE)

	cmp	DWORD PTR ?Timer@@3PAHA+108, 0
	jne	SHORT $LN400@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+8, 1
	jne	SHORT $LN403@DXW_MainLo

; 1965 : 				{
; 1966 : 					BHframe[2]++;

	mov	eax, DWORD PTR ?BHframe@@3PAHA+8
	inc	eax

; 1967 : 					Timer[27] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+108, 2
	mov	DWORD PTR ?BHframe@@3PAHA+8, eax

; 1968 : 					if (BHframe[2] == 6)

	cmp	eax, 6
	jne	SHORT $LN403@DXW_MainLo

; 1969 : 					{
; 1970 : 						BHframe[2] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA+8, 0

; 1971 : 						Timer[27] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+108, 0

; 1972 : 						BHplay[2] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA+8, 0

; 1973 : 					}
; 1974 : 				}

	jmp	SHORT $LN403@DXW_MainLo
$LN400@DXW_MainLo:

; 1975 : 				else if (Timer[27] > 0 && BHplay[2] == TRUE) { Timer[27]--; }

	jle	SHORT $LN403@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+8, 1
	jne	SHORT $LN403@DXW_MainLo
$LN1149@DXW_MainLo:
	dec	DWORD PTR ?Timer@@3PAHA+108
$LN403@DXW_MainLo:

; 1976 : 				if (BHplay[0] == FALSE && BHplay[1] == FALSE && BHplay[2] == FALSE)

	cmp	DWORD PTR ?BHplay@@3PAHA, 0
	jne	SHORT $LN404@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+4, 0
	jne	$LN1417@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+8, 0
	jne	$LN410@DXW_MainLo

; 1977 : 				{
; 1978 : 					BHMPlay = FALSE;

	mov	DWORD PTR ?BHMPlay@@3HA, 0		; BHMPlay

; 1979 : 				}
; 1980 : 				if (BHplay[0] == TRUE)

	jmp	$LN413@DXW_MainLo
$LN404@DXW_MainLo:
	cmp	DWORD PTR ?BHplay@@3PAHA, 1
	mov	edi, DWORD PTR _bnY$1$[ebp]
	jne	SHORT $LN407@DXW_MainLo

; 1981 : 				{
; 1982 : 					if (g_bLookL)

	cmp	DWORD PTR ?g_bLookL@@3HA, 0		; g_bLookL
	lea	eax, DWORD PTR [edi-40]
	mov	esi, DWORD PTR _bnX$1$[ebp]
	je	SHORT $LN1048@DXW_MainLo

; 1983 : 					{
; 1984 : 						::__PutAnimeSprite(g_pDDSDBossHit, bnX, bnY - 40, 6, BHframe[0], 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?BHframe@@3PAHA
	push	6
	push	eax
	push	esi
	push	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDBossHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	lea	eax, DWORD PTR [edi-40]
$LN1048@DXW_MainLo:

; 1985 : 					}
; 1986 : 					if (g_bLookR)

	cmp	DWORD PTR ?g_bLookR@@3HA, 0		; g_bLookR
	je	SHORT $LN407@DXW_MainLo

; 1987 : 					{
; 1988 : 						::__PutAnimeSprite(g_pDDSDBossHit, bnX + 20, bnY - 40, 6, BHframe[0], 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?BHframe@@3PAHA
	push	6
	push	eax
	lea	eax, DWORD PTR [esi+20]
	push	eax
	push	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDBossHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	jmp	SHORT $LN407@DXW_MainLo
$LN1417@DXW_MainLo:

; 1976 : 				if (BHplay[0] == FALSE && BHplay[1] == FALSE && BHplay[2] == FALSE)

	mov	edi, DWORD PTR _bnY$1$[ebp]
$LN407@DXW_MainLo:

; 1989 : 					}
; 1990 : 				}
; 1991 : 				if (BHplay[1] == TRUE)

	cmp	DWORD PTR ?BHplay@@3PAHA+4, 1
	jne	SHORT $LN410@DXW_MainLo

; 1992 : 				{
; 1993 : 					if (g_bLookL)

	mov	esi, DWORD PTR _bnX$1$[ebp]
	add	edi, -40				; ffffffd8H
	cmp	DWORD PTR ?g_bLookL@@3HA, 0		; g_bLookL
	je	SHORT $LN1049@DXW_MainLo

; 1994 : 					{
; 1995 : 						::__PutAnimeSprite(g_pDDSDBossHit, bnX, bnY - 40, 6, BHframe[1], 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?BHframe@@3PAHA+4
	push	6
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDBossHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN1049@DXW_MainLo:

; 1996 : 					}
; 1997 : 					if (g_bLookR)

	cmp	DWORD PTR ?g_bLookR@@3HA, 0		; g_bLookR
	je	SHORT $LN410@DXW_MainLo

; 1998 : 					{
; 1999 : 						::__PutAnimeSprite(g_pDDSDBossHit, bnX + 20, bnY - 40, 6, BHframe[1], 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?BHframe@@3PAHA+4
	lea	eax, DWORD PTR [esi+20]
	push	6
	push	edi
	push	eax
	push	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDBossHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN410@DXW_MainLo:

; 2000 : 					}
; 2001 : 				}
; 2002 : 				if (BHplay[2] == TRUE)

	cmp	DWORD PTR ?BHplay@@3PAHA+8, 1
	jne	SHORT $LN413@DXW_MainLo

; 2003 : 				{
; 2004 : 					if (g_bLookL)

	mov	edi, DWORD PTR _bnY$1$[ebp]
	mov	esi, DWORD PTR _bnX$1$[ebp]
	add	edi, -40				; ffffffd8H
	cmp	DWORD PTR ?g_bLookL@@3HA, 0		; g_bLookL
	je	SHORT $LN1050@DXW_MainLo

; 2005 : 					{
; 2006 : 						::__PutAnimeSprite(g_pDDSDBossHit, bnX, bnY - 40, 6, BHframe[2], 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?BHframe@@3PAHA+8
	push	6
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDBossHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN1050@DXW_MainLo:

; 2007 : 					}
; 2008 : 					if (g_bLookR)

	cmp	DWORD PTR ?g_bLookR@@3HA, 0		; g_bLookR
	je	SHORT $LN413@DXW_MainLo

; 2009 : 					{
; 2010 : 						::__PutAnimeSprite(g_pDDSDBossHit, bnX + 20, bnY - 40, 6, BHframe[2], 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?BHframe@@3PAHA+8
	lea	eax, DWORD PTR [esi+20]
	push	6
	push	edi
	push	eax
	push	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDBossHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN413@DXW_MainLo:

; 2011 : 					}
; 2012 : 				}
; 2013 : 			}
; 2014 : 			if (P1HP < 1)

	cmp	DWORD PTR ?P1HP@@3HA, 1			; P1HP
	jge	$LN414@DXW_MainLo

; 2015 : 			{
; 2016 : 				if (g_pDS[0])

	mov	eax, DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A
	test	eax, eax
	je	SHORT $LN415@DXW_MainLo

; 2017 : 					m_HHSound.Stop(g_pDS[0]);

	push	eax
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Stop@CHHSound@@QAEXPAUIDirectSoundBuffer@@@Z ; CHHSound::Stop
$LN415@DXW_MainLo:

; 2018 : 				p1die = 1;
; 2019 : 				g_nPhaze = 2;
; 2020 : 				g_Pos.x = 0;
; 2021 : 				g_Pos.y = 500;
; 2022 : 				g_BPos.x = 700;
; 2023 : 				g_BPos.y = 430;
; 2024 : 				Gravity = 13;
; 2025 : 				g_bSetSpeed = FALSE;
; 2026 : 				g_bJump = FALSE;
; 2027 : 				g_bJaccel = FALSE;
; 2028 : 				g_bJLeft = FALSE;
; 2029 : 				g_bJRight = FALSE;
; 2030 : 				g_bCast = FALSE;
; 2031 : 				g_bCFire = FALSE;
; 2032 : 				g_bCLeft = FALSE;
; 2033 : 				g_bCRight = FALSE;
; 2034 : 				CastHit = FALSE;
; 2035 : 				Timer[11] = 0;
; 2036 : 				cx = 0;
; 2037 : 				CAAframe = 0;
; 2038 : 				Cast = { 0,0,1,1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000
	mov	DWORD PTR ?p1die@@3HA, 1		; p1die
	mov	DWORD PTR ?g_nPhaze@@3HA, 2		; g_nPhaze
	mov	DWORD PTR ?g_Pos@@3UtagPOINT@@A, 0
	mov	DWORD PTR ?g_Pos@@3UtagPOINT@@A+4, 500	; 000001f4H
	mov	DWORD PTR ?g_BPos@@3UtagPOINT@@A, 700	; 000002bcH
	mov	DWORD PTR ?g_BPos@@3UtagPOINT@@A+4, 430	; 000001aeH
	mov	DWORD PTR ?Gravity@@3HA, 13		; Gravity, 0000000dH
	mov	DWORD PTR ?g_bSetSpeed@@3HA, 0		; g_bSetSpeed
	mov	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	mov	DWORD PTR ?g_bJaccel@@3HA, 0		; g_bJaccel
	mov	DWORD PTR ?g_bJLeft@@3HA, 0		; g_bJLeft
	mov	DWORD PTR ?g_bJRight@@3HA, 0		; g_bJRight
	mov	DWORD PTR ?g_bCast@@3HA, 0		; g_bCast
	mov	DWORD PTR ?g_bCFire@@3HA, 0		; g_bCFire
	mov	DWORD PTR ?g_bCLeft@@3HA, 0		; g_bCLeft
	mov	DWORD PTR ?g_bCRight@@3HA, 0		; g_bCRight
	mov	DWORD PTR ?CastHit@@3HA, 0		; CastHit
	mov	DWORD PTR ?Timer@@3PAHA+44, 0
	mov	DWORD PTR ?cx@@3HA, 0			; cx
	mov	DWORD PTR ?CAAframe@@3HA, 0		; CAAframe
	movups	XMMWORD PTR ?Cast@@3UtagRECT@@A, xmm0

; 2039 : 				Timer[17] = (rand() % 150) + 200;

	call	_rand
	cdq
	mov	ecx, 150				; 00000096H
	idiv	ecx

; 2040 : 				Timer[16] = 0;
; 2041 : 				BossAtt = FALSE;
; 2042 : 				BAframe = 0;
; 2043 : 				Randpat2 = Randpat;
; 2044 : 				g_bBAT = FALSE;
; 2045 : 				Timer[7] = 60;
; 2046 : 				Maximum = 0;
; 2047 : 				RandNum[0, 1, 2, 3, 4] = { 0 };
; 2048 : 				BAL = FALSE;
; 2049 : 				BAR = FALSE;
; 2050 : 				BKframe = 0;
; 2051 : 				KnockHIT = FALSE;
; 2052 : 				Knock = { 0,0,1,1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000
	mov	eax, DWORD PTR ?Randpat@@3HA		; Randpat
	add	edx, 200				; 000000c8H
	mov	DWORD PTR ?Timer@@3PAHA+68, edx
	mov	DWORD PTR ?Timer@@3PAHA+64, 0
	mov	DWORD PTR ?BossAtt@@3HA, 0		; BossAtt
	mov	DWORD PTR ?BAframe@@3HA, 0		; BAframe
	mov	DWORD PTR ?Randpat2@@3HA, eax		; Randpat2
	mov	DWORD PTR ?g_bBAT@@3HA, 0		; g_bBAT
	mov	DWORD PTR ?Timer@@3PAHA+28, 60		; 0000003cH
	mov	DWORD PTR ?Maximum@@3HA, 0		; Maximum
	mov	DWORD PTR ?RandNum@@3PAHA+16, 0
	mov	DWORD PTR ?BAL@@3HA, 0			; BAL
	mov	DWORD PTR ?BAR@@3HA, 0			; BAR
	mov	DWORD PTR ?BKframe@@3HA, 0		; BKframe
	mov	DWORD PTR ?KnockHIT@@3HA, 0		; KnockHIT
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0

; 2053 : 				BHplay[0] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA, 0

; 2054 : 				BHplay[1] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA+4, 0

; 2055 : 				BHplay[2] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA+8, 0

; 2056 : 				BHMPlay = FALSE;

	mov	DWORD PTR ?BHMPlay@@3HA, 0		; BHMPlay

; 2057 : 				BHframe[0] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA, 0

; 2058 : 				BHframe[1] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA+4, 0

; 2059 : 				BHframe[2] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA+8, 0

; 2060 : 				Timer[24] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+96, 2

; 2061 : 				Timer[26] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+104, 2

; 2062 : 				Timer[27] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+108, 2

; 2063 : 
; 2064 : 			}
; 2065 : 			//·ºÆ® È®ÀÎ¿ë
; 2066 : 			//::__Lock(g_pDDSBack);
; 2067 : 			//__DrawRect16(PHIT.left, PHIT.top, PHIT.right, PHIT.bottom, wPixel);
; 2068 : 			//__DrawRect16(HIT.left, HIT.top, HIT.right, HIT.bottom, wPixel);
; 2069 : 			//__DrawRect16(Cast.left, Cast.top, Cast.right, Cast.bottom, wPixel);
; 2070 : 			//__DrawRect16(BOSS.left, BOSS.top, BOSS.right, BOSS.bottom, wPixel);
; 2071 : 			//__DrawRect16(Knock.left, Knock.top, Knock.right, Knock.bottom, wPixel);
; 2072 : 			//for (i = 0; i < 5; i++)
; 2073 : 			//{
; 2074 : 			//	__DrawRect16(BAHIT[i].left, BAHIT[i].top, BAHIT[i].right, BAHIT[i].bottom, wPixel);
; 2075 : 			//}
; 2076 : 			//::__Unlock(g_pDDSBack);
; 2077 : 			if (Timer[7] > 0)

	jmp	SHORT $LN1150@DXW_MainLo
$LN414@DXW_MainLo:
	cmp	DWORD PTR ?Timer@@3PAHA+28, 0
	jle	SHORT $LN416@DXW_MainLo
$LN1150@DXW_MainLo:

; 2078 : 			{
; 2079 : 				Timer[7]--;

	dec	DWORD PTR ?Timer@@3PAHA+28
$LN416@DXW_MainLo:

; 2080 : 			}
; 2081 : 			if (Timer[5] > 0)

	cmp	DWORD PTR ?Timer@@3PAHA+20, 0
	jle	SHORT $LN1072@DXW_MainLo

; 2082 : 			{
; 2083 : 				Timer[5] -= 1;

	dec	DWORD PTR ?Timer@@3PAHA+20
	jmp	SHORT $LN419@DXW_MainLo
$LN1072@DXW_MainLo:

; 2084 : 			}
; 2085 : 			else if (Timer[5] <= 0 && bossimmu == TRUE)

	cmp	DWORD PTR ?bossimmu@@3HA, 1		; bossimmu
	jne	SHORT $LN419@DXW_MainLo

; 2086 : 			{
; 2087 : 				bossimmu = FALSE;

	mov	DWORD PTR ?bossimmu@@3HA, 0		; bossimmu

; 2088 : 				Timer[5] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+20, 0
$LN419@DXW_MainLo:

; 2089 : 			}
; 2090 : 			::__PutSprite(g_pDDSHP, 130, 0);

	push	0
	push	130					; 00000082H
	push	DWORD PTR ?g_pDDSHP@@3PAUIDirectDrawSurface7@@A ; g_pDDSHP
	call	?__PutSprite@@YAXPAUIDirectDrawSurface7@@HH@Z ; __PutSprite

; 2091 : 			if (P1HP > 1)

	mov	eax, DWORD PTR ?P1HP@@3HA		; P1HP
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jle	$LN979@DXW_MainLo

; 2092 : 			{
; 2093 : 				::__Putbar(g_pDDSHPbar, 132, 2, P1MHP, P1HP, P1HPrate);

	movss	xmm0, DWORD PTR ?P1HPrate@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	eax
	push	DWORD PTR ?P1MHP@@3HA			; P1MHP

; 2210 : 						 }
; 2211 : 						 if (g_bCast == TRUE && g_bBLR == TRUE)

	jmp	$LN1496@DXW_MainLo
$LN422@DXW_MainLo:

; 2094 : 			}
; 2095 : 			::__PutSprite(g_pDDSPHP, 400, 737);
; 2096 : 			if (PlayerHP > 1)
; 2097 : 			{
; 2098 : 				::__Putbar(g_pDDSPHPbar, 425, 744, PlayerMHP, PlayerHP, PlayerHPrate);
; 2099 : 			}
; 2100 : 			//////////////////////////////////////////////////////////
; 2101 : 			///// ±âÅ¸Á¤º¸ 
; 2102 : 			DXW_DisplayInfo();
; 2103 : 			break;
; 2104 : 			//////////////////////////////////////////////////////////
; 2105 : 			//////////////////////////////////////////////////////////
; 2106 : 			//////////////////////////////////////////////////////////
; 2107 : 			//////////////////////////////////////////////////////////
; 2108 : 			//////////////////////////////////////////////////////////
; 2109 : 			//////////////////////////////////////////////////////////
; 2110 : 			//////////////////////////////////////////////////////////
; 2111 : 			//////////////////////////////////////////////////////////
; 2112 : 			//////////////////////////////////////////////////////////
; 2113 : 			//////////////////////////////////////////////////////////
; 2114 : 			//////////////////////////////////////////////////////////
; 2115 : 			//////////////////////////////////////////////////////////
; 2116 : 				case 2 : if (P2musicstart == TRUE)

	cmp	DWORD PTR ?P2musicstart@@3HA, 1		; P2musicstart
	je	SHORT $LN424@DXW_MainLo

; 2117 : 				{
; 2118 : 				}
; 2119 : 						else
; 2120 : 						{
; 2121 : 							m_HHSound.Play(g_pDS[1], true);

	push	1
	push	DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+4
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Play@CHHSound@@QAEXPAUIDirectSoundBuffer@@_N@Z ; CHHSound::Play

; 2122 : 							P2musicstart = TRUE;

	mov	DWORD PTR ?P2musicstart@@3HA, 1		; P2musicstart
$LN424@DXW_MainLo:

; 2123 : 						}
; 2124 : 						 //¹è°æ
; 2125 : 							 ::__PutImage(g_pDDSBG2, Bx, 0);

	push	0
	push	DWORD PTR ?Bx@@3HA			; Bx
	push	DWORD PTR ?g_pDDSBG2@@3PAUIDirectDrawSurface7@@A ; g_pDDSBG2
	call	?__PutImage@@YAXPAUIDirectDrawSurface7@@HH@Z ; __PutImage

; 2126 : 						 if (Timer[11] > 0)

	mov	eax, DWORD PTR ?Timer@@3PAHA+44
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	SHORT $LN425@DXW_MainLo

; 2127 : 						 {
; 2128 : 							 Timer[11] -= 1;

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+44, eax
$LN425@DXW_MainLo:

; 2129 : 						 }
; 2130 : 						 if (Timer[12] > 0)

	mov	eax, DWORD PTR ?Timer@@3PAHA+48
	test	eax, eax
	jle	SHORT $LN426@DXW_MainLo

; 2131 : 						 {
; 2132 : 							 Timer[12] -= 1;

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+48, eax
	jmp	SHORT $LN428@DXW_MainLo
$LN426@DXW_MainLo:

; 2133 : 						 }
; 2134 : 						 else if (Timer[15] > 0)

	mov	eax, DWORD PTR ?Timer@@3PAHA+60
	test	eax, eax
	jle	SHORT $LN428@DXW_MainLo

; 2135 : 						 {
; 2136 : 							 Timer[15] -= 1;

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+60, eax
$LN428@DXW_MainLo:

; 2137 : 						 }
; 2138 : 						 //ÀÌµ¿ ¹× Á¡ÇÁ ·ÎÁ÷
; 2139 : 						 ///////////////////////
; 2140 : 						 ///////////////////////
; 2141 : 						 ///////////////////////
; 2142 : 						 ///////////////////////
; 2143 : 						 //				g_BPos.x += 1;
; 2144 : 						 if (g_BPos.x + 60 < g_Pos.x) //º¸½º ¿À¸¥ÂÊ ÀüÈ¯

	mov	ecx, DWORD PTR ?g_BPos@@3UtagPOINT@@A
	mov	edx, DWORD PTR ?g_Pos@@3UtagPOINT@@A
	lea	eax, DWORD PTR [ecx+60]
	cmp	eax, edx
	jge	SHORT $LN429@DXW_MainLo

; 2145 : 						 {
; 2146 : 							 g_bBLR = TRUE;

	mov	DWORD PTR ?g_bBLR@@3HA, 1		; g_bBLR

; 2147 : 							 g_bBLL = FALSE;

	mov	DWORD PTR ?g_bBLL@@3HA, 0		; g_bBLL
	jmp	SHORT $LN431@DXW_MainLo
$LN429@DXW_MainLo:

; 2148 : 						 }
; 2149 : 						 else if (g_BPos.x > g_Pos.x) //º¸½º ¿ÞÂÊ ÀüÈ¯

	cmp	ecx, edx
	jle	SHORT $LN431@DXW_MainLo

; 2150 : 						 {
; 2151 : 							 g_bBLR = FALSE;

	mov	DWORD PTR ?g_bBLR@@3HA, 0		; g_bBLR

; 2152 : 							 g_bBLL = TRUE;

	mov	DWORD PTR ?g_bBLL@@3HA, 1		; g_bBLL
$LN431@DXW_MainLo:

; 2153 : 						 }
; 2154 : 						 if (g_BPos.x + 300 < g_Pos.x) //º¸½º ¿À¸¥ÂÊ ÀÌµ¿

	lea	eax, DWORD PTR [ecx+300]
	cmp	eax, edx
	jge	SHORT $LN432@DXW_MainLo

; 2155 : 						 {
; 2156 : 							 if (BossAtt == FALSE)

	cmp	DWORD PTR ?BossAtt@@3HA, 0		; BossAtt
	jne	SHORT $LN434@DXW_MainLo

; 2157 : 							 {
; 2158 : 								 g_BPos.x += 1;

	inc	ecx
	mov	DWORD PTR ?g_BPos@@3UtagPOINT@@A, ecx
$LN434@DXW_MainLo:

; 2159 : 							 }
; 2160 : 							 g_bBLR = TRUE;

	mov	DWORD PTR ?g_bBLR@@3HA, 1		; g_bBLR

; 2161 : 							 g_bBLL = FALSE;

	mov	DWORD PTR ?g_bBLL@@3HA, 0		; g_bBLL
	jmp	SHORT $LN435@DXW_MainLo
$LN432@DXW_MainLo:

; 2162 : 						 }
; 2163 : 						 else if (g_BPos.x - 200 > g_Pos.x) //º¸½º ¿ÞÂÊ ÀÌµ¿

	lea	eax, DWORD PTR [ecx-200]
	cmp	eax, edx
	jle	SHORT $LN435@DXW_MainLo

; 2164 : 						 {
; 2165 : 							 if (BossAtt == FALSE)

	cmp	DWORD PTR ?BossAtt@@3HA, 0		; BossAtt
	jne	SHORT $LN436@DXW_MainLo

; 2166 : 							 {
; 2167 : 								 g_BPos.x -= 1;

	dec	ecx
	mov	DWORD PTR ?g_BPos@@3UtagPOINT@@A, ecx
$LN436@DXW_MainLo:

; 2168 : 							 }
; 2169 : 							 g_bBLR = FALSE;

	mov	DWORD PTR ?g_bBLR@@3HA, 0		; g_bBLR

; 2170 : 							 g_bBLL = TRUE;

	mov	DWORD PTR ?g_bBLL@@3HA, 1		; g_bBLL
$LN435@DXW_MainLo:

; 2171 : 						 }
; 2172 : 						 if (::GetKeyState(0x58) & 0x80 && g_bAtt == FALSE && g_bRush == FALSE) //°ø°Ý ·ÎÁ÷

	push	88					; 00000058H
	call	esi
	test	al, al
	jns	$LN1346@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN1346@DXW_MainLo
	cmp	DWORD PTR ?g_bRush@@3HA, 0		; g_bRush
	jne	SHORT $LN1346@DXW_MainLo

; 2173 : 						 {
; 2174 : 							 if (g_bLookR == TRUE)

	cmp	DWORD PTR ?g_bLookR@@3HA, 1		; g_bLookR
	jne	SHORT $LN438@DXW_MainLo

; 2175 : 							 {
; 2176 : 								 g_bAR = TRUE;

	mov	DWORD PTR ?g_bAR@@3HA, 1		; g_bAR

; 2177 : 								 g_bAtt = TRUE;
; 2178 : 								 Aframe = 12;

	mov	DWORD PTR ?Aframe@@3HA, 12		; Aframe, 0000000cH

; 2179 : 								 if (g_pDS[3])
; 2180 : 									 m_HHSound.Stop(g_pDS[3]);
; 2181 : 								 m_HHSound.Play(g_pDS[3], false);

	jmp	SHORT $LN1499@DXW_MainLo
$LN438@DXW_MainLo:

; 2182 : 							 }
; 2183 : 							 else if (g_bLookL == TRUE)

	cmp	DWORD PTR ?g_bLookL@@3HA, 1		; g_bLookL
	jne	SHORT $LN1346@DXW_MainLo

; 2184 : 							 {
; 2185 : 								 g_bAL = TRUE;

	mov	DWORD PTR ?g_bAL@@3HA, 1		; g_bAL

; 2186 : 								 g_bAtt = TRUE;
; 2187 : 								 Aframe = 0;

	mov	DWORD PTR ?Aframe@@3HA, 0		; Aframe
$LN1499@DXW_MainLo:

; 2188 : 								 if (g_pDS[3])
; 2189 : 									 m_HHSound.Stop(g_pDS[3]);
; 2190 : 								 m_HHSound.Play(g_pDS[3], false);
; 2191 : 							 }
; 2192 : 						 }
; 2193 : 						 //ÀÌµ¿ ¹× Á¡ÇÁ ·ÎÁ÷ ³¡
; 2194 : 						 //// Ç¥¸é Å¬¸®¾î	
; 2195 : 						 //_FillSurface(g_pDDSBack, 0x00000000);
; 2196 : 						 nX = g_Pos.x;

	mov	eax, DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+12
	mov	DWORD PTR ?g_bAtt@@3HA, 1		; g_bAtt
	test	eax, eax
	je	SHORT $LN442@DXW_MainLo
	push	eax
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Stop@CHHSound@@QAEXPAUIDirectSoundBuffer@@@Z ; CHHSound::Stop
	mov	eax, DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+12
$LN442@DXW_MainLo:
	push	0
	push	eax
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Play@CHHSound@@QAEXPAUIDirectSoundBuffer@@_N@Z ; CHHSound::Play
$LN1346@DXW_MainLo:

; 2197 : 						 nY = g_Pos.y;
; 2198 : 						 bnX = g_BPos.x;
; 2199 : 						 bnY = g_BPos.y;
; 2200 : 						 SnX = nX;
; 2201 : 						 SnY = nY - 65;
; 2202 : 						 //Ä³½ºÆÃ ¾Ö´Ï¸ÞÀÌ¼Ç
; 2203 : 						 if (Timer[14] >0)

	mov	ecx, DWORD PTR ?Timer@@3PAHA+56
	mov	esi, DWORD PTR ?g_Pos@@3UtagPOINT@@A
	mov	edi, DWORD PTR ?g_Pos@@3UtagPOINT@@A+4
	mov	eax, DWORD PTR ?g_BPos@@3UtagPOINT@@A
	mov	edx, DWORD PTR ?g_BPos@@3UtagPOINT@@A+4
	mov	DWORD PTR _nX$3$[ebp], esi
	mov	DWORD PTR _nY$1$[ebp], edi
	mov	DWORD PTR _bnX$2$[ebp], eax
	mov	DWORD PTR _bnY$2$[ebp], edx
	test	ecx, ecx
	jle	SHORT $LN443@DXW_MainLo

; 2204 : 						 { 
; 2205 : 							 Timer[14] -= 1;

	dec	ecx
	mov	DWORD PTR ?Timer@@3PAHA+56, ecx
$LN443@DXW_MainLo:

; 2206 : 						 }
; 2207 : 						 if (g_bCast == TRUE && g_bBLL == TRUE)

	mov	ecx, DWORD PTR ?g_bCast@@3HA		; g_bCast
	cmp	ecx, 1
	jne	SHORT $LN445@DXW_MainLo
	add	edx, -30				; ffffffe2H
	mov	DWORD PTR $T25[ebp], edx
	cmp	DWORD PTR ?g_bBLL@@3HA, ecx		; g_bBLL
	jne	SHORT $LN1151@DXW_MainLo

; 2208 : 						 {
; 2209 : 							 ::__PutAnimeSprite(g_pDDSCast2, bnX, bnY - 30, 20, CAframe, 192, 192, 0);

	push	0
	push	192					; 000000c0H
	push	192					; 000000c0H
	push	DWORD PTR ?CAframe@@3HA			; CAframe
	push	20					; 00000014H
	push	edx
	push	eax
	push	DWORD PTR ?g_pDDSCast2@@3PAUIDirectDrawSurface7@@A ; g_pDDSCast2
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite

; 2210 : 						 }
; 2211 : 						 if (g_bCast == TRUE && g_bBLR == TRUE)

	mov	ecx, DWORD PTR ?g_bCast@@3HA		; g_bCast
	add	esp, 32					; 00000020H
	cmp	ecx, 1
	jne	SHORT $LN445@DXW_MainLo
	mov	eax, DWORD PTR _bnX$2$[ebp]
	mov	edx, DWORD PTR $T25[ebp]
$LN1151@DXW_MainLo:
	cmp	DWORD PTR ?g_bBLR@@3HA, 1		; g_bBLR
	jne	SHORT $LN445@DXW_MainLo

; 2212 : 						 {
; 2213 : 							 ::__PutAnimeSprite(g_pDDSCast2, bnX - 20, bnY - 30, 20, CAframe, 192, 192, 0);

	push	0
	push	192					; 000000c0H
	push	192					; 000000c0H
	push	DWORD PTR ?CAframe@@3HA			; CAframe
	add	eax, -20				; ffffffecH
	push	20					; 00000014H
	push	edx
	push	eax
	push	DWORD PTR ?g_pDDSCast2@@3PAUIDirectDrawSurface7@@A ; g_pDDSCast2
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	mov	ecx, DWORD PTR ?g_bCast@@3HA		; g_bCast
	add	esp, 32					; 00000020H
$LN445@DXW_MainLo:

; 2214 : 						 }
; 2215 : 						 if (Timer[10] > 0 && g_bCast == TRUE)

	mov	eax, DWORD PTR ?Timer@@3PAHA+40
	test	eax, eax
	jle	SHORT $LN1071@DXW_MainLo
	cmp	ecx, 1
	jne	SHORT $LN1348@DXW_MainLo

; 2216 : 						 {
; 2217 : 							 Timer[10] -= 1;

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+40, eax
$LN1348@DXW_MainLo:

; 2223 : 						 }
; 2224 : 						 if (CAframe == 20)

	mov	eax, DWORD PTR ?CAframe@@3HA		; CAframe
	jmp	SHORT $LN448@DXW_MainLo
$LN1071@DXW_MainLo:

; 2218 : 						 }
; 2219 : 						 else if (Timer[10] <= 0 && CAframe <= 19 && g_bCast == TRUE)

	mov	eax, DWORD PTR ?CAframe@@3HA		; CAframe
	cmp	eax, 19					; 00000013H
	jg	SHORT $LN448@DXW_MainLo
	cmp	ecx, 1
	jne	SHORT $LN448@DXW_MainLo

; 2220 : 						 {
; 2221 : 							 CAframe++;

	inc	eax

; 2222 : 							 Timer[10] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+40, 2
	mov	DWORD PTR ?CAframe@@3HA, eax		; CAframe
$LN448@DXW_MainLo:

; 2223 : 						 }
; 2224 : 						 if (CAframe == 20)

	cmp	eax, 20					; 00000014H
	jne	SHORT $LN449@DXW_MainLo

; 2225 : 						 {
; 2226 : 							 Timer[10] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+40, 0

; 2227 : 							 CAframe = 0;

	mov	DWORD PTR ?CAframe@@3HA, 0		; CAframe
$LN449@DXW_MainLo:

; 2228 : 						 }
; 2229 : 						 //ÇÃ·¹ÀÌ¾î ÇÇ°Ý·ºÆ® ¼³Á¤
; 2230 : 						 if (g_bLookL)

	cmp	DWORD PTR ?g_bLookL@@3HA, 0		; g_bLookL
	je	SHORT $LN450@DXW_MainLo

; 2231 : 						 {
; 2232 : 							 PHIT = { nX + 11,nY + 10,nX + 45,nY + 80 };

	lea	eax, DWORD PTR [esi+11]
	mov	DWORD PTR $T16[ebp], eax
	lea	eax, DWORD PTR [edi+10]
	mov	DWORD PTR $T16[ebp+4], eax
	lea	eax, DWORD PTR [esi+45]
	jmp	SHORT $LN1500@DXW_MainLo
$LN450@DXW_MainLo:

; 2233 : 						 }
; 2234 : 						 else if (g_bLookR)

	cmp	DWORD PTR ?g_bLookR@@3HA, 0		; g_bLookR
	je	SHORT $LN452@DXW_MainLo

; 2235 : 						 {
; 2236 : 							 PHIT = { nX + 25,nY + 10,nX + 58,nY + 80 };

	lea	eax, DWORD PTR [esi+25]
	mov	DWORD PTR $T15[ebp], eax
	lea	eax, DWORD PTR [edi+10]
	mov	DWORD PTR $T15[ebp+4], eax
	lea	eax, DWORD PTR [esi+58]
$LN1500@DXW_MainLo:

; 2237 : 						 }
; 2238 : 						 if (IntersectRect(&rcDest, &Cast, &PHIT))

	mov	DWORD PTR $T15[ebp+8], eax
	lea	eax, DWORD PTR [edi+80]
	mov	DWORD PTR $T15[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T15[ebp]
	movups	XMMWORD PTR ?PHIT@@3UtagRECT@@A, xmm0
$LN452@DXW_MainLo:
	push	OFFSET ?PHIT@@3UtagRECT@@A		; PHIT
	push	OFFSET ?Cast@@3UtagRECT@@A		; Cast
	push	OFFSET ?rcDest@@3UtagRECT@@A		; rcDest
	call	DWORD PTR __imp__IntersectRect@12
	test	eax, eax
	je	SHORT $LN453@DXW_MainLo

; 2239 : 						 {
; 2240 : 							 PlayerHP -= 1000;

	sub	DWORD PTR ?PlayerHP@@3HA, 1000		; PlayerHP, 000003e8H
$LN453@DXW_MainLo:

; 2241 : 						 }
; 2242 : 						 //// º¸½º ½ºÅÄµù
; 2243 : 
; 2244 : 						 if (Timer[17] == 0 && BossAtt == FALSE)

	mov	eax, DWORD PTR ?Timer@@3PAHA+68
	mov	ecx, DWORD PTR ?BossAtt@@3HA		; BossAtt
	test	eax, eax
	jne	SHORT $LN1501@DXW_MainLo
	test	ecx, ecx
	jne	SHORT $LN458@DXW_MainLo

; 2245 : 						 {
; 2246 : 							 Timer[16] = 4;
; 2247 : 							 BossAtt = TRUE;
; 2248 : 							 if (g_bBLL == TRUE)

	cmp	DWORD PTR ?g_bBLL@@3HA, 1		; g_bBLL
	mov	eax, 4
	mov	DWORD PTR ?Timer@@3PAHA+64, eax
	mov	DWORD PTR ?BossAtt@@3HA, 1		; BossAtt
	jne	SHORT $LN456@DXW_MainLo

; 2249 : 							 {
; 2250 : 								 BKframe = 0;
; 2251 : 								 BAL = TRUE;
; 2252 : 								 BAR = FALSE;

	mov	DWORD PTR ?BAR@@3HA$2[ebp], ecx
	lea	edx, DWORD PTR [ecx+1]
	jmp	SHORT $LN457@DXW_MainLo
$LN456@DXW_MainLo:

; 2253 : 							 }
; 2254 : 							 else { BKframe = 16; BAR = TRUE; BAL = FALSE; }

	mov	DWORD PTR ?BAR@@3HA$2[ebp], 1
	mov	ecx, 16					; 00000010H
	xor	edx, edx
$LN457@DXW_MainLo:
	mov	edi, DWORD PTR ?BAR@@3HA$2[ebp]
	mov	DWORD PTR ?BAL@@3HA, edx		; BAL
	mov	DWORD PTR ?BKframe@@3HA, ecx		; BKframe
	mov	DWORD PTR ?BAR@@3HA, edi		; BAR
	jmp	SHORT $LN1152@DXW_MainLo
$LN1501@DXW_MainLo:

; 2255 : 						 }
; 2256 : 						 else if (Timer[17] > 0)

	jle	SHORT $LN458@DXW_MainLo

; 2257 : 						 {
; 2258 : 							 Timer[17] -= 1;

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+68, eax
$LN458@DXW_MainLo:

; 2259 : 						 }
; 2260 : 						 if (BossAtt == TRUE)

	mov	edx, DWORD PTR ?BAL@@3HA		; BAL
	cmp	ecx, 1
	mov	ecx, DWORD PTR ?BKframe@@3HA		; BKframe
	jne	$LN1349@DXW_MainLo
	mov	edi, DWORD PTR ?BAR@@3HA		; BAR
	mov	eax, DWORD PTR ?Timer@@3PAHA+64
	mov	DWORD PTR ?BAR@@3HA$2[ebp], edi
$LN1152@DXW_MainLo:

; 2261 : 						 {
; 2262 : 							 if (BAL == TRUE)

	cmp	edx, 1
	jne	SHORT $LN460@DXW_MainLo

; 2263 : 							 {
; 2264 : 								 ::__PutAnimeSprite(g_pDDSDragAtt, bnX - 513, bnY - 99, 17, BKframe, 720, 315, 0);

	mov	eax, DWORD PTR _bnY$2$[ebp]
	push	0
	push	315					; 0000013bH
	push	720					; 000002d0H
	push	ecx
	push	17					; 00000011H
	add	eax, -99				; ffffff9dH
	push	eax
	mov	eax, DWORD PTR _bnX$2$[ebp]
	add	eax, -513				; fffffdffH
	push	eax
	push	DWORD PTR ?g_pDDSDragAtt@@3PAUIDirectDrawSurface7@@A ; g_pDDSDragAtt
	jmp	SHORT $LN1502@DXW_MainLo
$LN460@DXW_MainLo:

; 2265 : 							 }
; 2266 : 							 else if (BAR == TRUE)

	cmp	DWORD PTR ?BAR@@3HA$2[ebp], 1
	mov	edi, DWORD PTR _nY$1$[ebp]
	jne	SHORT $LN462@DXW_MainLo

; 2267 : 							 {
; 2268 : 								 ::__PutAnimeSprite(g_pDDSDragAttR, bnX - 15, bnY - 99, 17, BKframe, 720, 315, 0);

	mov	eax, DWORD PTR _bnY$2$[ebp]
	push	0
	push	315					; 0000013bH
	push	720					; 000002d0H
	push	ecx
	push	17					; 00000011H
	add	eax, -99				; ffffff9dH
	push	eax
	mov	eax, DWORD PTR _bnX$2$[ebp]
	add	eax, -15				; fffffff1H
	push	eax
	push	DWORD PTR ?g_pDDSDragAttR@@3PAUIDirectDrawSurface7@@A ; g_pDDSDragAttR
$LN1502@DXW_MainLo:

; 2269 : 							 }
; 2270 : 							 if (Timer[16] > 0)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	mov	edi, DWORD PTR ?BAR@@3HA		; BAR
	add	esp, 32					; 00000020H
	mov	edx, DWORD PTR ?BAL@@3HA		; BAL
	mov	ecx, DWORD PTR ?BKframe@@3HA		; BKframe
	mov	eax, DWORD PTR ?Timer@@3PAHA+64
	mov	DWORD PTR ?BAR@@3HA$2[ebp], edi
	mov	edi, DWORD PTR _nY$1$[ebp]
$LN462@DXW_MainLo:
	test	eax, eax
	jle	SHORT $LN1503@DXW_MainLo

; 2271 : 							 {
; 2272 : 								 Timer[16] -= 1;

	dec	eax
	jmp	SHORT $LN1504@DXW_MainLo
$LN1503@DXW_MainLo:

; 2273 : 							 }
; 2274 : 							 else if (Timer[16] == 0)

	jne	SHORT $LN474@DXW_MainLo

; 2275 : 							 {
; 2276 : 								 if (BAL == TRUE)

	cmp	edx, 1
	jne	SHORT $LN466@DXW_MainLo

; 2277 : 								 {
; 2278 : 									 BKframe++;

	inc	ecx
	jmp	SHORT $LN1505@DXW_MainLo
$LN466@DXW_MainLo:

; 2279 : 								 }
; 2280 : 								 else if (BAR == TRUE)

	cmp	DWORD PTR ?BAR@@3HA$2[ebp], 1
	jne	SHORT $LN468@DXW_MainLo

; 2281 : 								 {
; 2282 : 									 BKframe--;

	dec	ecx
$LN1505@DXW_MainLo:

; 2283 : 								 }
; 2284 : 								 if (BKframe < 8 && BAL == TRUE)

	mov	DWORD PTR ?BKframe@@3HA, ecx		; BKframe
$LN468@DXW_MainLo:
	mov	DWORD PTR tv11446[ebp], 4
	cmp	ecx, 8
	jge	SHORT $LN1506@DXW_MainLo
	cmp	edx, 1
	jne	SHORT $LN469@DXW_MainLo

; 2285 : 								 {
; 2286 : 									 Timer[16] = 5;

	lea	eax, DWORD PTR [edx+4]
	jmp	SHORT $LN1507@DXW_MainLo
$LN469@DXW_MainLo:

; 2287 : 								 }
; 2288 : 								 else if (BKframe > 8 && BAL == TRUE)

	cmp	ecx, 8
$LN1506@DXW_MainLo:
	jle	SHORT $LN471@DXW_MainLo
	cmp	edx, 1
	cmove	eax, DWORD PTR tv11446[ebp]
$LN1507@DXW_MainLo:

; 2289 : 								 {
; 2290 : 									 Timer[16] = 4;
; 2291 : 								 }
; 2292 : 								 if (BKframe > 9 && BAR == TRUE)

	mov	DWORD PTR ?Timer@@3PAHA+64, eax
$LN471@DXW_MainLo:
	cmp	ecx, 9
	jle	SHORT $LN1508@DXW_MainLo
	cmp	DWORD PTR ?BAR@@3HA$2[ebp], 1
	jne	SHORT $LN472@DXW_MainLo

; 2293 : 								 {
; 2294 : 									 Timer[16] = 5;

	mov	DWORD PTR ?Timer@@3PAHA+64, 5
	jmp	SHORT $LN474@DXW_MainLo
$LN472@DXW_MainLo:

; 2295 : 								 }
; 2296 : 								 else if (BKframe < 9 && BAR == TRUE)

	cmp	ecx, 9
$LN1508@DXW_MainLo:
	jge	SHORT $LN474@DXW_MainLo
	cmp	DWORD PTR ?BAR@@3HA$2[ebp], 1
	cmove	eax, DWORD PTR tv11446[ebp]
$LN1504@DXW_MainLo:

; 2297 : 								 {
; 2298 : 									 Timer[16] = 4;
; 2299 : 								 }
; 2300 : 							 }
; 2301 : 							 if (BKframe == 16 && BAL == TRUE)

	mov	DWORD PTR ?Timer@@3PAHA+64, eax
$LN474@DXW_MainLo:
	cmp	ecx, 16					; 00000010H
	jne	SHORT $LN475@DXW_MainLo
	cmp	edx, 1
	jne	$LN480@DXW_MainLo

; 2302 : 							 {
; 2303 : 								 Timer[17] = (rand() % 150) + 200;

	call	_rand
	cdq
	mov	ecx, 150				; 00000096H
	idiv	ecx

; 2304 : 								 Timer[16] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+64, 0
	add	edx, 200				; 000000c8H

; 2305 : 								 BossAtt = FALSE;

	mov	DWORD PTR ?BossAtt@@3HA, 0		; BossAtt
	mov	DWORD PTR ?Timer@@3PAHA+68, edx

; 2306 : 								 BAL = FALSE;

	mov	DWORD PTR ?BAL@@3HA, 0			; BAL

; 2307 : 								 BAR = FALSE;

	mov	DWORD PTR ?BAR@@3HA, 0			; BAR

; 2308 : 								 KnockHIT = FALSE;

	mov	DWORD PTR ?KnockHIT@@3HA, 0		; KnockHIT

; 2309 : 								 BKframe = 0;

	mov	DWORD PTR ?BKframe@@3HA, 0		; BKframe

; 2310 : 								 Knock = { 0,0,1,1 };
; 2311 : 							 }
; 2312 : 							 if (BKframe == 0 && BAR == TRUE)

	jmp	$LN1509@DXW_MainLo
$LN475@DXW_MainLo:
	test	ecx, ecx
	jne	SHORT $LN476@DXW_MainLo
	cmp	DWORD PTR ?BAR@@3HA$2[ebp], 1
	jne	$LN480@DXW_MainLo

; 2313 : 							 {
; 2314 : 								 Timer[17] = (rand() % 150) + 200;

	call	_rand
	cdq
	mov	ecx, 150				; 00000096H
	idiv	ecx

; 2315 : 								 Timer[16] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+64, 0
	add	edx, 200				; 000000c8H

; 2316 : 								 BossAtt = FALSE;

	mov	DWORD PTR ?BossAtt@@3HA, 0		; BossAtt
	mov	DWORD PTR ?Timer@@3PAHA+68, edx

; 2317 : 								 BAL = FALSE;

	mov	DWORD PTR ?BAL@@3HA, 0			; BAL

; 2318 : 								 BAR = FALSE;

	mov	DWORD PTR ?BAR@@3HA, 0			; BAR

; 2319 : 								 BKframe = 0;

	mov	DWORD PTR ?BKframe@@3HA, 0		; BKframe

; 2320 : 								 KnockHIT = FALSE;

	mov	DWORD PTR ?KnockHIT@@3HA, 0		; KnockHIT

; 2321 : 								 Knock = { 0,0,1,1 };
; 2322 : 							 }
; 2323 : 						 }
; 2324 : 						 if (BKframe > 7 && BAL == TRUE && KnockHIT == FALSE)

	jmp	$LN1509@DXW_MainLo
$LN1349@DXW_MainLo:

; 2259 : 						 }
; 2260 : 						 if (BossAtt == TRUE)

	mov	eax, DWORD PTR ?BAR@@3HA		; BAR
	mov	DWORD PTR ?BAR@@3HA$2[ebp], eax
$LN476@DXW_MainLo:

; 2321 : 								 Knock = { 0,0,1,1 };
; 2322 : 							 }
; 2323 : 						 }
; 2324 : 						 if (BKframe > 7 && BAL == TRUE && KnockHIT == FALSE)

	cmp	ecx, 7
	jle	SHORT $LN477@DXW_MainLo
	cmp	edx, 1
	jne	SHORT $LN477@DXW_MainLo
	cmp	DWORD PTR ?KnockHIT@@3HA, 0		; KnockHIT
	jne	SHORT $LN477@DXW_MainLo

; 2325 : 						 {
; 2326 : 							 Knock = { bnX - 483 ,bnY - 20,bnX + 40,bnY + 140 };

	mov	eax, DWORD PTR _bnX$2$[ebp]
	add	eax, -483				; fffffe1dH
	mov	DWORD PTR $T14[ebp], eax
	mov	eax, DWORD PTR _bnY$2$[ebp]
	add	eax, -20				; ffffffecH
	mov	DWORD PTR $T14[ebp+4], eax
	mov	eax, DWORD PTR _bnX$2$[ebp]
	add	eax, 40					; 00000028H
	mov	DWORD PTR $T14[ebp+8], eax
	mov	eax, DWORD PTR _bnY$2$[ebp]
	add	eax, 140				; 0000008cH
	mov	DWORD PTR $T14[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T14[ebp]
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
$LN477@DXW_MainLo:

; 2327 : 						 }
; 2328 : 						 if (BKframe < 8 && BAR == TRUE && KnockHIT == FALSE)

	mov	eax, DWORD PTR ?BAR@@3HA$2[ebp]
	cmp	ecx, 8
	jge	SHORT $LN478@DXW_MainLo
	cmp	eax, 1
	jne	SHORT $LN478@DXW_MainLo
	cmp	DWORD PTR ?KnockHIT@@3HA, 0		; KnockHIT
	jne	SHORT $LN478@DXW_MainLo

; 2329 : 						 {
; 2330 : 							 Knock = { bnX + 130 ,bnY - 20,bnX + 653,bnY + 140 };

	mov	eax, DWORD PTR _bnX$2$[ebp]
	add	eax, 130				; 00000082H
	mov	DWORD PTR $T13[ebp], eax
	mov	eax, DWORD PTR _bnY$2$[ebp]
	add	eax, -20				; ffffffecH
	mov	DWORD PTR $T13[ebp+4], eax
	mov	eax, DWORD PTR _bnX$2$[ebp]
	add	eax, 653				; 0000028dH
	mov	DWORD PTR $T13[ebp+8], eax
	mov	eax, DWORD PTR _bnY$2$[ebp]
	add	eax, 140				; 0000008cH
	mov	DWORD PTR $T13[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T13[ebp]
	mov	eax, DWORD PTR ?BAR@@3HA$2[ebp]
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
$LN478@DXW_MainLo:

; 2331 : 						 }
; 2332 : 						 if (BKframe > 12 && BAL == TRUE)

	cmp	ecx, 12					; 0000000cH
	jle	SHORT $LN479@DXW_MainLo
	cmp	edx, 1
	jne	SHORT $LN479@DXW_MainLo

; 2333 : 						 {
; 2334 : 							 Knock = { 0,0,1,1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
$LN479@DXW_MainLo:

; 2335 : 						 }
; 2336 : 						 if (BKframe < 5 && BAR == TRUE)

	cmp	ecx, 5
	jge	SHORT $LN480@DXW_MainLo
	cmp	eax, 1
	jne	SHORT $LN480@DXW_MainLo
$LN1509@DXW_MainLo:

; 2337 : 						 {
; 2338 : 							Knock = { 0,0,1,1 };
; 2339 : 						 }
; 2340 : 						 if (IntersectRect(&rcDest, &Knock, &PHIT))

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
$LN480@DXW_MainLo:
	push	OFFSET ?PHIT@@3UtagRECT@@A		; PHIT
	push	OFFSET ?Knock@@3UtagRECT@@A		; Knock
	push	OFFSET ?rcDest@@3UtagRECT@@A		; rcDest
	call	DWORD PTR __imp__IntersectRect@12
	test	eax, eax
	je	$LN1354@DXW_MainLo

; 2341 : 						 {
; 2342 : 							 if (BAR == TRUE && Knockback == FALSE)

	cmp	DWORD PTR ?BAR@@3HA, 1			; BAR
	mov	eax, DWORD PTR ?Knockback@@3HA		; Knockback
	jne	$LN482@DXW_MainLo
	test	eax, eax
	jne	$LN482@DXW_MainLo

; 2343 : 							 {
; 2344 : 								 Knockspd = 40;
; 2345 : 								 Knockback = TRUE;
; 2346 : 								 PlayerHP -= 1000;

	sub	DWORD PTR ?PlayerHP@@3HA, 1000		; PlayerHP, 000003e8H

; 2347 : 								 KnockHIT = TRUE;
; 2348 : 								 Knock = { 0,0,1,1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000

; 2349 : 								 if (PHplay == FALSE)

	mov	eax, DWORD PTR ?PHplay@@3HA		; PHplay
	mov	DWORD PTR ?Knockspd@@3HA, 40		; Knockspd, 00000028H
	mov	DWORD PTR ?Knockback@@3HA, 1		; Knockback
	mov	DWORD PTR ?KnockHIT@@3HA, 1		; KnockHIT
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
	test	eax, eax
	je	SHORT $LN1291@DXW_MainLo

; 2350 : 								 {
; 2351 : 									 PHplay = TRUE;
; 2352 : 									 Timer[25] = 3;
; 2353 : 									 PHframe = 0;
; 2354 : 								 }
; 2355 : 								 else if (PHplay == TRUE)

	cmp	eax, 1
	jne	SHORT $LN486@DXW_MainLo
$LN1291@DXW_MainLo:

; 2356 : 								 {
; 2357 : 									 PHplay = TRUE;

	mov	DWORD PTR ?PHplay@@3HA, 1		; PHplay

; 2358 : 									 Timer[25] = 3;

	mov	DWORD PTR ?Timer@@3PAHA+100, 3

; 2359 : 									 PHframe = 0;

	mov	DWORD PTR ?PHframe@@3HA, 0		; PHframe
$LN486@DXW_MainLo:

; 2360 : 								 }
; 2361 : 								 if (g_bRush == TRUE)

	cmp	DWORD PTR ?g_bRush@@3HA, 1		; g_bRush
	jne	SHORT $LN1351@DXW_MainLo

; 2362 : 								 {
; 2363 : 									 g_bRush = FALSE;

	mov	DWORD PTR ?g_bRush@@3HA, 0		; g_bRush

; 2364 : 									 g_bRushL = FALSE;

	mov	DWORD PTR ?g_bRushL@@3HA, 0		; g_bRushL

; 2365 : 									 g_bRushR = FALSE;

	mov	DWORD PTR ?g_bRushR@@3HA, 0		; g_bRushR

; 2366 : 									 Timer[9] = 20;

	mov	DWORD PTR ?Timer@@3PAHA+36, 20		; 00000014H

; 2367 : 									 Timer[8] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+32, 0

; 2368 : 									 Cframe = 0;

	mov	DWORD PTR ?Cframe@@3HA, 0		; Cframe
$LN1351@DXW_MainLo:

; 2369 : 								 }
; 2370 : 
; 2371 : 								 if (g_bJump == TRUE)

	cmp	DWORD PTR ?g_bJump@@3HA, 1		; g_bJump
	jne	$LN1354@DXW_MainLo

; 2372 : 								 {
; 2373 : 									 Knockspd = 45;

	mov	DWORD PTR ?Knockspd@@3HA, 45		; Knockspd, 0000002dH

; 2374 : 								 }
; 2375 : 							 }

	jmp	$LN1354@DXW_MainLo
$LN482@DXW_MainLo:

; 2376 : 							 else if (BAL == TRUE && Knockback == FALSE)

	cmp	DWORD PTR ?BAL@@3HA, 1			; BAL
	jne	$LN1354@DXW_MainLo
	test	eax, eax
	jne	$LN1354@DXW_MainLo

; 2377 : 							 {
; 2378 : 								 Knockspd = -40;
; 2379 : 								 Knockback = TRUE;
; 2380 : 								 KnockHIT = TRUE;
; 2381 : 								 PlayerHP -= 1000;

	sub	DWORD PTR ?PlayerHP@@3HA, 1000		; PlayerHP, 000003e8H
	lea	ecx, DWORD PTR [eax-40]

; 2382 : 								 Knock = { 0,0,1,1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000

; 2383 : 								 if (PHplay == FALSE)

	mov	eax, DWORD PTR ?PHplay@@3HA		; PHplay
	mov	DWORD PTR ?Knockback@@3HA, 1		; Knockback
	mov	DWORD PTR ?KnockHIT@@3HA, 1		; KnockHIT
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
	test	eax, eax
	je	SHORT $LN1290@DXW_MainLo

; 2384 : 								 {
; 2385 : 									 PHplay = TRUE;
; 2386 : 									 Timer[25] = 3;
; 2387 : 									 PHframe = 0;
; 2388 : 								 }
; 2389 : 								 else if (PHplay == TRUE)

	cmp	eax, 1
	jne	SHORT $LN492@DXW_MainLo
$LN1290@DXW_MainLo:

; 2390 : 								 {
; 2391 : 									 PHplay = TRUE;

	mov	DWORD PTR ?PHplay@@3HA, 1		; PHplay

; 2392 : 									 Timer[25] = 3;

	mov	DWORD PTR ?Timer@@3PAHA+100, 3

; 2393 : 									 PHframe = 0;

	mov	DWORD PTR ?PHframe@@3HA, 0		; PHframe
$LN492@DXW_MainLo:

; 2394 : 								 }
; 2395 : 								 if (g_bRush == TRUE)

	cmp	DWORD PTR ?g_bRush@@3HA, 1		; g_bRush
	jne	SHORT $LN1353@DXW_MainLo

; 2396 : 								 {
; 2397 : 									 g_bRush = FALSE;

	mov	DWORD PTR ?g_bRush@@3HA, 0		; g_bRush

; 2398 : 									 g_bRushL = FALSE;

	mov	DWORD PTR ?g_bRushL@@3HA, 0		; g_bRushL

; 2399 : 									 g_bRushR = FALSE;

	mov	DWORD PTR ?g_bRushR@@3HA, 0		; g_bRushR

; 2400 : 									 Timer[9] = 20;

	mov	DWORD PTR ?Timer@@3PAHA+36, 20		; 00000014H

; 2401 : 									 Timer[8] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+32, 0

; 2402 : 									 Cframe = 0;

	mov	DWORD PTR ?Cframe@@3HA, 0		; Cframe
$LN1353@DXW_MainLo:

; 2403 : 								 }
; 2404 : 								 if (g_bJump == TRUE)

	cmp	DWORD PTR ?g_bJump@@3HA, 1		; g_bJump
	mov	eax, -45				; ffffffd3H
	cmove	ecx, eax
	mov	DWORD PTR ?Knockspd@@3HA, ecx		; Knockspd
$LN1354@DXW_MainLo:

; 2405 : 								 {
; 2406 : 									 Knockspd = -45;
; 2407 : 								 }
; 2408 : 							 }
; 2409 : 						 }
; 2410 : 						 if (p2die == FALSE && BossAtt ==FALSE)

	cmp	DWORD PTR ?p2die@@3HA, 0		; p2die
	jne	$LN501@DXW_MainLo
	cmp	DWORD PTR ?BossAtt@@3HA, 0		; BossAtt
	jne	$LN501@DXW_MainLo

; 2411 : 						 {
; 2412 : 							 BOSS = { bnX + 10 ,bnY,bnX + 170,bnY + 148 };

	mov	ecx, DWORD PTR _bnX$2$[ebp]
	mov	edx, DWORD PTR _bnY$2$[ebp]
	mov	DWORD PTR $T12[ebp+4], edx
	lea	eax, DWORD PTR [ecx+10]
	mov	DWORD PTR $T12[ebp], eax
	lea	eax, DWORD PTR [ecx+170]
	mov	DWORD PTR $T12[ebp+8], eax
	lea	eax, DWORD PTR [edx+148]
	mov	DWORD PTR $T12[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T12[ebp]

; 2413 : 							 if (Timer[1] >= 8)

	mov	eax, DWORD PTR ?Timer@@3PAHA+4
	movups	XMMWORD PTR ?BOSS@@3UtagRECT@@A, xmm0
	cmp	eax, 8
	jl	SHORT $LN496@DXW_MainLo

; 2414 : 							 {
; 2415 : 								 Timer[1] = 0;
; 2416 : 								 Bframe++;

	mov	eax, DWORD PTR ?Bframe@@3HA		; Bframe
	inc	eax
	mov	DWORD PTR ?Timer@@3PAHA+4, 0
	mov	DWORD PTR ?Bframe@@3HA, eax		; Bframe
	cmp	eax, 7

; 2417 : 								 if (Bframe >= 7)

	jl	SHORT $LN497@DXW_MainLo

; 2418 : 								 {
; 2419 : 									 Bframe = 0;

	xor	eax, eax
	mov	DWORD PTR ?Bframe@@3HA, eax		; Bframe

; 2420 : 								 }
; 2421 : 							 }

	jmp	SHORT $LN497@DXW_MainLo
$LN496@DXW_MainLo:

; 2422 : 							 else { Timer[1]++; }

	inc	eax
	mov	DWORD PTR ?Timer@@3PAHA+4, eax
	mov	eax, DWORD PTR ?Bframe@@3HA		; Bframe
$LN497@DXW_MainLo:

; 2423 : 							 if (g_bBLL == TRUE)

	cmp	DWORD PTR ?g_bBLL@@3HA, 1		; g_bBLL
	jne	SHORT $LN499@DXW_MainLo

; 2424 : 							 {
; 2425 : 								 ::__PutAnimeSprite(g_pDDSTwo, bnX, bnY, 8, Bframe, 174, 148, 0);

	push	0
	push	148					; 00000094H
	push	174					; 000000aeH
	push	eax
	push	8
	push	edx
	push	ecx
	push	DWORD PTR ?g_pDDSTwo@@3PAUIDirectDrawSurface7@@A ; g_pDDSTwo
	jmp	SHORT $LN1510@DXW_MainLo
$LN499@DXW_MainLo:

; 2426 : 							 }
; 2427 : 							 else if (g_bBLR == TRUE)

	cmp	DWORD PTR ?g_bBLR@@3HA, 1		; g_bBLR
	jne	SHORT $LN501@DXW_MainLo

; 2428 : 							 {
; 2429 : 								 ::__PutAnimeSprite(g_pDDSTwoR, bnX, bnY, 8, Bframe, 174, 148, 0);

	push	0
	push	148					; 00000094H
	push	174					; 000000aeH
	push	eax
	push	8
	push	edx
	push	ecx
	push	DWORD PTR ?g_pDDSTwoR@@3PAUIDirectDrawSurface7@@A ; g_pDDSTwoR
$LN1510@DXW_MainLo:

; 2430 : 							 }
; 2431 : 						 }
; 2432 : 						 if (Timer[0] >= 26)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN501@DXW_MainLo:
	mov	eax, DWORD PTR ?Timer@@3PAHA
	xor	ecx, ecx
	cmp	eax, 26					; 0000001aH
	cmovge	eax, ecx
	mov	DWORD PTR ?Timer@@3PAHA, eax

; 2433 : 						 {
; 2434 : 							 Timer[0] = 0;
; 2435 : 						 }
; 2436 : 						 //Ä³¸¯ÅÍ µ¹Áø ¾Ö´Ï¸ÞÀÌ¼Ç
; 2437 : 						 if (g_bRush == FALSE)

	cmp	DWORD PTR ?g_bRush@@3HA, ecx		; g_bRush
	jne	$LN1359@DXW_MainLo

; 2438 : 						 {
; 2439 : 							 //½ºÅÄµù
; 2440 : 							 if (g_bLookL == 1 && g_bJump == 0 && g_bLeft == 0 && g_bRight == 0 && g_bAtt == FALSE)

	cmp	DWORD PTR ?g_bLookL@@3HA, 1		; g_bLookL
	jne	SHORT $LN504@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, ecx		; g_bJump
	jne	SHORT $LN504@DXW_MainLo
	cmp	DWORD PTR ?g_bLeft@@3HA, ecx		; g_bLeft
	jne	SHORT $LN504@DXW_MainLo
	cmp	DWORD PTR ?g_bRight@@3HA, ecx		; g_bRight
	jne	SHORT $LN504@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, ecx		; g_bAtt
	jne	SHORT $LN504@DXW_MainLo

; 2441 : 							 {
; 2442 : 								 ::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 0, 86, 81, 0);

	push	ecx
	push	81					; 00000051H
	push	86					; 00000056H
	push	ecx
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A ; g_pDDSOne
	jmp	SHORT $LN1511@DXW_MainLo
$LN504@DXW_MainLo:

; 2443 : 							 }
; 2444 : 							 else if (g_bLookR == 1 && g_bJump == 0 && g_bLeft == 0 && g_bRight == 0 && g_bAtt == FALSE)

	cmp	DWORD PTR ?g_bLookR@@3HA, 1		; g_bLookR
	jne	SHORT $LN506@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, ecx		; g_bJump
	jne	SHORT $LN506@DXW_MainLo
	cmp	DWORD PTR ?g_bLeft@@3HA, ecx		; g_bLeft
	jne	SHORT $LN506@DXW_MainLo
	cmp	DWORD PTR ?g_bRight@@3HA, ecx		; g_bRight
	jne	SHORT $LN506@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, ecx		; g_bAtt
	jne	SHORT $LN506@DXW_MainLo

; 2445 : 							 {
; 2446 : 								 ::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 8, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	8
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOneR@@3PAUIDirectDrawSurface7@@A ; g_pDDSOneR
$LN1511@DXW_MainLo:

; 2447 : 							 }
; 2448 : 							 //Á¡ÇÁ
; 2449 : 							 if (g_bLookL == 1 && g_bJump == 1 && g_bAtt == FALSE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN506@DXW_MainLo:
	cmp	DWORD PTR ?g_bLookL@@3HA, 1		; g_bLookL
	jne	SHORT $LN507@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 1		; g_bJump
	jne	SHORT $LN507@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN507@DXW_MainLo

; 2450 : 							 {
; 2451 : 								 ::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 3, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	3
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A ; g_pDDSOne
	jmp	SHORT $LN1512@DXW_MainLo
$LN507@DXW_MainLo:

; 2452 : 							 }
; 2453 : 							 else if (g_bLookR == 1 && g_bJump == 1 && g_bAtt == FALSE)

	cmp	DWORD PTR ?g_bLookR@@3HA, 1		; g_bLookR
	jne	SHORT $LN509@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 1		; g_bJump
	jne	SHORT $LN509@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN509@DXW_MainLo

; 2454 : 							 {
; 2455 : 								 ::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 5, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	5
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOneR@@3PAUIDirectDrawSurface7@@A ; g_pDDSOneR
$LN1512@DXW_MainLo:

; 2456 : 							 }
; 2457 : 							 //¹«ºù
; 2458 : 							 if (g_bLeft == 1 && g_bJump == 0 && Timer[0] < 5 && g_bJump == 0 && g_bAtt == FALSE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN509@DXW_MainLo:
	cmp	DWORD PTR ?g_bLeft@@3HA, 1		; g_bLeft
	jne	$LN516@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	jne	$LN516@DXW_MainLo
	cmp	DWORD PTR ?Timer@@3PAHA, 5
	jge	SHORT $LN1162@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN1164@DXW_MainLo

; 2459 : 							 {
; 2460 : 								 ::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 1, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	1
	jmp	SHORT $LN1513@DXW_MainLo
$LN1162@DXW_MainLo:

; 2461 : 							 }
; 2462 : 							 else if (g_bLeft == 1 && g_bJump == 0 && Timer[0] >= 5 && Timer[0] < 12 && g_bAtt == FALSE)

	cmp	DWORD PTR ?Timer@@3PAHA, 12		; 0000000cH
	jge	SHORT $LN1165@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	je	SHORT $LN1514@DXW_MainLo
$LN1164@DXW_MainLo:

; 2463 : 							 {
; 2464 : 								 ::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 0, 86, 81, 0);
; 2465 : 							 }
; 2466 : 							 else if (g_bLeft == 1 && g_bJump == 0 && Timer[0] >= 12 && Timer[0] < 19 && g_bAtt == FALSE)

	cmp	DWORD PTR ?Timer@@3PAHA, 12		; 0000000cH
	jl	SHORT $LN1166@DXW_MainLo
$LN1165@DXW_MainLo:
	cmp	DWORD PTR ?Timer@@3PAHA, 19		; 00000013H
	jge	SHORT $LN1167@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN1166@DXW_MainLo

; 2467 : 							 {
; 2468 : 								 ::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 2, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	2
	jmp	SHORT $LN1513@DXW_MainLo
$LN1166@DXW_MainLo:

; 2469 : 							 }
; 2470 : 							 else if (g_bLeft == 1 && g_bJump == 0 && Timer[0] >= 19 && g_bAtt == FALSE)

	cmp	DWORD PTR ?Timer@@3PAHA, 19		; 00000013H
	jl	SHORT $LN516@DXW_MainLo
$LN1167@DXW_MainLo:
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN516@DXW_MainLo
$LN1514@DXW_MainLo:

; 2471 : 							 {
; 2472 : 								 ::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 0, 86, 81, 0);
; 2473 : 							 }
; 2474 : 							 if (g_bRight == 1 && g_bJump == 0 && Timer[0] < 5 && g_bAtt == FALSE)

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	0
$LN1513@DXW_MainLo:
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A ; g_pDDSOne
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN516@DXW_MainLo:
	cmp	DWORD PTR ?g_bRight@@3HA, 1		; g_bRight
	jne	$LN523@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	jne	$LN523@DXW_MainLo
	cmp	DWORD PTR ?Timer@@3PAHA, 5
	jge	SHORT $LN1172@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN1173@DXW_MainLo

; 2475 : 							 {
; 2476 : 								 ::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 7, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	7
	jmp	SHORT $LN1515@DXW_MainLo
$LN1172@DXW_MainLo:

; 2477 : 							 }
; 2478 : 							 else if (g_bRight == 1 && g_bJump == 0 && Timer[0] >= 5 && Timer[0] < 12 && g_bAtt == FALSE)

	cmp	DWORD PTR ?Timer@@3PAHA, 12		; 0000000cH
	jge	SHORT $LN1174@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	je	SHORT $LN1516@DXW_MainLo
$LN1173@DXW_MainLo:

; 2479 : 							 {
; 2480 : 								 ::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 8, 86, 81, 0);
; 2481 : 							 }
; 2482 : 							 else if (g_bRight == 1 && g_bJump == 0 && Timer[0] >= 12 && Timer[0] < 19 && g_bAtt == FALSE)

	cmp	DWORD PTR ?Timer@@3PAHA, 12		; 0000000cH
	jl	SHORT $LN1175@DXW_MainLo
$LN1174@DXW_MainLo:
	cmp	DWORD PTR ?Timer@@3PAHA, 19		; 00000013H
	jge	SHORT $LN1176@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN1175@DXW_MainLo

; 2483 : 							 {
; 2484 : 								 ::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 6, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	6
	jmp	SHORT $LN1515@DXW_MainLo
$LN1175@DXW_MainLo:

; 2485 : 							 }
; 2486 : 							 else if (g_bRight == 1 && g_bJump == 0 && Timer[0] >= 19 && g_bAtt == FALSE)

	cmp	DWORD PTR ?Timer@@3PAHA, 19		; 00000013H
	jl	SHORT $LN523@DXW_MainLo
$LN1176@DXW_MainLo:
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN523@DXW_MainLo
$LN1516@DXW_MainLo:

; 2487 : 							 {
; 2488 : 								 ::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 8, 86, 81, 0);
; 2489 : 							 }
; 2490 : 							 if (g_bAtt == TRUE && g_bAR == TRUE && Timer[4] < 7)

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	8
$LN1515@DXW_MainLo:
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOneR@@3PAUIDirectDrawSurface7@@A ; g_pDDSOneR
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN523@DXW_MainLo:
	cmp	DWORD PTR ?g_bAtt@@3HA, 1		; g_bAtt
	jne	$LN1358@DXW_MainLo
	cmp	DWORD PTR ?g_bAR@@3HA, 1		; g_bAR
	mov	eax, DWORD PTR ?Timer@@3PAHA+16
	jne	SHORT $LN1181@DXW_MainLo
	cmp	eax, 7
	jge	SHORT $LN1183@DXW_MainLo

; 2491 : 							 {
; 2492 : 								 ::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 1, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	1
	jmp	SHORT $LN1517@DXW_MainLo
$LN1183@DXW_MainLo:

; 2493 : 							 }
; 2494 : 							 else if (g_bAtt == TRUE && g_bAR == TRUE && Timer[4] >= 7 && Timer[4] < 14)

	cmp	eax, 14					; 0000000eH
	jge	SHORT $LN1185@DXW_MainLo

; 2495 : 							 {
; 2496 : 								 ::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 2, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	2
	jmp	SHORT $LN1517@DXW_MainLo
$LN1185@DXW_MainLo:

; 2497 : 							 }
; 2498 : 							 else if (g_bAtt == TRUE && g_bAR == TRUE && Timer[4] >= 14 && Timer[4] < 21)

	cmp	eax, 21					; 00000015H
	jge	SHORT $LN1187@DXW_MainLo

; 2499 : 							 {
; 2500 : 								 ::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 3, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	3
	jmp	SHORT $LN1517@DXW_MainLo
$LN1187@DXW_MainLo:

; 2501 : 							 }
; 2502 : 							 else if (g_bAtt == TRUE && g_bAR == TRUE && Timer[4] >= 21 && Timer[4] < 27)

	cmp	eax, 27					; 0000001bH
	jge	SHORT $LN1189@DXW_MainLo

; 2503 : 							 {
; 2504 : 								 ::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 4, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	4
	jmp	SHORT $LN1517@DXW_MainLo
$LN1189@DXW_MainLo:

; 2505 : 							 }
; 2506 : 							 else if (g_bAtt == TRUE && g_bAR == TRUE && Timer[4] >= 27 && Timer[4] < 39)

	cmp	eax, 39					; 00000027H
	jge	SHORT $LN1181@DXW_MainLo

; 2507 : 							 {
; 2508 : 								 ::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 0, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	0
$LN1517@DXW_MainLo:

; 2509 : 							 }
; 2510 : 							 if (g_bAtt == TRUE && g_bAL == TRUE && Timer[4] < 7)

	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOneR@@3PAUIDirectDrawSurface7@@A ; g_pDDSOneR
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	cmp	DWORD PTR ?g_bAtt@@3HA, 1		; g_bAtt
	jne	$LN1358@DXW_MainLo

; 2487 : 							 {
; 2488 : 								 ::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 8, 86, 81, 0);
; 2489 : 							 }
; 2490 : 							 if (g_bAtt == TRUE && g_bAR == TRUE && Timer[4] < 7)

	mov	eax, DWORD PTR ?Timer@@3PAHA+16
$LN1181@DXW_MainLo:

; 2509 : 							 }
; 2510 : 							 if (g_bAtt == TRUE && g_bAL == TRUE && Timer[4] < 7)

	cmp	DWORD PTR ?g_bAL@@3HA, 1		; g_bAL
	jne	SHORT $LN1194@DXW_MainLo
	cmp	eax, 7
	jge	SHORT $LN1196@DXW_MainLo

; 2511 : 							 {
; 2512 : 								 ::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 4, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	4
	jmp	SHORT $LN1518@DXW_MainLo
$LN1196@DXW_MainLo:

; 2513 : 							 }
; 2514 : 							 else if (g_bAtt == TRUE && g_bAL == TRUE && Timer[4] >= 7 && Timer[4] < 14)

	cmp	eax, 14					; 0000000eH
	jge	SHORT $LN1198@DXW_MainLo

; 2515 : 							 {
; 2516 : 								 ::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 5, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	5
	jmp	SHORT $LN1518@DXW_MainLo
$LN1198@DXW_MainLo:

; 2517 : 							 }
; 2518 : 							 else if (g_bAtt == TRUE && g_bAL == TRUE && Timer[4] >= 14 && Timer[4] < 21)

	cmp	eax, 21					; 00000015H
	jge	SHORT $LN1200@DXW_MainLo

; 2519 : 							 {
; 2520 : 								 ::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 6, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	6
	jmp	SHORT $LN1518@DXW_MainLo
$LN1200@DXW_MainLo:

; 2521 : 							 }
; 2522 : 							 else if (g_bAtt == TRUE && g_bAL == TRUE && Timer[4] >= 21 && Timer[4] < 27)

	cmp	eax, 27					; 0000001bH
	jge	SHORT $LN1202@DXW_MainLo

; 2523 : 							 {
; 2524 : 								 ::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 7, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	7
	jmp	SHORT $LN1518@DXW_MainLo
$LN1202@DXW_MainLo:

; 2525 : 							 }
; 2526 : 							 else if (g_bAtt == TRUE && g_bAL == TRUE && Timer[4] >= 27 && Timer[4] < 39)

	cmp	eax, 39					; 00000027H
	jge	SHORT $LN1194@DXW_MainLo

; 2527 : 							 {
; 2528 : 								 ::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 8, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	8
$LN1518@DXW_MainLo:

; 2529 : 							 }
; 2530 : 							 if (g_bAtt == TRUE && Timer[4] < 38)

	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A ; g_pDDSOne
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	cmp	DWORD PTR ?g_bAtt@@3HA, 1		; g_bAtt
	jne	SHORT $LN1358@DXW_MainLo
	mov	eax, DWORD PTR ?Timer@@3PAHA+16
$LN1194@DXW_MainLo:
	cmp	eax, 38					; 00000026H
	jge	SHORT $LN1358@DXW_MainLo

; 2531 : 							 {
; 2532 : 								 Timer[4]++;

	inc	eax
	mov	DWORD PTR ?Timer@@3PAHA+16, eax

; 2533 : 							 }
; 2534 : 							 else

	jmp	SHORT $LN1359@DXW_MainLo
$LN1358@DXW_MainLo:

; 2535 : 							 {
; 2536 : 								 Timer[4] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+16, 0
$LN1359@DXW_MainLo:

; 2537 : 							 }
; 2538 : 						 }
; 2539 : 						 if (g_bRushL == TRUE)

	cmp	DWORD PTR ?g_bRushL@@3HA, 1		; g_bRushL
	jne	SHORT $LN544@DXW_MainLo

; 2540 : 						 {
; 2541 : 							 ::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 7, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	7
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A ; g_pDDSOne
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite

; 2542 : 							 ::__PutAnimeSprite(g_pDDSCHARGE, nX - 170, nY - 100, 8, Cframe, 511, 263, 0);

	push	0
	push	263					; 00000107H
	push	511					; 000001ffH
	push	DWORD PTR ?Cframe@@3HA			; Cframe
	lea	eax, DWORD PTR [edi-100]
	push	8
	push	eax
	lea	eax, DWORD PTR [esi-170]
	push	eax
	push	DWORD PTR ?g_pDDSCHARGE@@3PAUIDirectDrawSurface7@@A ; g_pDDSCHARGE
	jmp	SHORT $LN1519@DXW_MainLo
$LN544@DXW_MainLo:

; 2543 : 						 }
; 2544 : 						 else if (g_bRushR == TRUE)

	cmp	DWORD PTR ?g_bRushR@@3HA, 1		; g_bRushR
	jne	SHORT $LN546@DXW_MainLo

; 2545 : 						 {
; 2546 : 							 ::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 1, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	1
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOneR@@3PAUIDirectDrawSurface7@@A ; g_pDDSOneR
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite

; 2547 : 							 ::__PutAnimeSprite(g_pDDSCHARGER, nX - 250, nY - 100, 8, Cframe, 511, 263, 0);

	push	0
	push	263					; 00000107H
	push	511					; 000001ffH
	push	DWORD PTR ?Cframe@@3HA			; Cframe
	lea	eax, DWORD PTR [edi-100]
	push	8
	push	eax
	lea	eax, DWORD PTR [esi-250]
	push	eax
	push	DWORD PTR ?g_pDDSCHARGER@@3PAUIDirectDrawSurface7@@A ; g_pDDSCHARGER
$LN1519@DXW_MainLo:

; 2548 : 						 }
; 2549 : 						 if (g_bAtt == TRUE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 64					; 00000040H
$LN546@DXW_MainLo:
	cmp	DWORD PTR ?g_bAtt@@3HA, 1		; g_bAtt
	jne	$LN556@DXW_MainLo

; 2550 : 						 {
; 2551 : 							 if (g_bAL == TRUE)

	cmp	DWORD PTR ?g_bAL@@3HA, 1		; g_bAL
	jne	$LN548@DXW_MainLo

; 2552 : 							 {
; 2553 : 								 if (g_bHit == FALSE)

	cmp	DWORD PTR ?g_bHit@@3HA, 0		; g_bHit
	lea	ecx, DWORD PTR [edi-65]
	jne	SHORT $LN550@DXW_MainLo

; 2554 : 								 {
; 2555 : 									 HIT = { SnX - 130,SnY + 10,SnX + 90,SnY + 180 };

	lea	eax, DWORD PTR [esi-130]
	mov	DWORD PTR $T11[ebp], eax
	lea	eax, DWORD PTR [ecx+10]
	mov	DWORD PTR $T11[ebp+4], eax
	lea	eax, DWORD PTR [esi+90]
	mov	DWORD PTR $T11[ebp+8], eax
	lea	eax, DWORD PTR [ecx+180]
	mov	DWORD PTR $T11[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T11[ebp]

; 2556 : 								 }
; 2557 : 								 else

	jmp	SHORT $LN1520@DXW_MainLo
$LN550@DXW_MainLo:

; 2558 : 								 {
; 2559 : 									 HIT = { 0, 0, 1, 1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000
$LN1520@DXW_MainLo:

; 2560 : 								 }
; 2561 : 								 if (Timer[2] < 2)

	mov	eax, DWORD PTR ?Timer@@3PAHA+8
	movups	XMMWORD PTR ?HIT@@3UtagRECT@@A, xmm0
	cmp	eax, 2
	jge	SHORT $LN552@DXW_MainLo

; 2562 : 								 {
; 2563 : 									 Timer[2]++;

	inc	eax
	mov	DWORD PTR ?Timer@@3PAHA+8, eax

; 2564 : 								 }
; 2565 : 								 else

	mov	eax, DWORD PTR ?Aframe@@3HA		; Aframe
	jmp	SHORT $LN555@DXW_MainLo
$LN552@DXW_MainLo:

; 2566 : 								 {
; 2567 : 									 Timer[2] = 0;
; 2568 : 									 if (Aframe < 12)

	mov	eax, DWORD PTR ?Aframe@@3HA		; Aframe
	mov	DWORD PTR ?Timer@@3PAHA+8, 0
	cmp	eax, 12					; 0000000cH
	jge	SHORT $LN554@DXW_MainLo

; 2569 : 									 {
; 2570 : 										 Aframe++;

	inc	eax
	mov	DWORD PTR ?Aframe@@3HA, eax		; Aframe
	jmp	SHORT $LN555@DXW_MainLo
$LN554@DXW_MainLo:

; 2571 : 									 }
; 2572 : 									 else { Aframe == 0; g_bAL = FALSE, g_bAR = FALSE, g_bAtt = FALSE; g_bHit = FALSE; }

	mov	DWORD PTR ?g_bAL@@3HA, 0		; g_bAL
	mov	DWORD PTR ?g_bAR@@3HA, 0		; g_bAR
	mov	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	mov	DWORD PTR ?g_bHit@@3HA, 0		; g_bHit
$LN555@DXW_MainLo:

; 2573 : 								 }
; 2574 : 								 ::__PutAnimeSprite(g_pDDSSkill, SnX - 140, SnY, 13, Aframe, 301, 218, 0);

	push	0
	push	218					; 000000daH
	push	301					; 0000012dH
	push	eax
	push	13					; 0000000dH
	push	ecx
	lea	eax, DWORD PTR [esi-140]
	push	eax
	push	DWORD PTR ?g_pDDSSkill@@3PAUIDirectDrawSurface7@@A ; g_pDDSSkill
	jmp	$LN1521@DXW_MainLo
$LN548@DXW_MainLo:

; 2575 : 							 }
; 2576 : 							 else if (g_bAR == TRUE)

	cmp	DWORD PTR ?g_bAR@@3HA, 1		; g_bAR
	jne	$LN556@DXW_MainLo

; 2577 : 							 {
; 2578 : 								 if (g_bHit == FALSE)

	cmp	DWORD PTR ?g_bHit@@3HA, 0		; g_bHit
	lea	ecx, DWORD PTR [edi-65]
	jne	SHORT $LN557@DXW_MainLo

; 2579 : 								 {
; 2580 : 									 HIT = { SnX - 10,SnY + 10,SnX + 220,SnY + 180 };

	lea	eax, DWORD PTR [esi-10]
	mov	DWORD PTR $T10[ebp], eax
	lea	eax, DWORD PTR [ecx+10]
	mov	DWORD PTR $T10[ebp+4], eax
	lea	eax, DWORD PTR [esi+220]
	mov	DWORD PTR $T10[ebp+8], eax
	lea	eax, DWORD PTR [ecx+180]
	mov	DWORD PTR $T10[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T10[ebp]

; 2581 : 								 }
; 2582 : 								 else

	jmp	SHORT $LN1522@DXW_MainLo
$LN557@DXW_MainLo:

; 2583 : 								 {
; 2584 : 									 HIT = { 0, 0, 1, 1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000
$LN1522@DXW_MainLo:

; 2585 : 								 }
; 2586 : 								 if (Timer[2] < 2)

	mov	eax, DWORD PTR ?Timer@@3PAHA+8
	movups	XMMWORD PTR ?HIT@@3UtagRECT@@A, xmm0
	cmp	eax, 2
	jge	SHORT $LN559@DXW_MainLo

; 2587 : 								 {
; 2588 : 									 Timer[2]++;

	inc	eax
	mov	DWORD PTR ?Timer@@3PAHA+8, eax

; 2589 : 								 }
; 2590 : 								 else

	mov	eax, DWORD PTR ?Aframe@@3HA		; Aframe
	jmp	SHORT $LN562@DXW_MainLo
$LN559@DXW_MainLo:

; 2591 : 								 {
; 2592 : 									 Timer[2] = 0;
; 2593 : 									 if (Aframe > 0)

	mov	eax, DWORD PTR ?Aframe@@3HA		; Aframe
	mov	DWORD PTR ?Timer@@3PAHA+8, 0
	test	eax, eax
	jle	SHORT $LN561@DXW_MainLo

; 2594 : 									 {
; 2595 : 										 Aframe--;

	dec	eax
	mov	DWORD PTR ?Aframe@@3HA, eax		; Aframe
	jmp	SHORT $LN562@DXW_MainLo
$LN561@DXW_MainLo:

; 2596 : 									 }
; 2597 : 									 else { Aframe == 0; g_bAL = FALSE, g_bAR = FALSE, g_bAtt = FALSE; g_bHit = FALSE; }

	mov	DWORD PTR ?g_bAL@@3HA, 0		; g_bAL
	mov	DWORD PTR ?g_bAR@@3HA, 0		; g_bAR
	mov	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	mov	DWORD PTR ?g_bHit@@3HA, 0		; g_bHit
$LN562@DXW_MainLo:

; 2598 : 								 }
; 2599 : 								 ::__PutAnimeSprite(g_pDDSSkillR, SnX - 70, SnY, 13, Aframe, 301, 218, 0);

	push	0
	push	218					; 000000daH
	push	301					; 0000012dH
	push	eax
	push	13					; 0000000dH
	push	ecx
	lea	eax, DWORD PTR [esi-70]
	push	eax
	push	DWORD PTR ?g_pDDSSkillR@@3PAUIDirectDrawSurface7@@A ; g_pDDSSkillR
$LN1521@DXW_MainLo:

; 2600 : 							 }
; 2601 : 						 }
; 2602 : 						 if (bossimmu == FALSE && g_bHit == FALSE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN556@DXW_MainLo:
	cmp	DWORD PTR ?bossimmu@@3HA, 0		; bossimmu
	jne	$LN1360@DXW_MainLo
	cmp	DWORD PTR ?g_bHit@@3HA, 0		; g_bHit
	jne	$LN1360@DXW_MainLo

; 2603 : 						 {
; 2604 : 							 if (IntersectRect(&rcDest, &BOSS, &HIT))

	push	OFFSET ?HIT@@3UtagRECT@@A		; HIT
	push	OFFSET ?BOSS@@3UtagRECT@@A		; BOSS
	push	OFFSET ?rcDest@@3UtagRECT@@A		; rcDest
	call	DWORD PTR __imp__IntersectRect@12
	test	eax, eax
	je	$LN1360@DXW_MainLo

; 2605 : 							 {
; 2606 : 								 P2HP -= 75;

	sub	DWORD PTR ?P2HP@@3HA, 75		; P2HP, 0000004bH

; 2607 : 								 bossimmu = TRUE;
; 2608 : 								 Timer[5] = 20;
; 2609 : 								 g_bHit = TRUE;
; 2610 : 								 if (BHMPlay == FALSE)

	cmp	DWORD PTR ?BHMPlay@@3HA, 0		; BHMPlay
	mov	DWORD PTR ?bossimmu@@3HA, 1		; bossimmu
	mov	DWORD PTR ?Timer@@3PAHA+20, 20		; 00000014H
	mov	DWORD PTR ?g_bHit@@3HA, 1		; g_bHit
	jne	SHORT $LN565@DXW_MainLo

; 2611 : 								 {
; 2612 : 									 BHMPlay = TRUE;

	mov	DWORD PTR ?BHMPlay@@3HA, 1		; BHMPlay

; 2613 : 									 BHplay[0] = TRUE;
; 2614 : 									 Timer[24] = 2;

	jmp	SHORT $LN1523@DXW_MainLo
$LN565@DXW_MainLo:

; 2615 : 								 }
; 2616 : 								 else if (BHMPlay == TRUE)

	cmp	DWORD PTR ?BHMPlay@@3HA, 1		; BHMPlay
	jne	SHORT $LN1360@DXW_MainLo

; 2617 : 								 {
; 2618 : 									 BHplay[0] = TRUE;
; 2619 : 									 BHplay[1] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA+4, 0

; 2620 : 									 BHplay[2] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA+8, 0

; 2621 : 									 BHframe[0] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA, 0

; 2622 : 									 BHframe[1] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA+4, 0

; 2623 : 									 BHframe[2] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA+8, 0

; 2624 : 									 Timer[24] = 2;
; 2625 : 									 Timer[26] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+104, 2

; 2626 : 									 Timer[27] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+108, 2
$LN1523@DXW_MainLo:

; 2627 : 								 }
; 2628 : 							 }
; 2629 : 						 }
; 2630 : 						 if (g_bRight == 1 || g_bLeft == 1 && g_bJump == 0)

	mov	DWORD PTR ?Timer@@3PAHA+96, 2
	mov	DWORD PTR ?BHplay@@3PAHA, 1
$LN1360@DXW_MainLo:
	cmp	DWORD PTR ?g_bRight@@3HA, 1		; g_bRight
	je	SHORT $LN570@DXW_MainLo
	cmp	DWORD PTR ?g_bLeft@@3HA, 1		; g_bLeft
	jne	SHORT $LN568@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	je	SHORT $LN570@DXW_MainLo
$LN568@DXW_MainLo:

; 2633 : 						 }
; 2634 : 						 else
; 2635 : 						 {
; 2636 : 							 Timer[0] = 0;

	mov	DWORD PTR ?Timer@@3PAHA, 0
	jmp	SHORT $LN569@DXW_MainLo
$LN570@DXW_MainLo:

; 2631 : 						 {
; 2632 : 							 Timer[0] += 1;

	inc	DWORD PTR ?Timer@@3PAHA
$LN569@DXW_MainLo:

; 2637 : 						 }
; 2638 : 						 if (p2die == 0)

	cmp	DWORD PTR ?p2die@@3HA, 0		; p2die
	jne	$LN1368@DXW_MainLo

; 2639 : 						 {
; 2640 : 							 if (Timer[7] == 0)

	cmp	DWORD PTR ?Timer@@3PAHA+28, 0
	jne	$LN1368@DXW_MainLo

; 2641 : 							 {
; 2642 : 								 if (g_bBAT == TRUE)

	cmp	DWORD PTR ?g_bBAT@@3HA, 1		; g_bBAT
	jne	$LN573@DXW_MainLo

; 2643 : 								 {
; 2644 : 									 if (BAframe < 10 && Timer[6] < 3)

	mov	eax, DWORD PTR ?BAframe@@3HA		; BAframe
	cmp	eax, 10					; 0000000aH
	jge	SHORT $LN1363@DXW_MainLo
	cmp	DWORD PTR ?Timer@@3PAHA+24, 3
	jge	SHORT $LN575@DXW_MainLo

; 2645 : 									 {
; 2646 : 										 BAHIT[0] = { 35,200,115,700 };

	movaps	xmm0, XMMWORD PTR __xmm@000002bc00000073000000c800000023

; 2647 : 										 BAHIT[1] = { 255,200,335,700 };
; 2648 : 										 BAHIT[2] = { 475,200,555,700 };
; 2649 : 										 BAHIT[3] = { 695,200,775,700 };
; 2650 : 										 BAHIT[4] = { 915,200,995,700 };
; 2651 : 										 Timer[6]++;

	inc	DWORD PTR ?Timer@@3PAHA+24
	movups	XMMWORD PTR ?BAHIT@@3PAUtagRECT@@A, xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000002bc0000014f000000c8000000ff
	movups	XMMWORD PTR ?BAHIT@@3PAUtagRECT@@A+16, xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000002bc0000022b000000c8000001db
	movups	XMMWORD PTR ?BAHIT@@3PAUtagRECT@@A+32, xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000002bc00000307000000c8000002b7
	movups	XMMWORD PTR ?BAHIT@@3PAUtagRECT@@A+48, xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000002bc000003e3000000c800000393
	movups	XMMWORD PTR ?BAHIT@@3PAUtagRECT@@A+64, xmm0
	jmp	SHORT $LN1363@DXW_MainLo
$LN575@DXW_MainLo:

; 2652 : 									 }
; 2653 : 									 else if (BAframe < 10 && Timer[6] >= 3)
; 2654 : 									 {
; 2655 : 										 BAframe++;

	inc	eax

; 2656 : 										 Timer[6] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+24, 0
	mov	DWORD PTR ?BAframe@@3HA, eax		; BAframe
$LN1363@DXW_MainLo:

; 2657 : 									 }
; 2658 : 									 if (BAframe >= 13)

	cmp	eax, 13					; 0000000dH
	jl	$LN591@DXW_MainLo

; 2659 : 									 {
; 2660 : 										 int i = 0;
; 2661 : 										 for (i = 0; i < 5; i++)

	mov	ecx, DWORD PTR ?Mirror@@3HA		; Mirror
	mov	eax, OFFSET ?RandNum@@3PAHA		; RandNum
	mov	DWORD PTR tv12037[ebp], eax
	mov	edi, OFFSET ?BAHIT@@3PAUtagRECT@@A	; BAHIT
	mov	esi, 1
$LL15@DXW_MainLo:

; 2662 : 										 {
; 2663 : 											 if (RandNum[i] == FALSE)

	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN13@DXW_MainLo

; 2664 : 											 {
; 2665 : 												 if (IntersectRect(&rcDest, &BAHIT[i], &PHIT))

	push	OFFSET ?PHIT@@3UtagRECT@@A		; PHIT
	push	edi
	push	OFFSET ?rcDest@@3UtagRECT@@A		; rcDest
	call	DWORD PTR __imp__IntersectRect@12
	mov	ecx, DWORD PTR ?Mirror@@3HA		; Mirror
	test	eax, eax
	je	SHORT $LN1406@DXW_MainLo

; 2666 : 												 {
; 2667 : 													 if (Mirror == FALSE)

	test	ecx, ecx
	jne	SHORT $LN581@DXW_MainLo

; 2668 : 													 {
; 2669 : 														 PlayerHP -= 500;

	sub	DWORD PTR ?PlayerHP@@3HA, 500		; PlayerHP, 000001f4H

; 2670 : 														 BAHIT[i] = { 0,0,1,1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000

; 2671 : 														 if (PHplay == FALSE)

	mov	eax, DWORD PTR ?PHplay@@3HA		; PHplay
	movups	XMMWORD PTR [edi], xmm0
	test	eax, eax
	je	SHORT $LN1289@DXW_MainLo

; 2672 : 														 {
; 2673 : 															 PHplay = TRUE;
; 2674 : 															 Timer[25] = 3;
; 2675 : 															 PHframe = 0;
; 2676 : 														 }
; 2677 : 														 else if (PHplay == TRUE)

	cmp	eax, 1
	jne	SHORT $LN1406@DXW_MainLo
$LN1289@DXW_MainLo:

; 2678 : 														 {
; 2679 : 															 PHplay = TRUE;

	mov	DWORD PTR ?PHplay@@3HA, esi		; PHplay

; 2680 : 															 Timer[25] = 3;

	mov	DWORD PTR ?Timer@@3PAHA+100, 3

; 2681 : 															 PHframe = 0;

	mov	DWORD PTR ?PHframe@@3HA, 0		; PHframe

; 2682 : 														 }
; 2683 : 													 }

	jmp	SHORT $LN1406@DXW_MainLo
$LN581@DXW_MainLo:

; 2684 : 													 else if (Mirror == TRUE)

	mov	eax, DWORD PTR ?isSafe@@3HA		; isSafe
	cmp	ecx, 1
	cmove	eax, esi
	mov	DWORD PTR ?isSafe@@3HA, eax		; isSafe
$LN1406@DXW_MainLo:

; 2659 : 									 {
; 2660 : 										 int i = 0;
; 2661 : 										 for (i = 0; i < 5; i++)

	mov	eax, DWORD PTR tv12037[ebp]
$LN13@DXW_MainLo:
	add	eax, 4
	add	edi, 16					; 00000010H
	mov	DWORD PTR tv12037[ebp], eax
	cmp	eax, OFFSET ?RandNum@@3PAHA+20
	jl	$LL15@DXW_MainLo

; 2685 : 													 {
; 2686 : 														 isSafe = TRUE;
; 2687 : 													 }
; 2688 : 												 }
; 2689 : 											 }
; 2690 : 										 }
; 2691 : 									 if (Mirror == TRUE && isSafe == FALSE)

	mov	esi, DWORD PTR _nX$3$[ebp]
	mov	edi, DWORD PTR _nY$1$[ebp]
	cmp	ecx, 1
	jne	SHORT $LN1366@DXW_MainLo
	cmp	DWORD PTR ?isSafe@@3HA, 0		; isSafe
	jne	SHORT $LN1366@DXW_MainLo

; 2692 : 									 {
; 2693 : 										 if (Pimmune == 0)

	cmp	DWORD PTR ?Pimmune@@3HA, 0		; Pimmune
	jne	SHORT $LN1366@DXW_MainLo

; 2694 : 										 {
; 2695 : 											 PlayerHP -= 1000;

	sub	DWORD PTR ?PlayerHP@@3HA, 1000		; PlayerHP, 000003e8H

; 2696 : 											 Pimmune = 1;
; 2697 : 											 if (PHplay == FALSE)

	mov	eax, DWORD PTR ?PHplay@@3HA		; PHplay
	mov	DWORD PTR ?Pimmune@@3HA, 1		; Pimmune
	test	eax, eax
	je	SHORT $LN1288@DXW_MainLo

; 2698 : 											 {
; 2699 : 												 PHplay = TRUE;
; 2700 : 												 Timer[25] = 3;
; 2701 : 												 PHframe = 0;
; 2702 : 											 }
; 2703 : 											 else if (PHplay == TRUE)

	cmp	eax, 1
	jne	SHORT $LN1366@DXW_MainLo
$LN1288@DXW_MainLo:

; 2704 : 											 {
; 2705 : 												 PHplay = TRUE;

	mov	DWORD PTR ?PHplay@@3HA, 1		; PHplay

; 2706 : 												 Timer[25] = 3;

	mov	DWORD PTR ?Timer@@3PAHA+100, 3

; 2707 : 												 PHframe = 0;

	mov	DWORD PTR ?PHframe@@3HA, 0		; PHframe
$LN1366@DXW_MainLo:

; 2708 : 											 }
; 2709 : 										 }
; 2710 : 									 }
; 2711 : 									 }
; 2712 : 									 if (BAframe >= 10 && Timer[6] < 2 && BAframe < 19)

	mov	eax, DWORD PTR ?BAframe@@3HA		; BAframe
$LN591@DXW_MainLo:
	cmp	eax, 10					; 0000000aH
	jl	SHORT $LN594@DXW_MainLo
	cmp	DWORD PTR ?Timer@@3PAHA+24, 2
	jge	SHORT $LN1273@DXW_MainLo
	cmp	eax, 19					; 00000013H
	jge	SHORT $LN594@DXW_MainLo

; 2713 : 									 {
; 2714 : 										 Timer[6]++;

	inc	DWORD PTR ?Timer@@3PAHA+24
	jmp	SHORT $LN594@DXW_MainLo
$LN1273@DXW_MainLo:

; 2715 : 									 }
; 2716 : 									 else if (BAframe >= 10 && Timer[6] >= 2 && BAframe < 19)

	cmp	eax, 19					; 00000013H
	jge	SHORT $LN594@DXW_MainLo

; 2717 : 									 {
; 2718 : 										 BAframe++;

	inc	eax

; 2719 : 										 Timer[6] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+24, 0
	mov	DWORD PTR ?BAframe@@3HA, eax		; BAframe
$LN594@DXW_MainLo:

; 2720 : 									 }
; 2721 : 									 switch (Randpat)

	mov	ecx, DWORD PTR ?Randpat@@3HA		; Randpat
	sub	ecx, 0
	je	$LN595@DXW_MainLo
	sub	ecx, 1
	je	$LN596@DXW_MainLo
	sub	ecx, 1
	jne	$LN607@DXW_MainLo

; 2732 : 									 case 2:
; 2733 : 										 if (RandNum[0] == TRUE)

	cmp	DWORD PTR ?RandNum@@3PAHA, 1
	push	ecx
	push	656					; 00000290H
	push	600					; 00000258H
	push	eax
	push	20					; 00000014H
	push	50					; 00000032H
	push	-170					; ffffff56H
	jne	SHORT $LN598@DXW_MainLo

; 2734 : 										 {
; 2735 : 											 ::__PutAnimeSprite(g_BossAtt2, -170, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt2@@3PAUIDirectDrawSurface7@@A ; g_BossAtt2

; 2736 : 										 }
; 2737 : 										 else

	jmp	SHORT $LN1524@DXW_MainLo
$LN598@DXW_MainLo:

; 2738 : 										 {
; 2739 : 											 ::__PutAnimeSprite(g_BossAtt, -170, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
$LN1524@DXW_MainLo:

; 2740 : 										 }
; 2741 : 										 if (RandNum[1] == TRUE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	cmp	DWORD PTR ?RandNum@@3PAHA+4, 1
	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	50					; 00000032H
	jne	SHORT $LN600@DXW_MainLo

; 2742 : 										 {
; 2743 : 											 ::__PutAnimeSprite(g_BossAtt2, 50, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt2@@3PAUIDirectDrawSurface7@@A ; g_BossAtt2

; 2744 : 										 }
; 2745 : 										 else

	jmp	SHORT $LN1525@DXW_MainLo
$LN600@DXW_MainLo:

; 2746 : 										 {
; 2747 : 											 ::__PutAnimeSprite(g_BossAtt, 50, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
$LN1525@DXW_MainLo:

; 2748 : 										 }
; 2749 : 										 if (RandNum[2] == TRUE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	cmp	DWORD PTR ?RandNum@@3PAHA+8, 1
	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	270					; 0000010eH
	jne	SHORT $LN602@DXW_MainLo

; 2750 : 										 {
; 2751 : 											 ::__PutAnimeSprite(g_BossAtt2, 270, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt2@@3PAUIDirectDrawSurface7@@A ; g_BossAtt2

; 2752 : 										 }
; 2753 : 										 else

	jmp	SHORT $LN1526@DXW_MainLo
$LN602@DXW_MainLo:

; 2754 : 										 {
; 2755 : 											 ::__PutAnimeSprite(g_BossAtt, 270, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
$LN1526@DXW_MainLo:

; 2756 : 										 }
; 2757 : 										 if (RandNum[3] == TRUE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	cmp	DWORD PTR ?RandNum@@3PAHA+12, 1
	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	490					; 000001eaH
	jne	SHORT $LN604@DXW_MainLo

; 2758 : 										 {
; 2759 : 											 ::__PutAnimeSprite(g_BossAtt2, 490, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt2@@3PAUIDirectDrawSurface7@@A ; g_BossAtt2

; 2760 : 										 }
; 2761 : 										 else

	jmp	SHORT $LN1527@DXW_MainLo
$LN604@DXW_MainLo:

; 2762 : 										 {
; 2763 : 											 ::__PutAnimeSprite(g_BossAtt, 490, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
$LN1527@DXW_MainLo:

; 2764 : 										 }
; 2765 : 										 if (RandNum[4] == TRUE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	cmp	DWORD PTR ?RandNum@@3PAHA+16, 1
	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	710					; 000002c6H
	jne	$LN606@DXW_MainLo

; 2766 : 										 {
; 2767 : 											 ::__PutAnimeSprite(g_BossAtt2, 710, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt2@@3PAUIDirectDrawSurface7@@A ; g_BossAtt2

; 2768 : 										 }
; 2769 : 										 else

	jmp	$LN1528@DXW_MainLo
$LN596@DXW_MainLo:

; 2727 : 										 break;
; 2728 : 									 case 1:
; 2729 : 										 ::__PutAnimeSprite(g_BossAtt, 50, 50, 20, BAframe, 600, 656, 0);

	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	eax
	push	20					; 00000014H
	push	50					; 00000032H
	push	50					; 00000032H
	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite

; 2730 : 										 ::__PutAnimeSprite(g_BossAtt, 490, 50, 20, BAframe, 600, 656, 0);

	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	490					; 000001eaH
	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 64					; 00000040H

; 2731 : 										 break;

	jmp	SHORT $LN1529@DXW_MainLo
$LN595@DXW_MainLo:

; 2722 : 									 {
; 2723 : 									 case 0:
; 2724 : 										 ::__PutAnimeSprite(g_BossAtt, -170, 50, 20, BAframe, 600, 656, 0);

	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	eax
	push	20					; 00000014H
	push	50					; 00000032H
	push	-170					; ffffff56H
	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite

; 2725 : 										 ::__PutAnimeSprite(g_BossAtt, 270, 50, 20, BAframe, 600, 656, 0);

	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	270					; 0000010eH
	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 64					; 00000040H

; 2726 : 										 ::__PutAnimeSprite(g_BossAtt, 710, 50, 20, BAframe, 600, 656, 0);

	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	710					; 000002c6H
$LN606@DXW_MainLo:

; 2770 : 										 {
; 2771 : 											 ::__PutAnimeSprite(g_BossAtt, 710, 50, 20, BAframe, 600, 656, 0);
; 2772 : 										 }
; 2773 : 										 break;
; 2774 : 									 }
; 2775 : 									 if (BAframe >= 19)

	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
$LN1528@DXW_MainLo:
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN1529@DXW_MainLo:
	mov	eax, DWORD PTR ?BAframe@@3HA		; BAframe
$LN607@DXW_MainLo:
	cmp	eax, 19					; 00000013H
	jl	$LN1368@DXW_MainLo

; 2776 : 									 {
; 2777 : 										 if (Timer[6] > 2)

	cmp	DWORD PTR ?Timer@@3PAHA+24, 2
	jle	$LN609@DXW_MainLo

; 2778 : 										 {
; 2779 : 											 BAframe = 0;
; 2780 : 											 Randpat2 = Randpat;

	mov	eax, DWORD PTR ?Randpat@@3HA		; Randpat

; 2781 : 											 g_bBAT = FALSE;
; 2782 : 											 Timer[7] = 60;
; 2783 : 											 if (P2HP < 2500)

	mov	ecx, 5
	cmp	DWORD PTR ?P2HP@@3HA, 2500		; P2HP, 000009c4H
	mov	DWORD PTR ?Randpat2@@3HA, eax		; Randpat2
	mov	eax, 60					; 0000003cH
	cmovl	eax, ecx
	mov	DWORD PTR ?BAframe@@3HA, 0		; BAframe
	mov	DWORD PTR ?Timer@@3PAHA+28, eax

; 2784 : 											 {
; 2785 : 												 Timer[7] -= 55;
; 2786 : 											 }
; 2787 : 											 Maximum = 0;
; 2788 : 											 RandNum[0, 1, 2, 3, 4] = { 0 };
; 2789 : 											 isSafe = FALSE;
; 2790 : 											 Pimmune = 0;
; 2791 : 											 if (g_bCast == FALSE && Timer[15] == 0)

	mov	eax, DWORD PTR ?g_bCast@@3HA		; g_bCast
	mov	DWORD PTR ?g_bBAT@@3HA, 0		; g_bBAT
	mov	DWORD PTR ?Maximum@@3HA, 0		; Maximum
	mov	DWORD PTR ?RandNum@@3PAHA+16, 0
	mov	DWORD PTR ?isSafe@@3HA, 0		; isSafe
	mov	DWORD PTR ?Pimmune@@3HA, 0		; Pimmune
	test	eax, eax
	jne	SHORT $LN612@DXW_MainLo
	cmp	DWORD PTR ?Timer@@3PAHA+60, eax
	jne	SHORT $LN612@DXW_MainLo

; 2792 : 											 {
; 2793 : 												 g_bCast = TRUE;

	mov	DWORD PTR ?g_bCast@@3HA, 1		; g_bCast

; 2794 : 												 Mirror = TRUE;

	mov	DWORD PTR ?Mirror@@3HA, 1		; Mirror

; 2795 : 												 Timer[13] = 5;

	mov	DWORD PTR ?Timer@@3PAHA+52, ecx

; 2796 : 												 Timer[14] = 500;

	mov	DWORD PTR ?Timer@@3PAHA+56, 500		; 000001f4H

; 2797 : 											 }
; 2798 : 											 if (Timer[14] == 0 && g_bCast == TRUE)

	jmp	$LN1368@DXW_MainLo
$LN612@DXW_MainLo:
	cmp	DWORD PTR ?Timer@@3PAHA+56, 0
	jne	$LN1368@DXW_MainLo
	cmp	eax, 1
	jne	$LN1368@DXW_MainLo

; 2799 : 											 {
; 2800 : 												 g_bCast = FALSE;

	mov	DWORD PTR ?g_bCast@@3HA, 0		; g_bCast

; 2801 : 												 CAframe = 0;

	mov	DWORD PTR ?CAframe@@3HA, 0		; CAframe

; 2802 : 												 Timer[10] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+40, 0

; 2803 : 												 Timer[15] = (rand() % 200) + 600;

	call	_rand
	cdq
	mov	ecx, 200				; 000000c8H
	idiv	ecx

; 2804 : 												 Mirror = FALSE;

	mov	DWORD PTR ?Mirror@@3HA, 0		; Mirror
	add	edx, 600				; 00000258H
	mov	DWORD PTR ?Timer@@3PAHA+60, edx

; 2805 : 											 }
; 2806 : 										 }
; 2807 : 										 else

	jmp	$LN1368@DXW_MainLo
$LN609@DXW_MainLo:

; 2808 : 										 {
; 2809 : 											 Timer[6]++;

	inc	DWORD PTR ?Timer@@3PAHA+24

; 2810 : 										 }
; 2811 : 									 }
; 2812 : 								 }
; 2813 : 								 else

	jmp	$LN1368@DXW_MainLo
$LN573@DXW_MainLo:

; 2814 : 								 {
; 2815 : 									 Randpat = rand() % 3;

	call	_rand
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR ?Randpat@@3HA, edx		; Randpat
	cmp	edx, DWORD PTR ?Randpat2@@3HA		; Randpat2

; 2816 : 									 if (Randpat == Randpat2)

	jne	SHORT $LN18@DXW_MainLo

; 2817 : 									 {
; 2818 : 										 switch (Randpat)

	mov	eax, edx
	sub	eax, 0
	je	SHORT $LN615@DXW_MainLo
	sub	eax, 1
	je	SHORT $LN616@DXW_MainLo
	sub	eax, 1
	jne	SHORT $LN18@DXW_MainLo

; 2826 : 										 case 2:
; 2827 : 											 Randpat = 0;

	xor	edx, edx
	mov	DWORD PTR ?Randpat@@3HA, edx		; Randpat
	jmp	$LN634@DXW_MainLo
$LN616@DXW_MainLo:

; 2822 : 											 break;
; 2823 : 										 case 1:
; 2824 : 											 Randpat = 2;

	mov	DWORD PTR ?Randpat@@3HA, 2		; Randpat

; 2825 : 											 break;

	jmp	SHORT $LN1274@DXW_MainLo
$LN615@DXW_MainLo:

; 2819 : 										 {
; 2820 : 										 case 0:
; 2821 : 											 Randpat = 1;

	mov	edx, 1
	mov	DWORD PTR ?Randpat@@3HA, edx		; Randpat

; 2828 : 											 break;
; 2829 : 										 }
; 2830 : 									 }
; 2831 : 									 if (Randpat == 2)

	jmp	$LN634@DXW_MainLo
$LN18@DXW_MainLo:
	cmp	edx, 2
	jne	$LN634@DXW_MainLo
$LN1274@DXW_MainLo:

; 2832 : 									 {
; 2833 : 										 RandNum[0] = rand() % 2;

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN1428@DXW_MainLo
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN1428@DXW_MainLo:

; 2834 : 										 if (RandNum[0] == 1 && Maximum < 2)

	mov	ecx, DWORD PTR ?Maximum@@3HA		; Maximum
	mov	DWORD PTR ?RandNum@@3PAHA, eax
	cmp	eax, 1
	jne	SHORT $LN621@DXW_MainLo
	cmp	ecx, 2
	jge	SHORT $LN619@DXW_MainLo

; 2835 : 										 {
; 2836 : 											 Maximum++;

	inc	ecx
	mov	DWORD PTR ?Maximum@@3HA, ecx		; Maximum
	jmp	SHORT $LN621@DXW_MainLo
$LN619@DXW_MainLo:

; 2837 : 										 }
; 2838 : 										 else if (RandNum[0] == 1 && Maximum >= 2)

	cmp	eax, 1
	jne	SHORT $LN621@DXW_MainLo
	xor	edx, edx
	cmp	ecx, 2
	cmovge	eax, edx
	mov	DWORD PTR ?RandNum@@3PAHA, eax
$LN621@DXW_MainLo:

; 2839 : 										 {
; 2840 : 											 RandNum[0] = 0;
; 2841 : 										 }
; 2842 : 										 RandNum[1] = rand() % 2;

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN1429@DXW_MainLo
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN1429@DXW_MainLo:

; 2843 : 										 if (RandNum[1] == 1 && Maximum < 2)

	mov	ecx, DWORD PTR ?Maximum@@3HA		; Maximum
	mov	DWORD PTR ?RandNum@@3PAHA+4, eax
	cmp	eax, 1
	jne	SHORT $LN624@DXW_MainLo
	cmp	ecx, 2
	jge	SHORT $LN622@DXW_MainLo

; 2844 : 										 {
; 2845 : 											 Maximum++;

	inc	ecx
	mov	DWORD PTR ?Maximum@@3HA, ecx		; Maximum
	jmp	SHORT $LN624@DXW_MainLo
$LN622@DXW_MainLo:

; 2846 : 										 }
; 2847 : 										 else if (RandNum[1] == 1 && Maximum >= 2)

	cmp	eax, 1
	jne	SHORT $LN624@DXW_MainLo
	xor	edx, edx
	cmp	ecx, 2
	cmovge	eax, edx
	mov	DWORD PTR ?RandNum@@3PAHA+4, eax
$LN624@DXW_MainLo:

; 2848 : 										 {
; 2849 : 											 RandNum[1] = 0;
; 2850 : 										 }
; 2851 : 										 RandNum[2] = rand() % 2;

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN1430@DXW_MainLo
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN1430@DXW_MainLo:

; 2852 : 										 if (RandNum[2] == 1 && Maximum < 2)

	mov	ecx, DWORD PTR ?Maximum@@3HA		; Maximum
	mov	DWORD PTR ?RandNum@@3PAHA+8, eax
	cmp	eax, 1
	jne	SHORT $LN627@DXW_MainLo
	cmp	ecx, 2
	jge	SHORT $LN625@DXW_MainLo

; 2853 : 										 {
; 2854 : 											 Maximum++;

	inc	ecx
	mov	DWORD PTR ?Maximum@@3HA, ecx		; Maximum
	jmp	SHORT $LN627@DXW_MainLo
$LN625@DXW_MainLo:

; 2855 : 										 }
; 2856 : 										 else if (RandNum[2] == 1 && Maximum >= 2)

	cmp	eax, 1
	jne	SHORT $LN627@DXW_MainLo
	xor	edx, edx
	cmp	ecx, 2
	cmovge	eax, edx
	mov	DWORD PTR ?RandNum@@3PAHA+8, eax
$LN627@DXW_MainLo:

; 2857 : 										 {
; 2858 : 											 RandNum[2] = 0;
; 2859 : 										 }
; 2860 : 										 RandNum[3] = rand() % 2;

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN1431@DXW_MainLo
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN1431@DXW_MainLo:

; 2861 : 										 if (RandNum[3] == 1 && Maximum < 2)

	mov	ecx, DWORD PTR ?Maximum@@3HA		; Maximum
	mov	DWORD PTR ?RandNum@@3PAHA+12, eax
	cmp	eax, 1
	jne	SHORT $LN630@DXW_MainLo
	cmp	ecx, 2
	jge	SHORT $LN628@DXW_MainLo

; 2862 : 										 {
; 2863 : 											 Maximum++;

	inc	ecx
	mov	DWORD PTR ?Maximum@@3HA, ecx		; Maximum
	jmp	SHORT $LN630@DXW_MainLo
$LN628@DXW_MainLo:

; 2864 : 										 }
; 2865 : 										 else if (RandNum[3] == 1 && Maximum >= 2)

	cmp	eax, 1
	jne	SHORT $LN630@DXW_MainLo
	xor	edx, edx
	cmp	ecx, 2
	cmovge	eax, edx
	mov	DWORD PTR ?RandNum@@3PAHA+12, eax
$LN630@DXW_MainLo:

; 2866 : 										 {
; 2867 : 											 RandNum[3] = 0;
; 2868 : 										 }
; 2869 : 										 RandNum[4] = rand() % 2;

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN1432@DXW_MainLo
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN1432@DXW_MainLo:

; 2870 : 										 if (RandNum[4] == 1 && Maximum < 2)

	mov	ecx, DWORD PTR ?Maximum@@3HA		; Maximum
	mov	DWORD PTR ?RandNum@@3PAHA+16, eax
	cmp	eax, 1
	jne	SHORT $LN633@DXW_MainLo
	cmp	ecx, 2
	jge	SHORT $LN631@DXW_MainLo

; 2871 : 										 {
; 2872 : 											 Maximum++;

	inc	ecx
	mov	DWORD PTR ?Maximum@@3HA, ecx		; Maximum
	jmp	SHORT $LN633@DXW_MainLo
$LN631@DXW_MainLo:

; 2873 : 										 }
; 2874 : 										 else if (RandNum[4] == 1 && Maximum >= 2)

	cmp	eax, 1
	jne	SHORT $LN633@DXW_MainLo
	xor	edx, edx
	cmp	ecx, 2
	cmovge	eax, edx
	mov	DWORD PTR ?RandNum@@3PAHA+16, eax
$LN633@DXW_MainLo:

; 2875 : 										 {
; 2876 : 											 RandNum[4] = 0;
; 2877 : 										 }
; 2878 : 										 if (Maximum == 0)

	test	ecx, ecx
	jne	SHORT $LN1367@DXW_MainLo

; 2879 : 										 {
; 2880 : 											 int n = 0;
; 2881 : 											 n = rand() % 4;

	call	_rand
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN1433@DXW_MainLo
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN1433@DXW_MainLo:

; 2882 : 											 RandNum[n] = 1;

	mov	DWORD PTR ?RandNum@@3PAHA[eax*4], 1
$LN1367@DXW_MainLo:

; 2883 : 										 }
; 2884 : 									 }
; 2885 : 									 switch (Randpat)

	mov	edx, DWORD PTR ?Randpat@@3HA		; Randpat
$LN634@DXW_MainLo:
	sub	edx, 0
	je	SHORT $LN635@DXW_MainLo
	sub	edx, 1
	jne	SHORT $LN20@DXW_MainLo

; 2893 : 										 break;
; 2894 : 									 case 1:
; 2895 : 										 RandNum[0] = 1;

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001

; 2896 : 										 RandNum[1] = 0;
; 2897 : 										 RandNum[2] = 1;
; 2898 : 										 RandNum[3] = 0;
; 2899 : 										 RandNum[4] = 1;

	mov	DWORD PTR ?RandNum@@3PAHA+16, 1
	jmp	SHORT $LN1535@DXW_MainLo
$LN635@DXW_MainLo:

; 2886 : 									 {
; 2887 : 									 case 0:
; 2888 : 										 RandNum[0] = 0;

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000000000000100000000

; 2889 : 										 RandNum[1] = 1;
; 2890 : 										 RandNum[2] = 0;
; 2891 : 										 RandNum[3] = 1;
; 2892 : 										 RandNum[4] = 0;

	mov	DWORD PTR ?RandNum@@3PAHA+16, 0
$LN1535@DXW_MainLo:

; 2900 : 										 break;
; 2901 : 									 }
; 2902 : 									 g_bBAT = TRUE;

	movups	XMMWORD PTR ?RandNum@@3PAHA, xmm0
$LN20@DXW_MainLo:
	mov	DWORD PTR ?g_bBAT@@3HA, 1		; g_bBAT
$LN1368@DXW_MainLo:

; 2903 : 								 }
; 2904 : 							 }
; 2905 : 						 }
; 2906 : 						 if (PHplay == TRUE)

	cmp	DWORD PTR ?PHplay@@3HA, 1		; PHplay
	jne	$LN643@DXW_MainLo

; 2907 : 						 {
; 2908 : 							 if (Timer[25] == 0)

	cmp	DWORD PTR ?Timer@@3PAHA+100, 0
	jne	SHORT $LN638@DXW_MainLo

; 2909 : 							 {
; 2910 : 								 PHframe++;

	mov	eax, DWORD PTR ?PHframe@@3HA		; PHframe
	inc	eax

; 2911 : 								 Timer[25] = 3;

	mov	DWORD PTR ?Timer@@3PAHA+100, 3
	mov	DWORD PTR ?PHframe@@3HA, eax		; PHframe
	cmp	eax, 5

; 2912 : 								 if (PHframe > 5)

	jle	SHORT $LN1203@DXW_MainLo

; 2913 : 								 {
; 2914 : 									 PHplay = FALSE;

	mov	DWORD PTR ?PHplay@@3HA, 0		; PHplay

; 2915 : 									 PHframe = 0;

	mov	DWORD PTR ?PHframe@@3HA, 0		; PHframe

; 2916 : 									 Timer[25] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+100, 0

; 2917 : 								 }
; 2918 : 							 }

	jmp	SHORT $LN643@DXW_MainLo
$LN638@DXW_MainLo:

; 2919 : 							 else { Timer[25] --; }

	dec	DWORD PTR ?Timer@@3PAHA+100
$LN1203@DXW_MainLo:

; 2920 : 							 if (PHplay == TRUE)
; 2921 : 							 {
; 2922 : 								 if (g_bLookL)

	add	edi, -70				; ffffffbaH
	cmp	DWORD PTR ?g_bLookL@@3HA, 0		; g_bLookL
	je	SHORT $LN1051@DXW_MainLo

; 2923 : 								 {
; 2924 : 									 ::__PutAnimeSprite(g_pDDSDPlayerHit, nX - 50, nY - 70, 6, PHframe, 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?PHframe@@3HA			; PHframe
	lea	eax, DWORD PTR [esi-50]
	push	6
	push	edi
	push	eax
	push	DWORD PTR ?g_pDDSDPlayerHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDPlayerHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN1051@DXW_MainLo:

; 2925 : 								 }
; 2926 : 								 if (g_bLookR)

	cmp	DWORD PTR ?g_bLookR@@3HA, 0		; g_bLookR
	je	SHORT $LN643@DXW_MainLo

; 2927 : 								 {
; 2928 : 									 ::__PutAnimeSprite(g_pDDSDPlayerHit, nX - 40, nY - 70, 6, PHframe, 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?PHframe@@3HA			; PHframe
	lea	eax, DWORD PTR [esi-40]
	push	6
	push	edi
	push	eax
	push	DWORD PTR ?g_pDDSDPlayerHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDPlayerHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN643@DXW_MainLo:

; 2929 : 								 }
; 2930 : 							 }
; 2931 : 						 }
; 2932 : 						 if (BHMPlay == TRUE)

	cmp	DWORD PTR ?BHMPlay@@3HA, 1		; BHMPlay
	jne	$LN668@DXW_MainLo

; 2933 : 						 {
; 2934 : 							 if (Timer[24] == 0 && BHplay[0] == TRUE)

	cmp	DWORD PTR ?Timer@@3PAHA+96, 0
	jne	SHORT $LN645@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA, 1
	jne	SHORT $LN649@DXW_MainLo

; 2935 : 							 {
; 2936 : 								 BHframe[0]++;

	mov	eax, DWORD PTR ?BHframe@@3PAHA
	inc	eax

; 2937 : 								 Timer[24] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+96, 2
	mov	DWORD PTR ?BHframe@@3PAHA, eax

; 2938 : 								 if (BHframe[0] == 6)

	cmp	eax, 6
	jne	SHORT $LN647@DXW_MainLo

; 2939 : 								 {
; 2940 : 									 BHframe[0] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA, 0

; 2941 : 									 Timer[24] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+96, 0

; 2942 : 									 BHplay[0] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA, 0

; 2943 : 								 }
; 2944 : 								 if (BHframe[0] == 4 && BHplay[1] == FALSE)

	jmp	SHORT $LN649@DXW_MainLo
$LN647@DXW_MainLo:
	cmp	eax, 4
	jne	SHORT $LN649@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+4, 0
	jne	SHORT $LN649@DXW_MainLo

; 2945 : 								 {
; 2946 : 									 Timer[26] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+104, 2

; 2947 : 									 BHplay[1] = TRUE;

	mov	DWORD PTR ?BHplay@@3PAHA+4, 1

; 2948 : 								 }
; 2949 : 							 }

	jmp	$LN1205@DXW_MainLo
$LN645@DXW_MainLo:

; 2950 : 							 else if (Timer[24] > 0 && BHplay[0] == TRUE) { Timer[24]--; }

	jle	SHORT $LN649@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA, 1
	jne	SHORT $LN649@DXW_MainLo
	dec	DWORD PTR ?Timer@@3PAHA+96
$LN649@DXW_MainLo:

; 2951 : 							 if (Timer[26] == 0 && BHplay[1] == TRUE)

	cmp	DWORD PTR ?Timer@@3PAHA+104, 0
	jne	SHORT $LN650@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+4, 1
	jne	SHORT $LN654@DXW_MainLo

; 2952 : 							 {
; 2953 : 								 BHframe[1]++;

	mov	eax, DWORD PTR ?BHframe@@3PAHA+4
	inc	eax

; 2954 : 								 Timer[26] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+104, 2
	mov	DWORD PTR ?BHframe@@3PAHA+4, eax

; 2955 : 								 if (BHframe[1] == 6)

	cmp	eax, 6
	jne	SHORT $LN652@DXW_MainLo

; 2956 : 								 {
; 2957 : 									 BHframe[1] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA+4, 0

; 2958 : 									 Timer[26] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+104, 0

; 2959 : 									 BHplay[1] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA+4, 0

; 2960 : 								 }
; 2961 : 								 if (BHframe[1] == 4 && BHplay[2] == FALSE)

	jmp	SHORT $LN654@DXW_MainLo
$LN652@DXW_MainLo:
	cmp	eax, 4
	jne	SHORT $LN654@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+8, 0
	jne	SHORT $LN654@DXW_MainLo

; 2962 : 								 {
; 2963 : 									 Timer[27] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+108, 2

; 2964 : 									 BHplay[2] = TRUE;

	mov	DWORD PTR ?BHplay@@3PAHA+8, 1

; 2965 : 								 }
; 2966 : 							 }

	jmp	SHORT $LN1207@DXW_MainLo
$LN650@DXW_MainLo:

; 2967 : 							 else if (Timer[26] > 0 && BHplay[1] == TRUE) { Timer[26]--; }

	jle	SHORT $LN654@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+4, 1
	jne	SHORT $LN654@DXW_MainLo
$LN1205@DXW_MainLo:
	dec	DWORD PTR ?Timer@@3PAHA+104
$LN654@DXW_MainLo:

; 2968 : 							 if (Timer[27] == 0 && BHplay[2] == TRUE)

	cmp	DWORD PTR ?Timer@@3PAHA+108, 0
	jne	SHORT $LN655@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+8, 1
	jne	SHORT $LN658@DXW_MainLo

; 2969 : 							 {
; 2970 : 								 BHframe[2]++;

	mov	eax, DWORD PTR ?BHframe@@3PAHA+8
	inc	eax

; 2971 : 								 Timer[27] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+108, 2
	mov	DWORD PTR ?BHframe@@3PAHA+8, eax

; 2972 : 								 if (BHframe[2] == 6)

	cmp	eax, 6
	jne	SHORT $LN658@DXW_MainLo

; 2973 : 								 {
; 2974 : 									 BHframe[2] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA+8, 0

; 2975 : 									 Timer[27] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+108, 0

; 2976 : 									 BHplay[2] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA+8, 0

; 2977 : 								 }
; 2978 : 							 }

	jmp	SHORT $LN658@DXW_MainLo
$LN655@DXW_MainLo:

; 2979 : 							 else if (Timer[27] > 0 && BHplay[2] == TRUE) { Timer[27]--; }

	jle	SHORT $LN658@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+8, 1
	jne	SHORT $LN658@DXW_MainLo
$LN1207@DXW_MainLo:
	dec	DWORD PTR ?Timer@@3PAHA+108
$LN658@DXW_MainLo:

; 2980 : 							 if (BHplay[0] == FALSE && BHplay[1] == FALSE && BHplay[2] == FALSE)

	cmp	DWORD PTR ?BHplay@@3PAHA, 0
	jne	SHORT $LN659@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+4, 0
	jne	$LN662@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+8, 0
	jne	$LN665@DXW_MainLo

; 2981 : 							 {
; 2982 : 								 BHMPlay = FALSE;

	mov	DWORD PTR ?BHMPlay@@3HA, 0		; BHMPlay

; 2983 : 							 }
; 2984 : 							 if (BHplay[0] == TRUE)

	jmp	$LN668@DXW_MainLo
$LN659@DXW_MainLo:
	cmp	DWORD PTR ?BHplay@@3PAHA, 1
	jne	SHORT $LN662@DXW_MainLo

; 2985 : 							 {
; 2986 : 								 if (g_bLookL)

	mov	edi, DWORD PTR _bnY$2$[ebp]
	mov	esi, DWORD PTR _bnX$2$[ebp]
	add	edi, -40				; ffffffd8H
	cmp	DWORD PTR ?g_bLookL@@3HA, 0		; g_bLookL
	je	SHORT $LN1052@DXW_MainLo

; 2987 : 								 {
; 2988 : 									 ::__PutAnimeSprite(g_pDDSDBossHit, bnX, bnY - 40, 6, BHframe[0], 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?BHframe@@3PAHA
	push	6
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDBossHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN1052@DXW_MainLo:

; 2989 : 								 }
; 2990 : 								 if (g_bLookR)

	cmp	DWORD PTR ?g_bLookR@@3HA, 0		; g_bLookR
	je	SHORT $LN662@DXW_MainLo

; 2991 : 								 {
; 2992 : 									 ::__PutAnimeSprite(g_pDDSDBossHit, bnX + 20, bnY - 40, 6, BHframe[0], 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?BHframe@@3PAHA
	lea	eax, DWORD PTR [esi+20]
	push	6
	push	edi
	push	eax
	push	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDBossHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN662@DXW_MainLo:

; 2993 : 								 }
; 2994 : 							 }
; 2995 : 							 if (BHplay[1] == TRUE)

	cmp	DWORD PTR ?BHplay@@3PAHA+4, 1
	jne	SHORT $LN665@DXW_MainLo

; 2996 : 							 {
; 2997 : 								 if (g_bLookL)

	mov	edi, DWORD PTR _bnY$2$[ebp]
	mov	esi, DWORD PTR _bnX$2$[ebp]
	add	edi, -40				; ffffffd8H
	cmp	DWORD PTR ?g_bLookL@@3HA, 0		; g_bLookL
	je	SHORT $LN1053@DXW_MainLo

; 2998 : 								 {
; 2999 : 									 ::__PutAnimeSprite(g_pDDSDBossHit, bnX, bnY - 40, 6, BHframe[1], 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?BHframe@@3PAHA+4
	push	6
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDBossHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN1053@DXW_MainLo:

; 3000 : 								 }
; 3001 : 								 if (g_bLookR)

	cmp	DWORD PTR ?g_bLookR@@3HA, 0		; g_bLookR
	je	SHORT $LN665@DXW_MainLo

; 3002 : 								 {
; 3003 : 									 ::__PutAnimeSprite(g_pDDSDBossHit, bnX + 20, bnY - 40, 6, BHframe[1], 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?BHframe@@3PAHA+4
	lea	eax, DWORD PTR [esi+20]
	push	6
	push	edi
	push	eax
	push	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDBossHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN665@DXW_MainLo:

; 3004 : 								 }
; 3005 : 							 }
; 3006 : 							 if (BHplay[2] == TRUE)

	cmp	DWORD PTR ?BHplay@@3PAHA+8, 1
	jne	SHORT $LN668@DXW_MainLo

; 3007 : 							 {
; 3008 : 								 if (g_bLookL)

	mov	edi, DWORD PTR _bnY$2$[ebp]
	mov	esi, DWORD PTR _bnX$2$[ebp]
	add	edi, -40				; ffffffd8H
	cmp	DWORD PTR ?g_bLookL@@3HA, 0		; g_bLookL
	je	SHORT $LN1054@DXW_MainLo

; 3009 : 								 {
; 3010 : 									 ::__PutAnimeSprite(g_pDDSDBossHit, bnX, bnY - 40, 6, BHframe[2], 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?BHframe@@3PAHA+8
	push	6
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDBossHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN1054@DXW_MainLo:

; 3011 : 								 }
; 3012 : 								 if (g_bLookR)

	cmp	DWORD PTR ?g_bLookR@@3HA, 0		; g_bLookR
	je	SHORT $LN668@DXW_MainLo

; 3013 : 								 {
; 3014 : 									 ::__PutAnimeSprite(g_pDDSDBossHit, bnX + 20, bnY - 40, 6, BHframe[2], 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?BHframe@@3PAHA+8
	lea	eax, DWORD PTR [esi+20]
	push	6
	push	edi
	push	eax
	push	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDBossHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN668@DXW_MainLo:

; 3015 : 								 }
; 3016 : 							 }
; 3017 : 						 }
; 3018 : 						 if (P2HP < 1)

	cmp	DWORD PTR ?P2HP@@3HA, 1			; P2HP
	jge	$LN669@DXW_MainLo

; 3019 : 						 {
; 3020 : 							 if (g_pDS[1])

	mov	eax, DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+4
	test	eax, eax
	je	SHORT $LN670@DXW_MainLo

; 3021 : 								 m_HHSound.Stop(g_pDS[1]);

	push	eax
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Stop@CHHSound@@QAEXPAUIDirectSoundBuffer@@@Z ; CHHSound::Stop
$LN670@DXW_MainLo:

; 3022 : 							 p2die = 1;
; 3023 : 							 g_nPhaze = 3;
; 3024 : 							 g_Pos.x = 0;
; 3025 : 							 g_Pos.y = 550;
; 3026 : 							 g_BPos.x = 700;
; 3027 : 							 g_BPos.y = 480;
; 3028 : 							 Gravity = 13;
; 3029 : 							 g_bSetSpeed = FALSE;
; 3030 : 							 g_bJump = FALSE;
; 3031 : 							 g_bJaccel = FALSE;
; 3032 : 							 g_bJLeft = FALSE;
; 3033 : 							 g_bJRight = FALSE;
; 3034 : 							 g_bCast = FALSE;
; 3035 : 							 g_bCFire = FALSE;
; 3036 : 							 g_bCLeft = FALSE;
; 3037 : 							 g_bCRight = FALSE;
; 3038 : 							 CastHit = FALSE;
; 3039 : 							 Timer[11] = 0;
; 3040 : 							 cx = 0;
; 3041 : 							 CAAframe = 0;
; 3042 : 							 Cast = { 0,0,1,1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000
	mov	DWORD PTR ?p2die@@3HA, 1		; p2die
	mov	DWORD PTR ?g_nPhaze@@3HA, 3		; g_nPhaze
	mov	DWORD PTR ?g_Pos@@3UtagPOINT@@A, 0
	mov	DWORD PTR ?g_Pos@@3UtagPOINT@@A+4, 550	; 00000226H
	mov	DWORD PTR ?g_BPos@@3UtagPOINT@@A, 700	; 000002bcH
	mov	DWORD PTR ?g_BPos@@3UtagPOINT@@A+4, 480	; 000001e0H
	mov	DWORD PTR ?Gravity@@3HA, 13		; Gravity, 0000000dH
	mov	DWORD PTR ?g_bSetSpeed@@3HA, 0		; g_bSetSpeed
	mov	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	mov	DWORD PTR ?g_bJaccel@@3HA, 0		; g_bJaccel
	mov	DWORD PTR ?g_bJLeft@@3HA, 0		; g_bJLeft
	mov	DWORD PTR ?g_bJRight@@3HA, 0		; g_bJRight
	mov	DWORD PTR ?g_bCast@@3HA, 0		; g_bCast
	mov	DWORD PTR ?g_bCFire@@3HA, 0		; g_bCFire
	mov	DWORD PTR ?g_bCLeft@@3HA, 0		; g_bCLeft
	mov	DWORD PTR ?g_bCRight@@3HA, 0		; g_bCRight
	mov	DWORD PTR ?CastHit@@3HA, 0		; CastHit
	mov	DWORD PTR ?Timer@@3PAHA+44, 0
	mov	DWORD PTR ?cx@@3HA, 0			; cx
	mov	DWORD PTR ?CAAframe@@3HA, 0		; CAAframe
	movups	XMMWORD PTR ?Cast@@3UtagRECT@@A, xmm0

; 3043 : 							 Timer[17] = (rand() % 150) + 200;

	call	_rand
	cdq
	mov	ecx, 150				; 00000096H
	idiv	ecx

; 3044 : 							 Timer[16] = 0;
; 3045 : 							 BossAtt = FALSE;
; 3046 : 							 BAL = FALSE;
; 3047 : 							 BAR = FALSE;
; 3048 : 							 BKframe = 0;
; 3049 : 							 KnockHIT = FALSE;
; 3050 : 							 Knock = { 0,0,1,1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000

; 3051 : 							 BAframe = 0;
; 3052 : 							 Randpat2 = Randpat;

	mov	eax, DWORD PTR ?Randpat@@3HA		; Randpat
	add	edx, 200				; 000000c8H
	mov	DWORD PTR ?Timer@@3PAHA+68, edx
	mov	DWORD PTR ?Timer@@3PAHA+64, 0
	mov	DWORD PTR ?BossAtt@@3HA, 0		; BossAtt
	mov	DWORD PTR ?BAL@@3HA, 0			; BAL
	mov	DWORD PTR ?BAR@@3HA, 0			; BAR
	mov	DWORD PTR ?BKframe@@3HA, 0		; BKframe
	mov	DWORD PTR ?KnockHIT@@3HA, 0		; KnockHIT
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
	mov	DWORD PTR ?BAframe@@3HA, 0		; BAframe
	mov	DWORD PTR ?Randpat2@@3HA, eax		; Randpat2

; 3053 : 							 g_bBAT = FALSE;

	mov	DWORD PTR ?g_bBAT@@3HA, 0		; g_bBAT

; 3054 : 							 Timer[7] = 60;

	mov	DWORD PTR ?Timer@@3PAHA+28, 60		; 0000003cH

; 3055 : 							 Maximum = 0;

	mov	DWORD PTR ?Maximum@@3HA, 0		; Maximum

; 3056 : 							 RandNum[0, 1, 2, 3, 4] = { 0 };

	mov	DWORD PTR ?RandNum@@3PAHA+16, 0

; 3057 : 							 BHplay[0] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA, 0

; 3058 : 							 BHplay[1] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA+4, 0

; 3059 : 							 BHplay[2] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA+8, 0

; 3060 : 							 BHMPlay = FALSE;

	mov	DWORD PTR ?BHMPlay@@3HA, 0		; BHMPlay

; 3061 : 							 BHframe[0] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA, 0

; 3062 : 							 BHframe[1] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA+4, 0

; 3063 : 							 BHframe[2] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA+8, 0

; 3064 : 							 Timer[24] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+96, 2

; 3065 : 							 Timer[26] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+104, 2

; 3066 : 							 Timer[27] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+108, 2

; 3067 : 
; 3068 : 						 }
; 3069 : 						 //·ºÆ® È®ÀÎ¿ë
; 3070 : 						 //::__Lock(g_pDDSBack);
; 3071 : 						// __DrawRect16(PHIT.left, PHIT.top, PHIT.right, PHIT.bottom, wPixel);
; 3072 : 						// __DrawRect16(HIT.left, HIT.top, HIT.right, HIT.bottom, wPixel);
; 3073 : 						// __DrawRect16(Cast.left, Cast.top, Cast.right, Cast.bottom, wPixel);
; 3074 : 						// __DrawRect16(BOSS.left, BOSS.top, BOSS.right, BOSS.bottom, wPixel);
; 3075 : 						 //__DrawRect16(Knock.left, Knock.top, Knock.right, Knock.bottom, wPixel);
; 3076 : 						// for (i = 0; i < 5; i++)
; 3077 : 						// {
; 3078 : 						// __DrawRect16(BAHIT[i].left, BAHIT[i].top, BAHIT[i].right, BAHIT[i].bottom, wPixel);
; 3079 : 						// }
; 3080 : 						 //::__Unlock(g_pDDSBack);
; 3081 : 						 
; 3082 : 						 if (Timer[7] > 0)

	jmp	SHORT $LN1208@DXW_MainLo
$LN669@DXW_MainLo:
	cmp	DWORD PTR ?Timer@@3PAHA+28, 0
	jle	SHORT $LN671@DXW_MainLo
$LN1208@DXW_MainLo:

; 3083 : 						 {
; 3084 : 							 Timer[7]--;

	dec	DWORD PTR ?Timer@@3PAHA+28
$LN671@DXW_MainLo:

; 3085 : 						 }
; 3086 : 						 if (Timer[5] > 0)

	cmp	DWORD PTR ?Timer@@3PAHA+20, 0
	jle	SHORT $LN1070@DXW_MainLo

; 3087 : 						 {
; 3088 : 							 Timer[5] -= 1;

	dec	DWORD PTR ?Timer@@3PAHA+20
	jmp	SHORT $LN674@DXW_MainLo
$LN1070@DXW_MainLo:

; 3089 : 						 }
; 3090 : 						 else if (Timer[5] <= 0 && bossimmu == TRUE)

	cmp	DWORD PTR ?bossimmu@@3HA, 1		; bossimmu
	jne	SHORT $LN674@DXW_MainLo

; 3091 : 						 {
; 3092 : 							 bossimmu = FALSE;

	mov	DWORD PTR ?bossimmu@@3HA, 0		; bossimmu

; 3093 : 							 Timer[5] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+20, 0
$LN674@DXW_MainLo:

; 3094 : 						 }
; 3095 : 						 ::__PutSprite(g_pDDSHP, 130, 0);

	push	0
	push	130					; 00000082H
	push	DWORD PTR ?g_pDDSHP@@3PAUIDirectDrawSurface7@@A ; g_pDDSHP
	call	?__PutSprite@@YAXPAUIDirectDrawSurface7@@HH@Z ; __PutSprite

; 3096 : 						 if (P2HP > 1)

	mov	eax, DWORD PTR ?P2HP@@3HA		; P2HP
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jle	$LN979@DXW_MainLo

; 3097 : 						 {
; 3098 : 							 ::__Putbar(g_pDDSHPbar, 132, 2, P2MHP, P2HP, P2HPrate);

	movss	xmm0, DWORD PTR ?P2HPrate@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	eax
	push	DWORD PTR ?P2MHP@@3HA			; P2MHP
	jmp	$LN1496@DXW_MainLo
$LN677@DXW_MainLo:

; 3099 : 						 }
; 3100 : 						 ::__PutSprite(g_pDDSPHP, 400, 737);
; 3101 : 						 if (PlayerHP > 1)
; 3102 : 						 {
; 3103 : 							 ::__Putbar(g_pDDSPHPbar, 425, 744, PlayerMHP, PlayerHP, PlayerHPrate);
; 3104 : 						 }
; 3105 : 						 //////////////////////////////////////////////////////////
; 3106 : 						 ///// ±âÅ¸Á¤º¸ 
; 3107 : 						 DXW_DisplayInfo();
; 3108 : 						 break;
; 3109 : 						 //////////////////////////////////////////////////////////
; 3110 : 						 //////////////////////////////////////////////////////////
; 3111 : 						 //////////////////////////////////////////////////////////
; 3112 : 						 //////////////////////////////////////////////////////////
; 3113 : 						 //////////////////////////////////////////////////////////
; 3114 : 						 //////////////////////////////////////////////////////////
; 3115 : 						 //////////////////////////////////////////////////////////
; 3116 : 						 //////////////////////////////////////////////////////////
; 3117 : 						 //////////////////////////////////////////////////////////
; 3118 : 						 //////////////////////////////////////////////////////////
; 3119 : 						 //////////////////////////////////////////////////////////
; 3120 : 						 //////////////////////////////////////////////////////////
; 3121 : 				case 3 : 
; 3122 : 					if (p3musicstart == TRUE)

	cmp	DWORD PTR ?p3musicstart@@3HA, 1		; p3musicstart
	je	SHORT $LN679@DXW_MainLo

; 3123 : 										{
; 3124 : 										}
; 3125 : 												else
; 3126 : 												{
; 3127 : 													m_HHSound.Play(g_pDS[2], true);

	push	1
	push	DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+8
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Play@CHHSound@@QAEXPAUIDirectSoundBuffer@@_N@Z ; CHHSound::Play

; 3128 : 													p3musicstart = TRUE;

	mov	DWORD PTR ?p3musicstart@@3HA, 1		; p3musicstart
$LN679@DXW_MainLo:

; 3129 : 												}
; 3130 : 												//¹è°æ
; 3131 : 													::__PutImage(g_pDDSBG3, Bx, 0);

	push	0
	push	DWORD PTR ?Bx@@3HA			; Bx
	push	DWORD PTR ?g_pDDSBG3@@3PAUIDirectDrawSurface7@@A ; g_pDDSBG3
	call	?__PutImage@@YAXPAUIDirectDrawSurface7@@HH@Z ; __PutImage

; 3132 : 												if (Timer[11] > 0)

	mov	eax, DWORD PTR ?Timer@@3PAHA+44
	add	esp, 12					; 0000000cH
	test	eax, eax
	jle	SHORT $LN680@DXW_MainLo

; 3133 : 												{
; 3134 : 													Timer[11] -= 1;

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+44, eax
$LN680@DXW_MainLo:

; 3135 : 												}
; 3136 : 												if (Timer[12] > 0)

	mov	eax, DWORD PTR ?Timer@@3PAHA+48
	test	eax, eax
	jle	SHORT $LN681@DXW_MainLo

; 3137 : 												{
; 3138 : 													Timer[12] -= 1;

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+48, eax
$LN681@DXW_MainLo:

; 3139 : 												}
; 3140 : 												//ÀÌµ¿ ¹× Á¡ÇÁ ·ÎÁ÷
; 3141 : 												///////////////////////
; 3142 : 												///////////////////////
; 3143 : 												///////////////////////
; 3144 : 												///////////////////////
; 3145 : 												//				g_BPos.x += 1;
; 3146 : 
; 3147 : 												if (g_BPos.x + 60 < g_Pos.x) //º¸½º ¿À¸¥ÂÊ ÀüÈ¯

	mov	ecx, DWORD PTR ?g_BPos@@3UtagPOINT@@A
	mov	edx, DWORD PTR ?g_Pos@@3UtagPOINT@@A
	lea	eax, DWORD PTR [ecx+60]
	cmp	eax, edx
	jge	SHORT $LN682@DXW_MainLo

; 3148 : 												{
; 3149 : 													g_bBLR = TRUE;

	mov	DWORD PTR ?g_bBLR@@3HA, 1		; g_bBLR

; 3150 : 													g_bBLL = FALSE;

	mov	DWORD PTR ?g_bBLL@@3HA, 0		; g_bBLL
	jmp	SHORT $LN684@DXW_MainLo
$LN682@DXW_MainLo:

; 3151 : 												}
; 3152 : 												else if (g_BPos.x > g_Pos.x - 60) //º¸½º ¿ÞÂÊ ÀüÈ¯

	lea	eax, DWORD PTR [edx-60]
	cmp	ecx, eax
	jle	SHORT $LN684@DXW_MainLo

; 3153 : 												{
; 3154 : 													g_bBLR = FALSE;

	mov	DWORD PTR ?g_bBLR@@3HA, 0		; g_bBLR

; 3155 : 													g_bBLL = TRUE;

	mov	DWORD PTR ?g_bBLL@@3HA, 1		; g_bBLL
$LN684@DXW_MainLo:

; 3156 : 												}
; 3157 : 												if (g_BPos.x + 300 < g_Pos.x) //º¸½º ¿À¸¥ÂÊ ÀÌµ¿

	lea	eax, DWORD PTR [ecx+300]
	cmp	eax, edx
	jge	SHORT $LN685@DXW_MainLo

; 3158 : 												{
; 3159 : 													if (BossAtt == FALSE && g_bGatt == FALSE)

	cmp	DWORD PTR ?BossAtt@@3HA, 0		; BossAtt
	jne	SHORT $LN687@DXW_MainLo
	cmp	DWORD PTR ?g_bGatt@@3HA, 0		; g_bGatt
	jne	SHORT $LN687@DXW_MainLo

; 3160 : 													{
; 3161 : 														g_BPos.x += 1;

	inc	ecx
	mov	DWORD PTR ?g_BPos@@3UtagPOINT@@A, ecx
$LN687@DXW_MainLo:

; 3162 : 													}
; 3163 : 													g_bBLR = TRUE;

	mov	DWORD PTR ?g_bBLR@@3HA, 1		; g_bBLR

; 3164 : 													g_bBLL = FALSE;

	mov	DWORD PTR ?g_bBLL@@3HA, 0		; g_bBLL
	jmp	SHORT $LN688@DXW_MainLo
$LN685@DXW_MainLo:

; 3165 : 												}
; 3166 : 												else if (g_BPos.x - 200 > g_Pos.x) //º¸½º ¿ÞÂÊ ÀÌµ¿

	lea	eax, DWORD PTR [ecx-200]
	cmp	eax, edx
	jle	SHORT $LN688@DXW_MainLo

; 3167 : 												{
; 3168 : 													if (BossAtt == FALSE && g_bGatt == FALSE)

	cmp	DWORD PTR ?BossAtt@@3HA, 0		; BossAtt
	jne	SHORT $LN689@DXW_MainLo
	cmp	DWORD PTR ?g_bGatt@@3HA, 0		; g_bGatt
	jne	SHORT $LN689@DXW_MainLo

; 3169 : 													{
; 3170 : 														g_BPos.x -= 1;

	dec	ecx
	mov	DWORD PTR ?g_BPos@@3UtagPOINT@@A, ecx
$LN689@DXW_MainLo:

; 3171 : 													}
; 3172 : 													g_bBLR = FALSE;

	mov	DWORD PTR ?g_bBLR@@3HA, 0		; g_bBLR

; 3173 : 													g_bBLL = TRUE;

	mov	DWORD PTR ?g_bBLL@@3HA, 1		; g_bBLL
$LN688@DXW_MainLo:

; 3174 : 												}
; 3175 : 												if (::GetKeyState(0x58) & 0x80 && g_bAtt == FALSE && g_bRush == FALSE) //°ø°Ý ·ÎÁ÷

	push	88					; 00000058H
	call	esi
	test	al, al
	jns	$LN1369@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN1369@DXW_MainLo
	cmp	DWORD PTR ?g_bRush@@3HA, 0		; g_bRush
	jne	SHORT $LN1369@DXW_MainLo

; 3176 : 												{
; 3177 : 													if (g_bLookR == TRUE)

	cmp	DWORD PTR ?g_bLookR@@3HA, 1		; g_bLookR
	jne	SHORT $LN691@DXW_MainLo

; 3178 : 													{
; 3179 : 														g_bAR = TRUE;

	mov	DWORD PTR ?g_bAR@@3HA, 1		; g_bAR

; 3180 : 														g_bAtt = TRUE;
; 3181 : 														Aframe = 12;

	mov	DWORD PTR ?Aframe@@3HA, 12		; Aframe, 0000000cH

; 3182 : 														if (g_pDS[3])
; 3183 : 															m_HHSound.Stop(g_pDS[3]);
; 3184 : 														m_HHSound.Play(g_pDS[3], false);

	jmp	SHORT $LN1538@DXW_MainLo
$LN691@DXW_MainLo:

; 3185 : 													}
; 3186 : 													else if (g_bLookL == TRUE)

	cmp	DWORD PTR ?g_bLookL@@3HA, 1		; g_bLookL
	jne	SHORT $LN1369@DXW_MainLo

; 3187 : 													{
; 3188 : 														g_bAL = TRUE;

	mov	DWORD PTR ?g_bAL@@3HA, 1		; g_bAL

; 3189 : 														g_bAtt = TRUE;
; 3190 : 														Aframe = 0;

	mov	DWORD PTR ?Aframe@@3HA, 0		; Aframe
$LN1538@DXW_MainLo:

; 3191 : 														if (g_pDS[3])
; 3192 : 															m_HHSound.Stop(g_pDS[3]);
; 3193 : 														m_HHSound.Play(g_pDS[3], false);
; 3194 : 													}
; 3195 : 												}
; 3196 : 												//ÀÌµ¿ ¹× Á¡ÇÁ ·ÎÁ÷ ³¡
; 3197 : 												//// Ç¥¸é Å¬¸®¾î	
; 3198 : 												//_FillSurface(g_pDDSBack, 0x00000000);
; 3199 : 												nX = g_Pos.x;

	mov	eax, DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+12
	mov	DWORD PTR ?g_bAtt@@3HA, 1		; g_bAtt
	test	eax, eax
	je	SHORT $LN695@DXW_MainLo
	push	eax
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Stop@CHHSound@@QAEXPAUIDirectSoundBuffer@@@Z ; CHHSound::Stop
	mov	eax, DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+12
$LN695@DXW_MainLo:
	push	0
	push	eax
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Play@CHHSound@@QAEXPAUIDirectSoundBuffer@@_N@Z ; CHHSound::Play
$LN1369@DXW_MainLo:

; 3200 : 												nY = g_Pos.y;
; 3201 : 												bnX = g_BPos.x;
; 3202 : 												bnY = g_BPos.y;
; 3203 : 												SnX = nX;
; 3204 : 												SnY = nY - 65;
; 3205 : 												//ÇÃ·¹ÀÌ¾î ÇÇ°Ý·ºÆ® ¼³Á¤
; 3206 : 												if (g_bLookL)

	cmp	DWORD PTR ?g_bLookL@@3HA, 0		; g_bLookL
	mov	eax, DWORD PTR ?g_BPos@@3UtagPOINT@@A
	mov	edi, DWORD PTR ?g_Pos@@3UtagPOINT@@A+4
	mov	esi, DWORD PTR ?g_Pos@@3UtagPOINT@@A
	mov	DWORD PTR _bnX$3$[ebp], eax
	mov	eax, DWORD PTR ?g_BPos@@3UtagPOINT@@A+4
	mov	DWORD PTR _nY$3$[ebp], edi
	mov	DWORD PTR _bnY$3$[ebp], eax
	je	SHORT $LN696@DXW_MainLo

; 3207 : 												{
; 3208 : 													PHIT = { nX + 11,nY + 10,nX + 45,nY + 80 };

	lea	eax, DWORD PTR [esi+11]
	mov	DWORD PTR $T9[ebp], eax
	lea	eax, DWORD PTR [edi+10]
	mov	DWORD PTR $T9[ebp+4], eax
	lea	eax, DWORD PTR [esi+45]
	jmp	SHORT $LN1539@DXW_MainLo
$LN696@DXW_MainLo:

; 3209 : 												}
; 3210 : 												else if (g_bLookR)

	cmp	DWORD PTR ?g_bLookR@@3HA, 0		; g_bLookR
	je	SHORT $LN698@DXW_MainLo

; 3211 : 												{
; 3212 : 													PHIT = { nX + 25,nY + 10,nX + 58,nY + 80 };

	lea	eax, DWORD PTR [esi+25]
	mov	DWORD PTR $T8[ebp], eax
	lea	eax, DWORD PTR [edi+10]
	mov	DWORD PTR $T8[ebp+4], eax
	lea	eax, DWORD PTR [esi+58]
$LN1539@DXW_MainLo:

; 3213 : 												}
; 3214 : 												//// º¸½º ½ºÅÄµù
; 3215 : 												if (Timer[20] == 0 && BossAtt == FALSE && g_bGatt == FALSE && g_bSpike == FALSE)

	mov	DWORD PTR $T8[ebp+8], eax
	lea	eax, DWORD PTR [edi+80]
	mov	DWORD PTR $T8[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T8[ebp]
	movups	XMMWORD PTR ?PHIT@@3UtagRECT@@A, xmm0
$LN698@DXW_MainLo:
	mov	eax, DWORD PTR ?Timer@@3PAHA+80
	test	eax, eax
	jne	SHORT $LN1540@DXW_MainLo
	cmp	DWORD PTR ?BossAtt@@3HA, eax		; BossAtt
	jne	SHORT $LN703@DXW_MainLo
	cmp	DWORD PTR ?g_bGatt@@3HA, eax		; g_bGatt
	jne	SHORT $LN703@DXW_MainLo
	cmp	DWORD PTR ?g_bSpike@@3HA, eax		; g_bSpike
	jne	$LN1370@DXW_MainLo

; 3216 : 												{
; 3217 : 													Timer[21] = 4;
; 3218 : 													g_bGatt = TRUE;
; 3219 : 													if (g_bBLL == TRUE)

	cmp	DWORD PTR ?g_bBLL@@3HA, 1		; g_bBLL
	mov	ecx, 4
	mov	DWORD PTR ?Timer@@3PAHA+84, ecx
	mov	DWORD PTR ?g_bGatt@@3HA, 1		; g_bGatt
	jne	SHORT $LN701@DXW_MainLo

; 3220 : 													{
; 3221 : 														GAframe = 0;
; 3222 : 														BALL = TRUE;
; 3223 : 														BARR = FALSE;

	mov	DWORD PTR ?BARR@@3HA$1[ebp], eax
	lea	edx, DWORD PTR [eax+1]
	jmp	SHORT $LN702@DXW_MainLo
$LN701@DXW_MainLo:

; 3224 : 													}
; 3225 : 													else { GAframe = 30; BARR = TRUE; BALL = FALSE; }

	mov	DWORD PTR ?BARR@@3HA$1[ebp], 1
	mov	eax, 30					; 0000001eH
	xor	edx, edx
$LN702@DXW_MainLo:
	mov	edi, DWORD PTR ?BARR@@3HA$1[ebp]
	mov	DWORD PTR ?BALL@@3HA, edx		; BALL
	mov	DWORD PTR ?GAframe@@3HA, eax		; GAframe
	mov	DWORD PTR ?BARR@@3HA, edi		; BARR
	jmp	SHORT $LN1209@DXW_MainLo
$LN1540@DXW_MainLo:

; 3226 : 												}
; 3227 : 												else if (Timer[20] > 0)

	jle	SHORT $LN703@DXW_MainLo

; 3228 : 												{
; 3229 : 													Timer[20] -= 1;

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+80, eax
$LN703@DXW_MainLo:

; 3230 : 												}
; 3231 : 												if (g_bGatt == TRUE)

	cmp	DWORD PTR ?g_bGatt@@3HA, 1		; g_bGatt
	jne	$LN1370@DXW_MainLo
	mov	edi, DWORD PTR ?BARR@@3HA		; BARR
	mov	ecx, DWORD PTR ?Timer@@3PAHA+84
	mov	eax, DWORD PTR ?GAframe@@3HA		; GAframe
	mov	edx, DWORD PTR ?BALL@@3HA		; BALL
	mov	DWORD PTR ?BARR@@3HA$1[ebp], edi
$LN1209@DXW_MainLo:

; 3232 : 												{
; 3233 : 													if (BALL == TRUE)

	cmp	edx, 1
	jne	SHORT $LN705@DXW_MainLo

; 3234 : 													{
; 3235 : 														::__PutAnimeSprite(g_pDDSBoss3Att3, bnX - 503, bnY - 515, 31, GAframe, 1137, 798, 0);

	push	0
	push	798					; 0000031eH
	push	1137					; 00000471H
	push	eax
	mov	eax, DWORD PTR _bnY$3$[ebp]
	push	31					; 0000001fH
	add	eax, -515				; fffffdfdH
	push	eax
	mov	eax, DWORD PTR _bnX$3$[ebp]
	add	eax, -503				; fffffe09H
	push	eax
	push	DWORD PTR ?g_pDDSBoss3Att3@@3PAUIDirectDrawSurface7@@A ; g_pDDSBoss3Att3
	jmp	SHORT $LN1541@DXW_MainLo
$LN705@DXW_MainLo:

; 3236 : 													}
; 3237 : 													else if (BARR == TRUE)

	cmp	DWORD PTR ?BARR@@3HA$1[ebp], 1
	mov	edi, DWORD PTR _nY$3$[ebp]
	jne	SHORT $LN707@DXW_MainLo

; 3238 : 													{
; 3239 : 														::__PutAnimeSprite(g_pDDSBoss3AttR3, bnX - 457, bnY - 515, 31, GAframe, 1137, 798, 0);

	push	0
	push	798					; 0000031eH
	push	1137					; 00000471H
	push	eax
	mov	eax, DWORD PTR _bnY$3$[ebp]
	push	31					; 0000001fH
	add	eax, -515				; fffffdfdH
	push	eax
	mov	eax, DWORD PTR _bnX$3$[ebp]
	add	eax, -457				; fffffe37H
	push	eax
	push	DWORD PTR ?g_pDDSBoss3AttR3@@3PAUIDirectDrawSurface7@@A ; g_pDDSBoss3AttR3
$LN1541@DXW_MainLo:

; 3240 : 													}
; 3241 : 													if (Timer[21] > 0)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	mov	edi, DWORD PTR ?BARR@@3HA		; BARR
	add	esp, 32					; 00000020H
	mov	edx, DWORD PTR ?BALL@@3HA		; BALL
	mov	eax, DWORD PTR ?GAframe@@3HA		; GAframe
	mov	ecx, DWORD PTR ?Timer@@3PAHA+84
	mov	DWORD PTR ?BARR@@3HA$1[ebp], edi
	mov	edi, DWORD PTR _nY$3$[ebp]
$LN707@DXW_MainLo:
	test	ecx, ecx
	jle	SHORT $LN1542@DXW_MainLo

; 3242 : 													{
; 3243 : 														Timer[21] -= 1;

	dec	ecx
	jmp	$LN1543@DXW_MainLo
$LN1542@DXW_MainLo:

; 3244 : 													}
; 3245 : 													else if (Timer[21] == 0)

	jne	$LN739@DXW_MainLo

; 3246 : 													{
; 3247 : 														if (GAframe == 18 && BALL == TRUE)

	cmp	eax, 18					; 00000012H
	jne	$LN711@DXW_MainLo
	cmp	edx, 1
	jne	$LN731@DXW_MainLo

; 3248 : 														{
; 3249 : 															Timer[22] = 30;

	mov	DWORD PTR ?Timer@@3PAHA+88, 30		; 0000001eH

; 3250 : 															g_bSpike = TRUE;

	mov	DWORD PTR ?g_bSpike@@3HA, edx		; g_bSpike

; 3251 : 															P3randpat = rand () % 3;

	call	_rand
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	eax, edx
	mov	DWORD PTR ?P3randpat@@3HA, edx		; P3randpat
	cmp	edx, DWORD PTR ?P3randpat2@@3HA		; P3randpat2

; 3252 : 															if (P3randpat == P3randpat2)

	jne	$LN717@DXW_MainLo

; 3253 : 															{
; 3254 : 																if (P3randpat == 0)

	test	edx, edx
	jne	SHORT $LN713@DXW_MainLo

; 3255 : 																{
; 3256 : 																	P3randpat = 1;

	mov	DWORD PTR ?P3randpat@@3HA, 1		; P3randpat
	mov	eax, 1
$LN1544@DXW_MainLo:

; 3277 : 																SpikeX[8] = nX + 500;

	mov	DWORD PTR $T30[ebp], eax
$LN1055@DXW_MainLo:
	lea	ecx, DWORD PTR [esi-500]
	mov	DWORD PTR ?SpikeX@@3PAHA$1[ebp], ecx
	lea	ecx, DWORD PTR [esi-200]

; 3278 : 															}
; 3279 : 															if (P3randpat == 1)

	cmp	eax, 1
	jne	$LN1279@DXW_MainLo

; 3280 : 															{
; 3281 : 																SpikeX[0] = nX - 500;
; 3282 : 																SpikeX[1] = nX - 300;
; 3283 : 																SpikeX[2] = nX - 250;
; 3284 : 																SpikeX[3] = nX - 200;
; 3285 : 																SpikeX[4] = nX;
; 3286 : 																SpikeX[5] = nX + 200;

	lea	edi, DWORD PTR [esi+200]
	mov	DWORD PTR ?SpikeX@@3PAHA+20, edi
	lea	edx, DWORD PTR [esi-300]

; 3287 : 																SpikeX[6] = nX + 250;

	lea	edi, DWORD PTR [esi+250]
	mov	DWORD PTR ?SpikeX@@3PAHA+4, edx
	mov	DWORD PTR ?SpikeX@@3PAHA+24, edi
	lea	eax, DWORD PTR [esi-500]

; 3288 : 																SpikeX[7] = nX + 300;

	lea	edi, DWORD PTR [esi+300]
	mov	DWORD PTR ?SpikeX@@3PAHA+28, edi
	lea	edx, DWORD PTR [esi-250]

; 3289 : 																SpikeX[8] = nX + 500;

	lea	edi, DWORD PTR [esi+500]
	jmp	$LN1545@DXW_MainLo
$LN713@DXW_MainLo:

; 3257 : 																}
; 3258 : 																else if (P3randpat == 1)

	cmp	edx, 1
	jne	SHORT $LN715@DXW_MainLo

; 3259 : 																{
; 3260 : 																	P3randpat = 2;

	mov	DWORD PTR ?P3randpat@@3HA, 2		; P3randpat
	lea	eax, DWORD PTR [edx+1]
	jmp	SHORT $LN1544@DXW_MainLo
$LN715@DXW_MainLo:

; 3261 : 																}
; 3262 : 																else if (P3randpat == 2)

	mov	eax, edx
	cmp	edx, 2
	jne	SHORT $LN717@DXW_MainLo

; 3263 : 																{
; 3264 : 																	P3randpat = 0;

	mov	DWORD PTR ?P3randpat@@3HA, 0		; P3randpat
	xor	eax, eax
$LN717@DXW_MainLo:

; 3265 : 																}
; 3266 : 															}
; 3267 : 															if (P3randpat == 0)

	mov	DWORD PTR $T30[ebp], eax
	test	eax, eax
	jne	$LN1055@DXW_MainLo

; 3268 : 															{
; 3269 : 																SpikeX[0] = nX - 500;

	lea	eax, DWORD PTR [esi-500]

; 3270 : 																SpikeX[1] = nX - 400;
; 3271 : 																SpikeX[2] = nX - 200;
; 3272 : 																SpikeX[3] = nX - 50;
; 3273 : 																SpikeX[4] = nX;

	mov	DWORD PTR ?SpikeX@@3PAHA+16, esi
	mov	DWORD PTR ?SpikeX@@3PAHA$1[ebp], eax
	lea	edx, DWORD PTR [esi-200]
	mov	DWORD PTR ?SpikeX@@3PAHA, eax
	lea	ecx, DWORD PTR [esi-50]
	lea	eax, DWORD PTR [esi-400]
	mov	DWORD PTR ?SpikeX@@3PAHA+8, edx
	mov	DWORD PTR ?SpikeX@@3PAHA+4, eax

; 3274 : 																SpikeX[5] = nX + 50;

	lea	eax, DWORD PTR [esi+50]
	mov	DWORD PTR ?SpikeX@@3PAHA+20, eax

; 3275 : 																SpikeX[6] = nX + 200;

	lea	eax, DWORD PTR [esi+200]
	mov	DWORD PTR ?SpikeX@@3PAHA+24, eax

; 3276 : 																SpikeX[7] = nX + 400;

	lea	eax, DWORD PTR [esi+400]
	mov	DWORD PTR ?SpikeX@@3PAHA+28, eax

; 3277 : 																SpikeX[8] = nX + 500;

	lea	eax, DWORD PTR [esi+500]
	mov	DWORD PTR ?SpikeX@@3PAHA+32, eax
	lea	eax, DWORD PTR [esi-500]
	mov	DWORD PTR ?SpikeX@@3PAHA+12, ecx
	mov	DWORD PTR $T30[ebp], 0
	mov	DWORD PTR $T27[ebp], edx
	jmp	SHORT $LN1056@DXW_MainLo
$LN1279@DXW_MainLo:

; 2210 : 						 }
; 2211 : 						 if (g_bCast == TRUE && g_bBLR == TRUE)

	mov	eax, DWORD PTR ?SpikeX@@3PAHA
	mov	edx, DWORD PTR ?SpikeX@@3PAHA+8
	mov	DWORD PTR $T27[ebp], ecx
	mov	ecx, DWORD PTR ?SpikeX@@3PAHA+12
	mov	DWORD PTR ?SpikeX@@3PAHA$1[ebp], eax
$LN1056@DXW_MainLo:

; 3290 : 															}
; 3291 : 															if (P3randpat == 2)

	cmp	DWORD PTR $T30[ebp], 2
	jne	SHORT $LN720@DXW_MainLo

; 3292 : 															{
; 3293 : 																SpikeX[0] = nX - 400;
; 3294 : 																SpikeX[1] = nX - 200;

	mov	ecx, DWORD PTR $T27[ebp]

; 3295 : 																SpikeX[2] = nX - 100;
; 3296 : 																SpikeX[3] = nX - 50;
; 3297 : 																SpikeX[4] = nX;
; 3298 : 																SpikeX[5] = nX + 50;

	lea	edi, DWORD PTR [esi+50]
	mov	DWORD PTR ?SpikeX@@3PAHA+20, edi
	lea	eax, DWORD PTR [esi-400]

; 3299 : 																SpikeX[6] = nX + 100;

	lea	edi, DWORD PTR [esi+100]
	mov	DWORD PTR ?SpikeX@@3PAHA+4, ecx
	mov	DWORD PTR ?SpikeX@@3PAHA+24, edi
	lea	edx, DWORD PTR [esi-100]

; 3300 : 																SpikeX[7] = nX + 200;

	lea	edi, DWORD PTR [esi+200]
	mov	DWORD PTR ?SpikeX@@3PAHA$1[ebp], eax
	mov	DWORD PTR ?SpikeX@@3PAHA+28, edi
	lea	ecx, DWORD PTR [esi-50]

; 3301 : 																SpikeX[8] = nX + 400;

	lea	edi, DWORD PTR [esi+400]
$LN1545@DXW_MainLo:

; 3302 : 															}
; 3303 : 															for (i = 0; i < 9; i++)
; 3304 : 															{
; 3305 : 																Spike[i] = { SpikeX[i]+ 10,380,SpikeX[i]+75,690 };

	mov	DWORD PTR ?SpikeX@@3PAHA+32, edi
	mov	DWORD PTR ?SpikeX@@3PAHA+16, esi
	mov	DWORD PTR ?SpikeX@@3PAHA+12, ecx
	mov	DWORD PTR ?SpikeX@@3PAHA+8, edx
	mov	DWORD PTR ?SpikeX@@3PAHA, eax
$LN720@DXW_MainLo:
	mov	edi, DWORD PTR ?SpikeX@@3PAHA+4
	add	eax, 10					; 0000000aH
	mov	DWORD PTR $T7[ebp], eax
	mov	eax, DWORD PTR ?SpikeX@@3PAHA$1[ebp]
	add	eax, 75					; 0000004bH
	mov	DWORD PTR $T7[ebp+4], 380		; 0000017cH
	mov	DWORD PTR $T7[ebp+8], eax
	lea	eax, DWORD PTR [edi+10]
	mov	DWORD PTR $T7[ebp+12], 690		; 000002b2H
	movups	xmm0, XMMWORD PTR $T7[ebp]
	mov	DWORD PTR $T7[ebp], eax
	lea	eax, DWORD PTR [edi+75]
	mov	DWORD PTR $T7[ebp+8], eax
	lea	eax, DWORD PTR [edx+10]
	movups	XMMWORD PTR ?Spike@@3PAUtagRECT@@A, xmm0

; 3306 : 															}
; 3307 : 															SpikeY = 300;

	mov	edi, DWORD PTR ?BARR@@3HA		; BARR
	movups	xmm0, XMMWORD PTR $T7[ebp]
	mov	DWORD PTR $T7[ebp], eax
	lea	eax, DWORD PTR [edx+75]
	mov	DWORD PTR $T7[ebp+8], eax
	lea	eax, DWORD PTR [ecx+10]
	movups	XMMWORD PTR ?Spike@@3PAUtagRECT@@A+16, xmm0
	mov	edx, DWORD PTR ?BALL@@3HA		; BALL
	movups	xmm0, XMMWORD PTR $T7[ebp]
	mov	DWORD PTR $T7[ebp], eax
	lea	eax, DWORD PTR [ecx+75]
	mov	ecx, DWORD PTR ?SpikeX@@3PAHA+16
	mov	DWORD PTR $T7[ebp+8], eax
	movups	XMMWORD PTR ?Spike@@3PAUtagRECT@@A+32, xmm0
	mov	DWORD PTR ?BARR@@3HA$1[ebp], edi
	movups	xmm0, XMMWORD PTR $T7[ebp]
	lea	eax, DWORD PTR [ecx+10]
	mov	edi, DWORD PTR _nY$3$[ebp]
	mov	DWORD PTR $T7[ebp], eax
	lea	eax, DWORD PTR [ecx+75]
	mov	ecx, DWORD PTR ?SpikeX@@3PAHA+20
	mov	DWORD PTR $T7[ebp+8], eax
	movups	XMMWORD PTR ?Spike@@3PAUtagRECT@@A+48, xmm0
	mov	DWORD PTR ?SpikeY@@3HA, 300		; SpikeY, 0000012cH
	movups	xmm0, XMMWORD PTR $T7[ebp]
	lea	eax, DWORD PTR [ecx+10]
	mov	DWORD PTR $T7[ebp], eax
	lea	eax, DWORD PTR [ecx+75]
	mov	ecx, DWORD PTR ?SpikeX@@3PAHA+24
	mov	DWORD PTR $T7[ebp+8], eax
	movups	XMMWORD PTR ?Spike@@3PAUtagRECT@@A+64, xmm0
	movups	xmm0, XMMWORD PTR $T7[ebp]
	lea	eax, DWORD PTR [ecx+10]
	mov	DWORD PTR $T7[ebp], eax
	lea	eax, DWORD PTR [ecx+75]
	mov	ecx, DWORD PTR ?SpikeX@@3PAHA+28
	mov	DWORD PTR $T7[ebp+8], eax
	movups	XMMWORD PTR ?Spike@@3PAUtagRECT@@A+80, xmm0
	movups	xmm0, XMMWORD PTR $T7[ebp]
	lea	eax, DWORD PTR [ecx+10]
	mov	DWORD PTR $T7[ebp], eax
	lea	eax, DWORD PTR [ecx+75]
	mov	ecx, DWORD PTR ?SpikeX@@3PAHA+32
	mov	DWORD PTR $T7[ebp+8], eax
	movups	XMMWORD PTR ?Spike@@3PAUtagRECT@@A+96, xmm0
	movups	xmm0, XMMWORD PTR $T7[ebp]
	lea	eax, DWORD PTR [ecx+10]
	mov	DWORD PTR $T7[ebp], eax
	lea	eax, DWORD PTR [ecx+75]
	mov	ecx, DWORD PTR ?Timer@@3PAHA+84
	mov	DWORD PTR $T7[ebp+8], eax
	mov	eax, DWORD PTR ?GAframe@@3HA		; GAframe
	movups	XMMWORD PTR ?Spike@@3PAUtagRECT@@A+112, xmm0
	movups	xmm0, XMMWORD PTR $T7[ebp]
	movups	XMMWORD PTR ?Spike@@3PAUtagRECT@@A+128, xmm0
$LN711@DXW_MainLo:

; 3308 : 														}
; 3309 : 														if (GAframe == 14 && BARR == TRUE)

	cmp	eax, 14					; 0000000eH
	jne	$LN721@DXW_MainLo
	cmp	DWORD PTR ?BARR@@3HA$1[ebp], 1
	mov	edi, DWORD PTR _nY$3$[ebp]
	jne	$LN721@DXW_MainLo

; 3310 : 														{
; 3311 : 															Timer[22] = 50;

	mov	DWORD PTR ?Timer@@3PAHA+88, 50		; 00000032H

; 3312 : 															g_bSpike = TRUE;

	mov	DWORD PTR ?g_bSpike@@3HA, 1		; g_bSpike

; 3313 : 															P3randpat = rand() % 3;

	call	_rand
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	eax, edx
	mov	DWORD PTR ?P3randpat@@3HA, edx		; P3randpat
	cmp	edx, DWORD PTR ?P3randpat2@@3HA		; P3randpat2

; 3314 : 															if (P3randpat == P3randpat2)

	jne	$LN727@DXW_MainLo

; 3315 : 															{
; 3316 : 																if (P3randpat == 0)

	test	edx, edx
	jne	SHORT $LN723@DXW_MainLo

; 3317 : 																{
; 3318 : 																	P3randpat = 1;

	mov	DWORD PTR ?P3randpat@@3HA, 1		; P3randpat
	mov	eax, 1
$LN1546@DXW_MainLo:

; 3339 : 																SpikeX[8] = nX + 500;

	mov	DWORD PTR $T29[ebp], eax
$LN1057@DXW_MainLo:
	lea	ecx, DWORD PTR [esi-500]
	mov	DWORD PTR ?SpikeX@@3PAHA$2[ebp], ecx
	lea	ecx, DWORD PTR [esi-200]

; 3340 : 															}
; 3341 : 															if (P3randpat == 1)

	cmp	eax, 1
	jne	$LN1280@DXW_MainLo

; 3342 : 															{
; 3343 : 																SpikeX[0] = nX - 500;
; 3344 : 																SpikeX[1] = nX - 300;
; 3345 : 																SpikeX[2] = nX - 250;
; 3346 : 																SpikeX[3] = nX - 200;
; 3347 : 																SpikeX[4] = nX;
; 3348 : 																SpikeX[5] = nX + 200;

	lea	edi, DWORD PTR [esi+200]
	mov	DWORD PTR ?SpikeX@@3PAHA+20, edi
	lea	edx, DWORD PTR [esi-300]

; 3349 : 																SpikeX[6] = nX + 250;

	lea	edi, DWORD PTR [esi+250]
	mov	DWORD PTR ?SpikeX@@3PAHA+4, edx
	mov	DWORD PTR ?SpikeX@@3PAHA+24, edi
	lea	eax, DWORD PTR [esi-500]

; 3350 : 																SpikeX[7] = nX + 300;

	lea	edi, DWORD PTR [esi+300]
	mov	DWORD PTR ?SpikeX@@3PAHA+28, edi
	lea	edx, DWORD PTR [esi-250]

; 3351 : 																SpikeX[8] = nX + 500;

	lea	edi, DWORD PTR [esi+500]
	jmp	$LN1547@DXW_MainLo
$LN723@DXW_MainLo:

; 3319 : 																}
; 3320 : 																else if (P3randpat == 1)

	cmp	edx, 1
	jne	SHORT $LN725@DXW_MainLo

; 3321 : 																{
; 3322 : 																	P3randpat = 2;

	mov	DWORD PTR ?P3randpat@@3HA, 2		; P3randpat
	lea	eax, DWORD PTR [edx+1]
	jmp	SHORT $LN1546@DXW_MainLo
$LN725@DXW_MainLo:

; 3323 : 																}
; 3324 : 																else if (P3randpat == 2)

	mov	eax, edx
	cmp	edx, 2
	jne	SHORT $LN727@DXW_MainLo

; 3325 : 																{
; 3326 : 																	P3randpat = 0;

	mov	DWORD PTR ?P3randpat@@3HA, 0		; P3randpat
	xor	eax, eax
$LN727@DXW_MainLo:

; 3327 : 																}
; 3328 : 															}
; 3329 : 															if (P3randpat == 0)

	mov	DWORD PTR $T29[ebp], eax
	test	eax, eax
	jne	$LN1057@DXW_MainLo

; 3330 : 															{
; 3331 : 																SpikeX[0] = nX - 500;

	lea	eax, DWORD PTR [esi-500]

; 3332 : 																SpikeX[1] = nX - 400;
; 3333 : 																SpikeX[2] = nX - 200;
; 3334 : 																SpikeX[3] = nX - 50;
; 3335 : 																SpikeX[4] = nX;

	mov	DWORD PTR ?SpikeX@@3PAHA+16, esi
	mov	DWORD PTR ?SpikeX@@3PAHA$2[ebp], eax
	lea	edx, DWORD PTR [esi-200]
	mov	DWORD PTR ?SpikeX@@3PAHA, eax
	lea	ecx, DWORD PTR [esi-50]
	lea	eax, DWORD PTR [esi-400]
	mov	DWORD PTR ?SpikeX@@3PAHA+8, edx
	mov	DWORD PTR ?SpikeX@@3PAHA+4, eax

; 3336 : 																SpikeX[5] = nX + 50;

	lea	eax, DWORD PTR [esi+50]
	mov	DWORD PTR ?SpikeX@@3PAHA+20, eax

; 3337 : 																SpikeX[6] = nX + 200;

	lea	eax, DWORD PTR [esi+200]
	mov	DWORD PTR ?SpikeX@@3PAHA+24, eax

; 3338 : 																SpikeX[7] = nX + 400;

	lea	eax, DWORD PTR [esi+400]
	mov	DWORD PTR ?SpikeX@@3PAHA+28, eax

; 3339 : 																SpikeX[8] = nX + 500;

	lea	eax, DWORD PTR [esi+500]
	mov	DWORD PTR ?SpikeX@@3PAHA+32, eax
	lea	eax, DWORD PTR [esi-500]
	mov	DWORD PTR ?SpikeX@@3PAHA+12, ecx
	mov	DWORD PTR $T29[ebp], 0
	mov	DWORD PTR $T28[ebp], edx
	jmp	SHORT $LN1058@DXW_MainLo
$LN1280@DXW_MainLo:

; 2210 : 						 }
; 2211 : 						 if (g_bCast == TRUE && g_bBLR == TRUE)

	mov	eax, DWORD PTR ?SpikeX@@3PAHA
	mov	edx, DWORD PTR ?SpikeX@@3PAHA+8
	mov	DWORD PTR $T28[ebp], ecx
	mov	ecx, DWORD PTR ?SpikeX@@3PAHA+12
	mov	DWORD PTR ?SpikeX@@3PAHA$2[ebp], eax
$LN1058@DXW_MainLo:

; 3352 : 															}
; 3353 : 															if (P3randpat == 2)

	cmp	DWORD PTR $T29[ebp], 2
	jne	SHORT $LN730@DXW_MainLo

; 3354 : 															{
; 3355 : 																SpikeX[0] = nX - 400;
; 3356 : 																SpikeX[1] = nX - 200;

	mov	ecx, DWORD PTR $T28[ebp]

; 3357 : 																SpikeX[2] = nX - 100;
; 3358 : 																SpikeX[3] = nX - 50;
; 3359 : 																SpikeX[4] = nX;
; 3360 : 																SpikeX[5] = nX + 50;

	lea	edi, DWORD PTR [esi+50]
	mov	DWORD PTR ?SpikeX@@3PAHA+20, edi
	lea	eax, DWORD PTR [esi-400]

; 3361 : 																SpikeX[6] = nX + 100;

	lea	edi, DWORD PTR [esi+100]
	mov	DWORD PTR ?SpikeX@@3PAHA+4, ecx
	mov	DWORD PTR ?SpikeX@@3PAHA+24, edi
	lea	edx, DWORD PTR [esi-100]

; 3362 : 																SpikeX[7] = nX + 200;

	lea	edi, DWORD PTR [esi+200]
	mov	DWORD PTR ?SpikeX@@3PAHA$2[ebp], eax
	mov	DWORD PTR ?SpikeX@@3PAHA+28, edi
	lea	ecx, DWORD PTR [esi-50]

; 3363 : 																SpikeX[8] = nX + 400;

	lea	edi, DWORD PTR [esi+400]
$LN1547@DXW_MainLo:

; 3364 : 															}
; 3365 : 															for (i = 0; i < 9; i++)
; 3366 : 															{
; 3367 : 																Spike[i] = { SpikeX[i] + 10,380,SpikeX[i] + 75,690 };

	mov	DWORD PTR ?SpikeX@@3PAHA+32, edi
	mov	DWORD PTR ?SpikeX@@3PAHA+16, esi
	mov	DWORD PTR ?SpikeX@@3PAHA+12, ecx
	mov	DWORD PTR ?SpikeX@@3PAHA+8, edx
	mov	DWORD PTR ?SpikeX@@3PAHA, eax
$LN730@DXW_MainLo:
	mov	edi, DWORD PTR ?SpikeX@@3PAHA+4
	add	eax, 10					; 0000000aH
	mov	DWORD PTR $T6[ebp], eax
	mov	eax, DWORD PTR ?SpikeX@@3PAHA$2[ebp]
	add	eax, 75					; 0000004bH
	mov	DWORD PTR $T6[ebp+4], 380		; 0000017cH
	mov	DWORD PTR $T6[ebp+8], eax
	lea	eax, DWORD PTR [edi+10]
	mov	DWORD PTR $T6[ebp+12], 690		; 000002b2H
	movups	xmm0, XMMWORD PTR $T6[ebp]
	mov	DWORD PTR $T6[ebp], eax
	lea	eax, DWORD PTR [edi+75]
	mov	DWORD PTR $T6[ebp+8], eax
	lea	eax, DWORD PTR [edx+10]
	movups	XMMWORD PTR ?Spike@@3PAUtagRECT@@A, xmm0

; 3368 : 															}
; 3369 : 															SpikeY = 300;

	mov	edi, DWORD PTR ?BARR@@3HA		; BARR
	movups	xmm0, XMMWORD PTR $T6[ebp]
	mov	DWORD PTR $T6[ebp], eax
	lea	eax, DWORD PTR [edx+75]
	mov	DWORD PTR $T6[ebp+8], eax
	lea	eax, DWORD PTR [ecx+10]
	movups	XMMWORD PTR ?Spike@@3PAUtagRECT@@A+16, xmm0
	mov	edx, DWORD PTR ?BALL@@3HA		; BALL
	movups	xmm0, XMMWORD PTR $T6[ebp]
	mov	DWORD PTR $T6[ebp], eax
	lea	eax, DWORD PTR [ecx+75]
	mov	ecx, DWORD PTR ?SpikeX@@3PAHA+16
	mov	DWORD PTR $T6[ebp+8], eax
	movups	XMMWORD PTR ?Spike@@3PAUtagRECT@@A+32, xmm0
	mov	DWORD PTR ?BARR@@3HA$1[ebp], edi
	movups	xmm0, XMMWORD PTR $T6[ebp]
	lea	eax, DWORD PTR [ecx+10]
	mov	edi, DWORD PTR _nY$3$[ebp]
	mov	DWORD PTR $T6[ebp], eax
	lea	eax, DWORD PTR [ecx+75]
	mov	ecx, DWORD PTR ?SpikeX@@3PAHA+20
	mov	DWORD PTR $T6[ebp+8], eax
	movups	XMMWORD PTR ?Spike@@3PAUtagRECT@@A+48, xmm0
	mov	DWORD PTR ?SpikeY@@3HA, 300		; SpikeY, 0000012cH
	movups	xmm0, XMMWORD PTR $T6[ebp]
	lea	eax, DWORD PTR [ecx+10]
	mov	DWORD PTR $T6[ebp], eax
	lea	eax, DWORD PTR [ecx+75]
	mov	ecx, DWORD PTR ?SpikeX@@3PAHA+24
	mov	DWORD PTR $T6[ebp+8], eax
	movups	XMMWORD PTR ?Spike@@3PAUtagRECT@@A+64, xmm0
	movups	xmm0, XMMWORD PTR $T6[ebp]
	lea	eax, DWORD PTR [ecx+10]
	mov	DWORD PTR $T6[ebp], eax
	lea	eax, DWORD PTR [ecx+75]
	mov	ecx, DWORD PTR ?SpikeX@@3PAHA+28
	mov	DWORD PTR $T6[ebp+8], eax
	movups	XMMWORD PTR ?Spike@@3PAUtagRECT@@A+80, xmm0
	movups	xmm0, XMMWORD PTR $T6[ebp]
	lea	eax, DWORD PTR [ecx+10]
	mov	DWORD PTR $T6[ebp], eax
	lea	eax, DWORD PTR [ecx+75]
	mov	ecx, DWORD PTR ?SpikeX@@3PAHA+32
	mov	DWORD PTR $T6[ebp+8], eax
	movups	XMMWORD PTR ?Spike@@3PAUtagRECT@@A+96, xmm0
	movups	xmm0, XMMWORD PTR $T6[ebp]
	lea	eax, DWORD PTR [ecx+10]
	mov	DWORD PTR $T6[ebp], eax
	lea	eax, DWORD PTR [ecx+75]
	mov	ecx, DWORD PTR ?Timer@@3PAHA+84
	mov	DWORD PTR $T6[ebp+8], eax
	mov	eax, DWORD PTR ?GAframe@@3HA		; GAframe
	movups	XMMWORD PTR ?Spike@@3PAUtagRECT@@A+112, xmm0
	movups	xmm0, XMMWORD PTR $T6[ebp]
	movups	XMMWORD PTR ?Spike@@3PAUtagRECT@@A+128, xmm0
$LN721@DXW_MainLo:

; 3370 : 														}
; 3371 : 														if (BALL == TRUE)

	cmp	edx, 1
	jne	SHORT $LN731@DXW_MainLo

; 3372 : 														{
; 3373 : 															GAframe++;

	inc	eax
	jmp	SHORT $LN1548@DXW_MainLo
$LN731@DXW_MainLo:

; 3374 : 														}
; 3375 : 														else if (BARR == TRUE)

	cmp	DWORD PTR ?BARR@@3HA$1[ebp], 1
	jne	SHORT $LN733@DXW_MainLo

; 3376 : 														{
; 3377 : 															GAframe--;

	dec	eax
$LN1548@DXW_MainLo:

; 3378 : 														}
; 3379 : 														if (GAframe < 16 && BALL == TRUE)

	mov	DWORD PTR ?GAframe@@3HA, eax		; GAframe
$LN733@DXW_MainLo:
	cmp	eax, 16					; 00000010H
	jge	SHORT $LN1549@DXW_MainLo
	cmp	edx, 1
	jne	SHORT $LN734@DXW_MainLo

; 3380 : 														{
; 3381 : 															Timer[21] = 4;

	lea	ecx, DWORD PTR [edx+3]
	jmp	SHORT $LN1550@DXW_MainLo
$LN734@DXW_MainLo:

; 3382 : 														}
; 3383 : 														else if (GAframe > 16 && BALL == TRUE)

	cmp	eax, 16					; 00000010H
$LN1549@DXW_MainLo:
	jle	SHORT $LN737@DXW_MainLo
	cmp	edx, 1
	cmove	ecx, DWORD PTR tv11905[ebp]
$LN1550@DXW_MainLo:

; 3384 : 														{
; 3385 : 															Timer[21] = 3;
; 3386 : 														}
; 3387 : 														if (GAframe >16 && BARR == TRUE)

	mov	DWORD PTR ?Timer@@3PAHA+84, ecx
	cmp	eax, 16					; 00000010H
	jle	SHORT $LN1551@DXW_MainLo
	cmp	DWORD PTR ?BARR@@3HA$1[ebp], 1
	jne	SHORT $LN737@DXW_MainLo

; 3388 : 														{
; 3389 : 															Timer[21] = 4;

	mov	DWORD PTR ?Timer@@3PAHA+84, 4
	jmp	SHORT $LN739@DXW_MainLo
$LN737@DXW_MainLo:

; 3390 : 														}
; 3391 : 														else if (GAframe < 16 && BARR == TRUE)

	cmp	eax, 16					; 00000010H
$LN1551@DXW_MainLo:
	jge	SHORT $LN739@DXW_MainLo
	cmp	DWORD PTR ?BARR@@3HA$1[ebp], 1
	cmove	ecx, DWORD PTR tv11905[ebp]
$LN1543@DXW_MainLo:

; 3392 : 														{
; 3393 : 															Timer[21] = 3;
; 3394 : 														}
; 3395 : 													}
; 3396 : 													if (GAframe == 30 && BALL == TRUE)

	mov	DWORD PTR ?Timer@@3PAHA+84, ecx
$LN739@DXW_MainLo:
	cmp	eax, 30					; 0000001eH
	jne	$LN746@DXW_MainLo
	cmp	edx, 1
	jne	$LN1370@DXW_MainLo

; 3397 : 													{
; 3398 : 														Timer[20] = (rand() % 450) + 300;

	call	_rand
	cdq
	mov	ecx, 450				; 000001c2H
	idiv	ecx
	add	edx, 300				; 0000012cH

; 3399 : 														if (P3HP < 1000)

	cmp	DWORD PTR ?P3HP@@3HA, 1000		; P3HP, 000003e8H
	mov	DWORD PTR ?Timer@@3PAHA+80, edx
	jge	SHORT $LN741@DXW_MainLo

; 3400 : 														{
; 3401 : 															Timer[20] -= 250;

	lea	eax, DWORD PTR [edx-250]
	mov	DWORD PTR ?Timer@@3PAHA+80, eax
$LN741@DXW_MainLo:

; 3402 : 														}
; 3403 : 														Timer[21] = 0;
; 3404 : 														g_bGatt = FALSE;
; 3405 : 														BALL = FALSE;
; 3406 : 														BARR = FALSE;
; 3407 : 														GAframe = 0;
; 3408 : 														if (P3randpat == 0)

	mov	eax, DWORD PTR ?P3randpat@@3HA		; P3randpat
	mov	DWORD PTR ?Timer@@3PAHA+84, 0
	mov	DWORD PTR ?g_bGatt@@3HA, 0		; g_bGatt
	mov	DWORD PTR ?BALL@@3HA, 0			; BALL
	mov	DWORD PTR ?BARR@@3HA, 0			; BARR
	mov	DWORD PTR ?GAframe@@3HA, 0		; GAframe
	test	eax, eax
	je	$LN1287@DXW_MainLo

; 3409 : 														{
; 3410 : 															P3randpat2 = 0;
; 3411 : 														}
; 3412 : 														else if (P3randpat == 1)

	cmp	eax, 1
	je	$LN1286@DXW_MainLo
$LN751@DXW_MainLo:

; 3440 : 														}
; 3441 : 														else if (P3randpat == 2)
; 3442 : 														{
; 3443 : 															P3randpat2 = 2;

	cmp	eax, 2
	jne	SHORT $LN1370@DXW_MainLo
	mov	DWORD PTR ?P3randpat2@@3HA, eax		; P3randpat2
$LN1370@DXW_MainLo:

; 3444 : 														}
; 3445 : 													}
; 3446 : 												}
; 3447 : 												if (Timer[22] > 0 && g_bSpike == TRUE)

	mov	edx, DWORD PTR ?Timer@@3PAHA+88
	test	edx, edx
	jle	$LN1553@DXW_MainLo
	cmp	DWORD PTR ?g_bSpike@@3HA, 1		; g_bSpike
	jne	$LN754@DXW_MainLo

; 3448 : 												{
; 3449 : 													Timer[22] -= 1;

	dec	edx
	mov	edi, OFFSET ?SpikeX@@3PAHA		; SpikeX
	mov	DWORD PTR ?Timer@@3PAHA+88, edx
	npad	12
$LL30@DXW_MainLo:

; 3450 : 													for (i = 0; i < 9; i++)
; 3451 : 													{
; 3452 : 														::__PutSprite(g_pDDSDHole,SpikeX[i], 600);

	push	600					; 00000258H
	push	DWORD PTR [edi]
	push	DWORD PTR ?g_pDDSDHole@@3PAUIDirectDrawSurface7@@A ; g_pDDSDHole
	call	?__PutSprite@@YAXPAUIDirectDrawSurface7@@HH@Z ; __PutSprite
	add	edi, 4
	add	esp, 12					; 0000000cH
	cmp	edi, OFFSET ?SpikeX@@3PAHA+36
	jl	SHORT $LL30@DXW_MainLo

; 3453 : 													}
; 3454 : 												}
; 3455 : 												else if (Timer[22] == 0 && g_bSpike == TRUE)

	mov	edx, DWORD PTR ?Timer@@3PAHA+88
	mov	edi, DWORD PTR _nY$3$[ebp]
$LN756@DXW_MainLo:

; 3460 : 												}
; 3461 : 												if (Timer[22] == -1 && g_bSpike == TRUE & Timer[23] > 0)

	cmp	edx, -1
	jne	$LN1373@DXW_MainLo
$LN1211@DXW_MainLo:
	xor	ecx, ecx
	cmp	DWORD PTR ?g_bSpike@@3HA, 1		; g_bSpike
	sete	cl
	xor	eax, eax
	cmp	DWORD PTR ?Timer@@3PAHA+92, eax
	setg	al
	test	ecx, eax
	je	$LN1373@DXW_MainLo

; 3462 : 												{
; 3463 : 													Timer[23] -= 1;

	dec	DWORD PTR ?Timer@@3PAHA+92

; 3464 : 													if (SPframe == 15)

	cmp	DWORD PTR ?SPframe@@3HA, 15		; SPframe, 0000000fH
	jne	$LN758@DXW_MainLo

; 3465 : 													{
; 3466 : 														Timer[22] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+88, 0

; 3467 : 														g_bSpike = FALSE;

	mov	DWORD PTR ?g_bSpike@@3HA, 0		; g_bSpike

; 3468 : 														Timer[23] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+92, 0

; 3469 : 														SPframe = 0;

	mov	DWORD PTR ?SPframe@@3HA, 0		; SPframe

; 3470 : 													}
; 3471 : 													if (g_bSpike == TRUE)

	jmp	$LN765@DXW_MainLo
$LN746@DXW_MainLo:

; 3413 : 														{
; 3414 : 															P3randpat2 = 1;
; 3415 : 														}
; 3416 : 														else if (P3randpat == 2)
; 3417 : 														{
; 3418 : 															P3randpat2 = 2;
; 3419 : 														}
; 3420 : 													}
; 3421 : 													if (GAframe == 0 && BARR == TRUE)

	test	eax, eax
	jne	$LN1370@DXW_MainLo
	cmp	DWORD PTR ?BARR@@3HA$1[ebp], 1
	jne	$LN1370@DXW_MainLo

; 3422 : 													{
; 3423 : 														Timer[20] = (rand() % 450) + 300;

	call	_rand
	cdq
	mov	ecx, 450				; 000001c2H
	idiv	ecx
	add	edx, 300				; 0000012cH

; 3424 : 														if (P3HP < 1000)

	cmp	DWORD PTR ?P3HP@@3HA, 1000		; P3HP, 000003e8H
	mov	DWORD PTR ?Timer@@3PAHA+80, edx
	jge	SHORT $LN748@DXW_MainLo

; 3425 : 														{
; 3426 : 															Timer[20] -= 250;

	lea	eax, DWORD PTR [edx-250]
	mov	DWORD PTR ?Timer@@3PAHA+80, eax
$LN748@DXW_MainLo:

; 3427 : 														}
; 3428 : 														Timer[21] = 0;
; 3429 : 														g_bGatt = FALSE;
; 3430 : 														BALL = FALSE;
; 3431 : 														BARR = FALSE;
; 3432 : 														GAframe = 0;
; 3433 : 														if (P3randpat == 0)

	mov	eax, DWORD PTR ?P3randpat@@3HA		; P3randpat
	mov	DWORD PTR ?Timer@@3PAHA+84, 0
	mov	DWORD PTR ?g_bGatt@@3HA, 0		; g_bGatt
	mov	DWORD PTR ?BALL@@3HA, 0			; BALL
	mov	DWORD PTR ?BARR@@3HA, 0			; BARR
	mov	DWORD PTR ?GAframe@@3HA, 0		; GAframe
	test	eax, eax
	jne	SHORT $LN749@DXW_MainLo
$LN1287@DXW_MainLo:

; 3434 : 														{
; 3435 : 															P3randpat2 = 0;

	mov	DWORD PTR ?P3randpat2@@3HA, 0		; P3randpat2
	jmp	$LN1370@DXW_MainLo
$LN749@DXW_MainLo:

; 3436 : 														}
; 3437 : 														else if (P3randpat == 1)

	cmp	eax, 1
	jne	$LN751@DXW_MainLo
$LN1286@DXW_MainLo:

; 3438 : 														{
; 3439 : 															P3randpat2 = 1;

	mov	DWORD PTR ?P3randpat2@@3HA, 1		; P3randpat2
	jmp	$LN1370@DXW_MainLo
$LN754@DXW_MainLo:

; 3453 : 													}
; 3454 : 												}
; 3455 : 												else if (Timer[22] == 0 && g_bSpike == TRUE)

	test	edx, edx
$LN1553@DXW_MainLo:
	jne	$LN756@DXW_MainLo
	cmp	DWORD PTR ?g_bSpike@@3HA, 1		; g_bSpike
	jne	$LN1373@DXW_MainLo

; 3456 : 												{
; 3457 : 													Timer[23] = 3;
; 3458 : 													Timer[22] = -1;

	or	edx, -1
	mov	DWORD PTR ?Timer@@3PAHA+92, 3
	mov	DWORD PTR ?Timer@@3PAHA+88, edx

; 3459 : 													SPframe = 0;

	mov	DWORD PTR ?SPframe@@3HA, 0		; SPframe

; 3460 : 												}
; 3461 : 												if (Timer[22] == -1 && g_bSpike == TRUE & Timer[23] > 0)

	jmp	$LN1211@DXW_MainLo
$LN758@DXW_MainLo:

; 3470 : 													}
; 3471 : 													if (g_bSpike == TRUE)

	cmp	DWORD PTR ?g_bSpike@@3HA, 1		; g_bSpike
	jne	$LN1373@DXW_MainLo

; 3472 : 													{
; 3473 : 														for (i = 0; i < 9; i++)

	mov	edi, OFFSET ?SpikeX@@3PAHA		; SpikeX
	npad	2
$LL33@DXW_MainLo:

; 3474 : 														{
; 3475 : 															::__PutAnimeSprite(g_pDDSGroundAtt, SpikeX[i] - 130, 40, 15, SPframe, 422, 629, 0);

	mov	eax, DWORD PTR [edi]
	push	0
	push	629					; 00000275H
	push	422					; 000001a6H
	push	DWORD PTR ?SPframe@@3HA			; SPframe
	sub	eax, 130				; 00000082H
	push	15					; 0000000fH
	push	40					; 00000028H
	push	eax
	push	DWORD PTR ?g_pDDSGroundAtt@@3PAUIDirectDrawSurface7@@A ; g_pDDSGroundAtt
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	edi, 4
	add	esp, 32					; 00000020H
	cmp	edi, OFFSET ?SpikeX@@3PAHA+36
	jl	SHORT $LL33@DXW_MainLo

; 3476 : 														}
; 3477 : 														if (SPframe > 1 && SPframe <= 4)

	mov	eax, DWORD PTR ?SPframe@@3HA		; SPframe
	mov	edi, DWORD PTR _nY$3$[ebp]
	add	eax, -2					; fffffffeH
	cmp	eax, 2
	ja	SHORT $LN1372@DXW_MainLo

; 3478 : 														{
; 3479 : 															for (i = 0; i < 88; i++)

	mov	edi, OFFSET ?Spike@@3PAUtagRECT@@A
	npad	4
$LL36@DXW_MainLo:

; 3480 : 															{
; 3481 : 																if (IntersectRect(&rcDest, &Spike[i], &PHIT))

	push	OFFSET ?PHIT@@3UtagRECT@@A		; PHIT
	push	edi
	push	OFFSET ?rcDest@@3UtagRECT@@A		; rcDest
	call	DWORD PTR __imp__IntersectRect@12
	test	eax, eax
	je	SHORT $LN34@DXW_MainLo

; 3482 : 																{
; 3483 : 																	PlayerHP -= 1000;

	sub	DWORD PTR ?PlayerHP@@3HA, 1000		; PlayerHP, 000003e8H

; 3484 : 																	Spike[i] = { 0,0,1,1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000

; 3485 : 																	if (PHplay == FALSE)

	mov	eax, DWORD PTR ?PHplay@@3HA		; PHplay
	movups	XMMWORD PTR [edi], xmm0
	test	eax, eax
	je	SHORT $LN1284@DXW_MainLo

; 3486 : 																	{
; 3487 : 																		PHplay = TRUE;
; 3488 : 																		Timer[25] = 3;
; 3489 : 																		PHframe = 0;
; 3490 : 																	}
; 3491 : 																	else if (PHplay == TRUE)

	cmp	eax, 1
	jne	SHORT $LN34@DXW_MainLo
$LN1284@DXW_MainLo:

; 3492 : 																	{
; 3493 : 																		PHplay = TRUE;

	mov	DWORD PTR ?PHplay@@3HA, 1		; PHplay

; 3494 : 																		Timer[25] = 3;

	mov	DWORD PTR ?Timer@@3PAHA+100, 3

; 3495 : 																		PHframe = 0;

	mov	DWORD PTR ?PHframe@@3HA, 0		; PHframe
$LN34@DXW_MainLo:

; 3478 : 														{
; 3479 : 															for (i = 0; i < 88; i++)

	add	edi, 16					; 00000010H
	cmp	edi, OFFSET ?Spike@@3PAUtagRECT@@A+1408
	jl	SHORT $LL36@DXW_MainLo

; 3476 : 														}
; 3477 : 														if (SPframe > 1 && SPframe <= 4)

	mov	edi, DWORD PTR _nY$3$[ebp]
$LN1372@DXW_MainLo:

; 3496 : 																	}
; 3497 : 																}
; 3498 : 															}
; 3499 : 														}
; 3500 : 													}
; 3501 : 												}
; 3502 : 												if (Timer[23] == 0 && g_bSpike ==TRUE && Timer[22] == -1) 

	mov	edx, DWORD PTR ?Timer@@3PAHA+88
$LN1373@DXW_MainLo:
	cmp	DWORD PTR ?Timer@@3PAHA+92, 0
	jne	SHORT $LN765@DXW_MainLo
	cmp	DWORD PTR ?g_bSpike@@3HA, 1		; g_bSpike
	jne	SHORT $LN765@DXW_MainLo
	cmp	edx, -1
	jne	SHORT $LN765@DXW_MainLo

; 3503 : 												{
; 3504 : 													SPframe += 1;

	inc	DWORD PTR ?SPframe@@3HA			; SPframe

; 3505 : 													Timer[23] = 3;

	mov	DWORD PTR ?Timer@@3PAHA+92, 3
$LN765@DXW_MainLo:

; 3506 : 												}
; 3507 : 												if (Timer[17] == 0 && BossAtt == FALSE && g_bGatt == FALSE)

	mov	eax, DWORD PTR ?Timer@@3PAHA+68
	test	eax, eax
	jne	SHORT $LN1554@DXW_MainLo
	cmp	DWORD PTR ?BossAtt@@3HA, eax		; BossAtt
	jne	SHORT $LN770@DXW_MainLo
	cmp	DWORD PTR ?g_bGatt@@3HA, eax		; g_bGatt
	jne	$LN1374@DXW_MainLo

; 3508 : 												{
; 3509 : 													Timer[16] = 4;
; 3510 : 													BossAtt = TRUE;
; 3511 : 													if (g_bBLL == TRUE)

	cmp	DWORD PTR ?g_bBLL@@3HA, 1		; g_bBLL
	mov	eax, 4
	mov	DWORD PTR ?Timer@@3PAHA+64, eax
	mov	DWORD PTR ?BossAtt@@3HA, 1		; BossAtt
	jne	SHORT $LN768@DXW_MainLo

; 3512 : 													{
; 3513 : 														BKframe = 0;
; 3514 : 														BAL = TRUE;
; 3515 : 														BAR = FALSE;

	mov	DWORD PTR ?BAR@@3HA$3[ebp], 0
	lea	edx, DWORD PTR [eax-3]
	xor	ecx, ecx
	jmp	SHORT $LN769@DXW_MainLo
$LN768@DXW_MainLo:

; 3516 : 													}
; 3517 : 													else { BKframe = 23; BAR = TRUE; BAL = FALSE; }

	mov	DWORD PTR ?BAR@@3HA$3[ebp], 1
	mov	ecx, 23					; 00000017H
	xor	edx, edx
$LN769@DXW_MainLo:
	mov	edi, DWORD PTR ?BAR@@3HA$3[ebp]
	mov	DWORD PTR ?BAL@@3HA, edx		; BAL
	mov	DWORD PTR ?BKframe@@3HA, ecx		; BKframe
	mov	DWORD PTR ?BAR@@3HA, edi		; BAR
	jmp	SHORT $LN1213@DXW_MainLo
$LN1554@DXW_MainLo:

; 3518 : 												}
; 3519 : 												else if (Timer[17] > 0)

	jle	SHORT $LN770@DXW_MainLo

; 3520 : 												{
; 3521 : 													Timer[17] -= 1;

	dec	eax
	mov	DWORD PTR ?Timer@@3PAHA+68, eax
$LN770@DXW_MainLo:

; 3522 : 												}
; 3523 : 												if (BossAtt == TRUE)

	cmp	DWORD PTR ?BossAtt@@3HA, 1		; BossAtt
	jne	$LN1374@DXW_MainLo
	mov	edi, DWORD PTR ?BAR@@3HA		; BAR
	mov	eax, DWORD PTR ?Timer@@3PAHA+64
	mov	ecx, DWORD PTR ?BKframe@@3HA		; BKframe
	mov	edx, DWORD PTR ?BAL@@3HA		; BAL
	mov	DWORD PTR ?BAR@@3HA$3[ebp], edi
$LN1213@DXW_MainLo:

; 3524 : 												{
; 3525 : 													if (BAL == TRUE)

	cmp	edx, 1
	jne	SHORT $LN772@DXW_MainLo

; 3526 : 													{
; 3527 : 														::__PutAnimeSprite(g_pDDSBoss3Att, bnX - 263, bnY - 151, 24, BKframe, 670, 384, 0);

	mov	eax, DWORD PTR _bnY$3$[ebp]
	push	0
	push	384					; 00000180H
	push	670					; 0000029eH
	push	ecx
	push	24					; 00000018H
	add	eax, -151				; ffffff69H
	push	eax
	mov	eax, DWORD PTR _bnX$3$[ebp]
	add	eax, -263				; fffffef9H
	push	eax
	push	DWORD PTR ?g_pDDSBoss3Att@@3PAUIDirectDrawSurface7@@A ; g_pDDSBoss3Att
	jmp	SHORT $LN1555@DXW_MainLo
$LN772@DXW_MainLo:

; 3528 : 													}
; 3529 : 													else if (BAR == TRUE)

	cmp	DWORD PTR ?BAR@@3HA$3[ebp], 1
	mov	edi, DWORD PTR _nY$3$[ebp]
	jne	SHORT $LN774@DXW_MainLo

; 3530 : 													{
; 3531 : 														::__PutAnimeSprite(g_pDDSBoss3AttR, bnX - 257, bnY - 151, 24, BKframe, 670, 384, 0);

	mov	eax, DWORD PTR _bnY$3$[ebp]
	push	0
	push	384					; 00000180H
	push	670					; 0000029eH
	push	ecx
	push	24					; 00000018H
	add	eax, -151				; ffffff69H
	push	eax
	mov	eax, DWORD PTR _bnX$3$[ebp]
	add	eax, -257				; fffffeffH
	push	eax
	push	DWORD PTR ?g_pDDSBoss3AttR@@3PAUIDirectDrawSurface7@@A ; g_pDDSBoss3AttR
$LN1555@DXW_MainLo:

; 3532 : 													}
; 3533 : 													if (Timer[16] > 0)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	mov	edi, DWORD PTR ?BAR@@3HA		; BAR
	add	esp, 32					; 00000020H
	mov	edx, DWORD PTR ?BAL@@3HA		; BAL
	mov	ecx, DWORD PTR ?BKframe@@3HA		; BKframe
	mov	eax, DWORD PTR ?Timer@@3PAHA+64
	mov	DWORD PTR ?BAR@@3HA$3[ebp], edi
	mov	edi, DWORD PTR _nY$3$[ebp]
$LN774@DXW_MainLo:
	test	eax, eax
	jle	SHORT $LN1556@DXW_MainLo

; 3534 : 													{
; 3535 : 														Timer[16] -= 1;

	dec	eax
	jmp	SHORT $LN1557@DXW_MainLo
$LN1556@DXW_MainLo:

; 3536 : 													}
; 3537 : 													else if (Timer[16] == 0)

	jne	SHORT $LN786@DXW_MainLo

; 3538 : 													{
; 3539 : 														if (BAL == TRUE)

	cmp	edx, 1
	jne	SHORT $LN778@DXW_MainLo

; 3540 : 														{
; 3541 : 															BKframe++;

	inc	ecx
	jmp	SHORT $LN1558@DXW_MainLo
$LN778@DXW_MainLo:

; 3542 : 														}
; 3543 : 														else if (BAR == TRUE)

	cmp	DWORD PTR ?BAR@@3HA$3[ebp], 1
	jne	SHORT $LN780@DXW_MainLo

; 3544 : 														{
; 3545 : 															BKframe--;

	dec	ecx
$LN1558@DXW_MainLo:

; 3546 : 														}
; 3547 : 														if (BKframe < 12 && BAL == TRUE)

	mov	DWORD PTR ?BKframe@@3HA, ecx		; BKframe
$LN780@DXW_MainLo:
	cmp	ecx, 12					; 0000000cH
	jge	SHORT $LN1559@DXW_MainLo
	cmp	edx, 1
	jne	SHORT $LN781@DXW_MainLo

; 3548 : 														{
; 3549 : 															Timer[16] = 4;

	lea	eax, DWORD PTR [edx+3]
	jmp	SHORT $LN1560@DXW_MainLo
$LN781@DXW_MainLo:

; 3550 : 														}
; 3551 : 														else if (BKframe > 12 && BAL == TRUE)

	cmp	ecx, 12					; 0000000cH
$LN1559@DXW_MainLo:
	jle	SHORT $LN783@DXW_MainLo
	cmp	edx, 1
	cmove	eax, DWORD PTR tv11905[ebp]
$LN1560@DXW_MainLo:

; 3552 : 														{
; 3553 : 															Timer[16] = 3;
; 3554 : 														}
; 3555 : 														if (BKframe >11 && BAR == TRUE)

	mov	DWORD PTR ?Timer@@3PAHA+64, eax
$LN783@DXW_MainLo:
	cmp	ecx, 11					; 0000000bH
	jle	SHORT $LN1561@DXW_MainLo
	cmp	DWORD PTR ?BAR@@3HA$3[ebp], 1
	jne	SHORT $LN784@DXW_MainLo

; 3556 : 														{
; 3557 : 															Timer[16] = 4;

	mov	DWORD PTR ?Timer@@3PAHA+64, 4
	jmp	SHORT $LN786@DXW_MainLo
$LN784@DXW_MainLo:

; 3558 : 														}
; 3559 : 														else if (BKframe < 11 && BAR == TRUE)

	cmp	ecx, 11					; 0000000bH
$LN1561@DXW_MainLo:
	jge	SHORT $LN786@DXW_MainLo
	cmp	DWORD PTR ?BAR@@3HA$3[ebp], 1
	cmove	eax, DWORD PTR tv11905[ebp]
$LN1557@DXW_MainLo:

; 3560 : 														{
; 3561 : 															Timer[16] = 3;
; 3562 : 														}
; 3563 : 													}
; 3564 : 													if (BKframe == 23 && BAL == TRUE)

	mov	DWORD PTR ?Timer@@3PAHA+64, eax
$LN786@DXW_MainLo:
	cmp	ecx, 23					; 00000017H
	jne	SHORT $LN787@DXW_MainLo
	cmp	edx, 1
	jne	$LN794@DXW_MainLo

; 3565 : 													{
; 3566 : 														Timer[17] = (rand() % 150) + 200;

	call	_rand
	cdq
	mov	ecx, 150				; 00000096H
	idiv	ecx
	add	edx, 200				; 000000c8H

; 3567 : 														if (P3HP < 1000)

	cmp	DWORD PTR ?P3HP@@3HA, 1000		; P3HP, 000003e8H
	mov	DWORD PTR ?Timer@@3PAHA+68, edx
	jge	SHORT $LN788@DXW_MainLo

; 3568 : 														{
; 3569 : 															Timer[17] -= 50;

	lea	eax, DWORD PTR [edx-50]
	mov	DWORD PTR ?Timer@@3PAHA+68, eax
$LN788@DXW_MainLo:

; 3570 : 														}
; 3571 : 														Timer[16] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+64, 0

; 3572 : 														BossAtt = FALSE;

	mov	DWORD PTR ?BossAtt@@3HA, 0		; BossAtt

; 3573 : 														BAL = FALSE;

	mov	DWORD PTR ?BAL@@3HA, 0			; BAL

; 3574 : 														BAR = FALSE;

	mov	DWORD PTR ?BAR@@3HA, 0			; BAR

; 3575 : 														KnockHIT = FALSE;

	mov	DWORD PTR ?KnockHIT@@3HA, 0		; KnockHIT

; 3576 : 														BKframe = 0;

	mov	DWORD PTR ?BKframe@@3HA, 0		; BKframe

; 3577 : 														Knock = { 0,0,1,1 };
; 3578 : 													}
; 3579 : 													if (BKframe == 0 && BAR == TRUE)

	jmp	$LN1562@DXW_MainLo
$LN787@DXW_MainLo:
	test	ecx, ecx
	jne	$LN789@DXW_MainLo
	cmp	DWORD PTR ?BAR@@3HA$3[ebp], 1
	jne	$LN794@DXW_MainLo

; 3580 : 													{
; 3581 : 														Timer[17] = (rand() % 150) + 200;

	call	_rand
	cdq
	mov	ecx, 150				; 00000096H
	idiv	ecx
	add	edx, 200				; 000000c8H

; 3582 : 														if (P3HP < 1000)

	cmp	DWORD PTR ?P3HP@@3HA, 1000		; P3HP, 000003e8H
	mov	DWORD PTR ?Timer@@3PAHA+68, edx
	jge	SHORT $LN790@DXW_MainLo

; 3583 : 														{
; 3584 : 															Timer[17] -= 50;

	lea	eax, DWORD PTR [edx-50]
	mov	DWORD PTR ?Timer@@3PAHA+68, eax
$LN790@DXW_MainLo:

; 3585 : 														}
; 3586 : 														Timer[16] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+64, 0

; 3587 : 														BossAtt = FALSE;

	mov	DWORD PTR ?BossAtt@@3HA, 0		; BossAtt

; 3588 : 														BAL = FALSE;

	mov	DWORD PTR ?BAL@@3HA, 0			; BAL

; 3589 : 														BAR = FALSE;

	mov	DWORD PTR ?BAR@@3HA, 0			; BAR

; 3590 : 														BKframe = 0;

	mov	DWORD PTR ?BKframe@@3HA, 0		; BKframe

; 3591 : 														KnockHIT = FALSE;

	mov	DWORD PTR ?KnockHIT@@3HA, 0		; KnockHIT

; 3592 : 														Knock = { 0,0,1,1 };
; 3593 : 													}
; 3594 : 												}
; 3595 : 												if (BKframe > 13 && BAL == TRUE && KnockHIT == FALSE)

	jmp	$LN1562@DXW_MainLo
$LN1374@DXW_MainLo:

; 3522 : 												}
; 3523 : 												if (BossAtt == TRUE)

	mov	eax, DWORD PTR ?BAR@@3HA		; BAR
	mov	ecx, DWORD PTR ?BKframe@@3HA		; BKframe
	mov	edx, DWORD PTR ?BAL@@3HA		; BAL
	mov	DWORD PTR ?BAR@@3HA$3[ebp], eax
$LN789@DXW_MainLo:

; 3592 : 														Knock = { 0,0,1,1 };
; 3593 : 													}
; 3594 : 												}
; 3595 : 												if (BKframe > 13 && BAL == TRUE && KnockHIT == FALSE)

	cmp	ecx, 13					; 0000000dH
	jle	SHORT $LN791@DXW_MainLo
	cmp	edx, 1
	jne	SHORT $LN791@DXW_MainLo
	cmp	DWORD PTR ?KnockHIT@@3HA, 0		; KnockHIT
	jne	SHORT $LN791@DXW_MainLo

; 3596 : 												{
; 3597 : 													Knock = { bnX - 230 ,bnY - 20,bnX + 80,bnY + 140 };

	mov	eax, DWORD PTR _bnX$3$[ebp]
	add	eax, -230				; ffffff1aH
	mov	DWORD PTR $T5[ebp], eax
	mov	eax, DWORD PTR _bnY$3$[ebp]
	add	eax, -20				; ffffffecH
	mov	DWORD PTR $T5[ebp+4], eax
	mov	eax, DWORD PTR _bnX$3$[ebp]
	add	eax, 80					; 00000050H
	mov	DWORD PTR $T5[ebp+8], eax
	mov	eax, DWORD PTR _bnY$3$[ebp]
	add	eax, 140				; 0000008cH
	mov	DWORD PTR $T5[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T5[ebp]
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
$LN791@DXW_MainLo:

; 3598 : 												}
; 3599 : 												if (BKframe <11 && BAR == TRUE && KnockHIT == FALSE)

	mov	eax, DWORD PTR ?BAR@@3HA$3[ebp]
	cmp	ecx, 11					; 0000000bH
	jge	SHORT $LN792@DXW_MainLo
	cmp	eax, 1
	jne	SHORT $LN792@DXW_MainLo
	cmp	DWORD PTR ?KnockHIT@@3HA, 0		; KnockHIT
	jne	SHORT $LN792@DXW_MainLo

; 3600 : 												{
; 3601 : 													Knock = { bnX + 90 ,bnY - 20,bnX + 393,bnY + 140 };

	mov	eax, DWORD PTR _bnX$3$[ebp]
	add	eax, 90					; 0000005aH
	mov	DWORD PTR $T4[ebp], eax
	mov	eax, DWORD PTR _bnY$3$[ebp]
	add	eax, -20				; ffffffecH
	mov	DWORD PTR $T4[ebp+4], eax
	mov	eax, DWORD PTR _bnX$3$[ebp]
	add	eax, 393				; 00000189H
	mov	DWORD PTR $T4[ebp+8], eax
	mov	eax, DWORD PTR _bnY$3$[ebp]
	add	eax, 140				; 0000008cH
	mov	DWORD PTR $T4[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T4[ebp]
	mov	eax, DWORD PTR ?BAR@@3HA$3[ebp]
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
$LN792@DXW_MainLo:

; 3602 : 												}
; 3603 : 												if (BKframe > 15 && BAL == TRUE)

	cmp	ecx, 15					; 0000000fH
	jle	SHORT $LN793@DXW_MainLo
	cmp	edx, 1
	jne	SHORT $LN793@DXW_MainLo

; 3604 : 												{
; 3605 : 													Knock = { 0,0,1,1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
$LN793@DXW_MainLo:

; 3606 : 												}
; 3607 : 												if (BKframe <9 && BAR == TRUE)

	cmp	ecx, 9
	jge	SHORT $LN794@DXW_MainLo
	cmp	eax, 1
	jne	SHORT $LN794@DXW_MainLo
$LN1562@DXW_MainLo:

; 3608 : 												{
; 3609 : 													Knock = { 0,0,1,1 };
; 3610 : 												}
; 3611 : 												if (IntersectRect(&rcDest, &Knock, &PHIT))

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
$LN794@DXW_MainLo:
	push	OFFSET ?PHIT@@3UtagRECT@@A		; PHIT
	push	OFFSET ?Knock@@3UtagRECT@@A		; Knock
	push	OFFSET ?rcDest@@3UtagRECT@@A		; rcDest
	call	DWORD PTR __imp__IntersectRect@12
	test	eax, eax
	je	$LN1379@DXW_MainLo

; 3612 : 												{
; 3613 : 													if (BAR == TRUE && Knockback == FALSE)

	cmp	DWORD PTR ?BAR@@3HA, 1			; BAR
	mov	eax, DWORD PTR ?Knockback@@3HA		; Knockback
	jne	$LN796@DXW_MainLo
	test	eax, eax
	jne	$LN796@DXW_MainLo

; 3614 : 													{
; 3615 : 														Knockspd = 30;
; 3616 : 														Knockback = TRUE;
; 3617 : 														PlayerHP -= 1000;

	sub	DWORD PTR ?PlayerHP@@3HA, 1000		; PlayerHP, 000003e8H

; 3618 : 														KnockHIT = TRUE;
; 3619 : 														Knock = { 0,0,1,1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000

; 3620 : 														if (PHplay == FALSE)

	mov	eax, DWORD PTR ?PHplay@@3HA		; PHplay
	mov	DWORD PTR ?Knockspd@@3HA, 30		; Knockspd, 0000001eH
	mov	DWORD PTR ?Knockback@@3HA, 1		; Knockback
	mov	DWORD PTR ?KnockHIT@@3HA, 1		; KnockHIT
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
	test	eax, eax
	je	SHORT $LN1283@DXW_MainLo

; 3621 : 														{
; 3622 : 															PHplay = TRUE;
; 3623 : 															Timer[25] = 3;
; 3624 : 															PHframe = 0;
; 3625 : 														}
; 3626 : 														else if (PHplay == TRUE)

	cmp	eax, 1
	jne	SHORT $LN800@DXW_MainLo
$LN1283@DXW_MainLo:

; 3627 : 														{
; 3628 : 															PHplay = TRUE;

	mov	DWORD PTR ?PHplay@@3HA, 1		; PHplay

; 3629 : 															Timer[25] = 3;

	mov	DWORD PTR ?Timer@@3PAHA+100, 3

; 3630 : 															PHframe = 0;

	mov	DWORD PTR ?PHframe@@3HA, 0		; PHframe
$LN800@DXW_MainLo:

; 3631 : 														}
; 3632 : 														if (g_bRush == TRUE)

	cmp	DWORD PTR ?g_bRush@@3HA, 1		; g_bRush
	jne	SHORT $LN1376@DXW_MainLo

; 3633 : 														{
; 3634 : 															g_bRush = FALSE;

	mov	DWORD PTR ?g_bRush@@3HA, 0		; g_bRush

; 3635 : 															g_bRushL = FALSE;

	mov	DWORD PTR ?g_bRushL@@3HA, 0		; g_bRushL

; 3636 : 															g_bRushR = FALSE;

	mov	DWORD PTR ?g_bRushR@@3HA, 0		; g_bRushR

; 3637 : 															Timer[9] = 20;

	mov	DWORD PTR ?Timer@@3PAHA+36, 20		; 00000014H

; 3638 : 															Timer[8] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+32, 0

; 3639 : 															Cframe = 0;

	mov	DWORD PTR ?Cframe@@3HA, 0		; Cframe
$LN1376@DXW_MainLo:

; 3640 : 														}
; 3641 : 
; 3642 : 														if (g_bJump == TRUE)

	cmp	DWORD PTR ?g_bJump@@3HA, 1		; g_bJump
	jne	$LN1379@DXW_MainLo

; 3643 : 														{
; 3644 : 															Knockspd = 35;

	mov	DWORD PTR ?Knockspd@@3HA, 35		; Knockspd, 00000023H

; 3645 : 														}
; 3646 : 													}

	jmp	$LN1379@DXW_MainLo
$LN796@DXW_MainLo:

; 3647 : 													else if (BAL == TRUE && Knockback == FALSE)

	cmp	DWORD PTR ?BAL@@3HA, 1			; BAL
	jne	$LN1379@DXW_MainLo
	test	eax, eax
	jne	$LN1379@DXW_MainLo

; 3648 : 													{
; 3649 : 														Knockspd = -30;
; 3650 : 														Knockback = TRUE;
; 3651 : 														KnockHIT = TRUE;
; 3652 : 														PlayerHP -= 1000;

	sub	DWORD PTR ?PlayerHP@@3HA, 1000		; PlayerHP, 000003e8H
	lea	ecx, DWORD PTR [eax-30]

; 3653 : 														Knock = { 0,0,1,1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000

; 3654 : 														if (PHplay == FALSE)

	mov	eax, DWORD PTR ?PHplay@@3HA		; PHplay
	mov	DWORD PTR ?Knockback@@3HA, 1		; Knockback
	mov	DWORD PTR ?KnockHIT@@3HA, 1		; KnockHIT
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
	test	eax, eax
	je	SHORT $LN1282@DXW_MainLo

; 3655 : 														{
; 3656 : 															PHplay = TRUE;
; 3657 : 															Timer[25] = 3;
; 3658 : 															PHframe = 0;
; 3659 : 														}
; 3660 : 														else if (PHplay == TRUE)

	cmp	eax, 1
	jne	SHORT $LN806@DXW_MainLo
$LN1282@DXW_MainLo:

; 3661 : 														{
; 3662 : 															PHplay = TRUE;

	mov	DWORD PTR ?PHplay@@3HA, 1		; PHplay

; 3663 : 															Timer[25] = 3;

	mov	DWORD PTR ?Timer@@3PAHA+100, 3

; 3664 : 															PHframe = 0;

	mov	DWORD PTR ?PHframe@@3HA, 0		; PHframe
$LN806@DXW_MainLo:

; 3665 : 														}
; 3666 : 														if (g_bRush == TRUE)

	cmp	DWORD PTR ?g_bRush@@3HA, 1		; g_bRush
	jne	SHORT $LN1378@DXW_MainLo

; 3667 : 														{
; 3668 : 															g_bRush = FALSE;

	mov	DWORD PTR ?g_bRush@@3HA, 0		; g_bRush

; 3669 : 															g_bRushL = FALSE;

	mov	DWORD PTR ?g_bRushL@@3HA, 0		; g_bRushL

; 3670 : 															g_bRushR = FALSE;

	mov	DWORD PTR ?g_bRushR@@3HA, 0		; g_bRushR

; 3671 : 															Timer[9] = 20;

	mov	DWORD PTR ?Timer@@3PAHA+36, 20		; 00000014H

; 3672 : 															Timer[8] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+32, 0

; 3673 : 															Cframe = 0;

	mov	DWORD PTR ?Cframe@@3HA, 0		; Cframe
$LN1378@DXW_MainLo:

; 3674 : 														}
; 3675 : 														if (g_bJump == TRUE)

	cmp	DWORD PTR ?g_bJump@@3HA, 1		; g_bJump
	mov	eax, -35				; ffffffddH
	cmove	ecx, eax
	mov	DWORD PTR ?Knockspd@@3HA, ecx		; Knockspd
$LN1379@DXW_MainLo:

; 3676 : 														{
; 3677 : 															Knockspd = -35;
; 3678 : 														}
; 3679 : 													}
; 3680 : 												}
; 3681 : 												if (p3die == FALSE && BossAtt == FALSE && g_bGatt == FALSE)

	cmp	DWORD PTR ?p3die@@3HA, 0		; p3die
	jne	$LN815@DXW_MainLo
	cmp	DWORD PTR ?BossAtt@@3HA, 0		; BossAtt
	jne	$LN815@DXW_MainLo
	cmp	DWORD PTR ?g_bGatt@@3HA, 0		; g_bGatt
	jne	$LN815@DXW_MainLo

; 3682 : 												{
; 3683 : 													BOSS = { bnX + 10 ,bnY,bnX + 170,bnY + 148 };

	mov	ecx, DWORD PTR _bnX$3$[ebp]
	mov	edx, DWORD PTR _bnY$3$[ebp]
	mov	DWORD PTR $T3[ebp+4], edx
	lea	eax, DWORD PTR [ecx+10]
	mov	DWORD PTR $T3[ebp], eax
	lea	eax, DWORD PTR [ecx+170]
	mov	DWORD PTR $T3[ebp+8], eax
	lea	eax, DWORD PTR [edx+148]
	mov	DWORD PTR $T3[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T3[ebp]

; 3684 : 													if (Timer[1] >= 8)

	mov	eax, DWORD PTR ?Timer@@3PAHA+4
	movups	XMMWORD PTR ?BOSS@@3UtagRECT@@A, xmm0
	cmp	eax, 8
	jl	SHORT $LN810@DXW_MainLo

; 3685 : 													{
; 3686 : 														Timer[1] = 0;
; 3687 : 														Bframe++;

	mov	eax, DWORD PTR ?Bframe@@3HA		; Bframe
	mov	DWORD PTR ?Timer@@3PAHA+4, 0
	inc	eax
	jmp	SHORT $LN811@DXW_MainLo
$LN810@DXW_MainLo:

; 3688 : 													}
; 3689 : 													else { Timer[1]++; }

	inc	eax
	mov	DWORD PTR ?Timer@@3PAHA+4, eax
	mov	eax, DWORD PTR ?Bframe@@3HA		; Bframe
$LN811@DXW_MainLo:

; 3690 : 													if (Bframe >= 15)

	cmp	eax, 15					; 0000000fH
	mov	DWORD PTR tv11812[ebp], 0
	cmovge	eax, DWORD PTR tv11812[ebp]

; 3691 : 													{
; 3692 : 														Bframe = 0;
; 3693 : 													}
; 3694 : 													if (g_bBLL == TRUE)

	cmp	DWORD PTR ?g_bBLL@@3HA, 1		; g_bBLL
	mov	DWORD PTR ?Bframe@@3HA, eax		; Bframe
	jne	SHORT $LN813@DXW_MainLo

; 3695 : 													{
; 3696 : 														::__PutAnimeSprite(g_pDDSP3standL, bnX-30, bnY-100, 16, Bframe, 243, 314, 0);

	push	0
	push	314					; 0000013aH
	push	243					; 000000f3H
	push	eax
	push	16					; 00000010H
	lea	eax, DWORD PTR [edx-100]
	push	eax
	lea	eax, DWORD PTR [ecx-30]
	push	eax
	push	DWORD PTR ?g_pDDSP3standL@@3PAUIDirectDrawSurface7@@A ; g_pDDSP3standL
	jmp	SHORT $LN1563@DXW_MainLo
$LN813@DXW_MainLo:

; 3697 : 													}
; 3698 : 													else if (g_bBLR == TRUE)

	cmp	DWORD PTR ?g_bBLR@@3HA, 1		; g_bBLR
	jne	SHORT $LN815@DXW_MainLo

; 3699 : 													{
; 3700 : 														::__PutAnimeSprite(g_pDDSP3standR, bnX-30, bnY-100, 16, Bframe, 243, 314, 0);

	push	0
	push	314					; 0000013aH
	push	243					; 000000f3H
	push	eax
	push	16					; 00000010H
	lea	eax, DWORD PTR [edx-100]
	push	eax
	lea	eax, DWORD PTR [ecx-30]
	push	eax
	push	DWORD PTR ?g_pDDSP3standR@@3PAUIDirectDrawSurface7@@A ; g_pDDSP3standR
$LN1563@DXW_MainLo:

; 3701 : 													}
; 3702 : 												}
; 3703 : 												if (Timer[0] >= 26)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN815@DXW_MainLo:
	mov	eax, DWORD PTR ?Timer@@3PAHA
	xor	ecx, ecx
	cmp	eax, 26					; 0000001aH
	cmovge	eax, ecx
	mov	DWORD PTR ?Timer@@3PAHA, eax

; 3704 : 												{
; 3705 : 													Timer[0] = 0;
; 3706 : 												}
; 3707 : 												//Ä³¸¯ÅÍ µ¹Áø ¾Ö´Ï¸ÞÀÌ¼Ç
; 3708 : 												if (g_bRush == FALSE)

	cmp	DWORD PTR ?g_bRush@@3HA, ecx		; g_bRush
	jne	$LN1384@DXW_MainLo

; 3709 : 												{
; 3710 : 													//½ºÅÄµù
; 3711 : 													if (g_bLookL == 1 && g_bJump == 0 && g_bLeft == 0 && g_bRight == 0 && g_bAtt == FALSE)

	cmp	DWORD PTR ?g_bLookL@@3HA, 1		; g_bLookL
	jne	SHORT $LN818@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, ecx		; g_bJump
	jne	SHORT $LN818@DXW_MainLo
	cmp	DWORD PTR ?g_bLeft@@3HA, ecx		; g_bLeft
	jne	SHORT $LN818@DXW_MainLo
	cmp	DWORD PTR ?g_bRight@@3HA, ecx		; g_bRight
	jne	SHORT $LN818@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, ecx		; g_bAtt
	jne	SHORT $LN818@DXW_MainLo

; 3712 : 													{
; 3713 : 														::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 0, 86, 81, 0);

	push	ecx
	push	81					; 00000051H
	push	86					; 00000056H
	push	ecx
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A ; g_pDDSOne
	jmp	SHORT $LN1564@DXW_MainLo
$LN818@DXW_MainLo:

; 3714 : 													}
; 3715 : 													else if (g_bLookR == 1 && g_bJump == 0 && g_bLeft == 0 && g_bRight == 0 && g_bAtt == FALSE)

	cmp	DWORD PTR ?g_bLookR@@3HA, 1		; g_bLookR
	jne	SHORT $LN820@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, ecx		; g_bJump
	jne	SHORT $LN820@DXW_MainLo
	cmp	DWORD PTR ?g_bLeft@@3HA, ecx		; g_bLeft
	jne	SHORT $LN820@DXW_MainLo
	cmp	DWORD PTR ?g_bRight@@3HA, ecx		; g_bRight
	jne	SHORT $LN820@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, ecx		; g_bAtt
	jne	SHORT $LN820@DXW_MainLo

; 3716 : 													{
; 3717 : 														::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 8, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	8
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOneR@@3PAUIDirectDrawSurface7@@A ; g_pDDSOneR
$LN1564@DXW_MainLo:

; 3718 : 													}
; 3719 : 													//Á¡ÇÁ
; 3720 : 													if (g_bLookL == 1 && g_bJump == 1 && g_bAtt == FALSE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN820@DXW_MainLo:
	cmp	DWORD PTR ?g_bLookL@@3HA, 1		; g_bLookL
	jne	SHORT $LN821@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 1		; g_bJump
	jne	SHORT $LN821@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN821@DXW_MainLo

; 3721 : 													{
; 3722 : 														::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 3, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	3
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A ; g_pDDSOne
	jmp	SHORT $LN1565@DXW_MainLo
$LN821@DXW_MainLo:

; 3723 : 													}
; 3724 : 													else if (g_bLookR == 1 && g_bJump == 1 && g_bAtt == FALSE)

	cmp	DWORD PTR ?g_bLookR@@3HA, 1		; g_bLookR
	jne	SHORT $LN823@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 1		; g_bJump
	jne	SHORT $LN823@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN823@DXW_MainLo

; 3725 : 													{
; 3726 : 														::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 5, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	5
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOneR@@3PAUIDirectDrawSurface7@@A ; g_pDDSOneR
$LN1565@DXW_MainLo:

; 3727 : 													}
; 3728 : 													//¹«ºù
; 3729 : 													if (g_bLeft == 1 && g_bJump == 0 && Timer[0] < 5 && g_bJump == 0 && g_bAtt == FALSE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN823@DXW_MainLo:
	cmp	DWORD PTR ?g_bLeft@@3HA, 1		; g_bLeft
	jne	$LN830@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	jne	$LN830@DXW_MainLo
	cmp	DWORD PTR ?Timer@@3PAHA, 5
	jge	SHORT $LN1223@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN1225@DXW_MainLo

; 3730 : 													{
; 3731 : 														::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 1, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	1
	jmp	SHORT $LN1566@DXW_MainLo
$LN1223@DXW_MainLo:

; 3732 : 													}
; 3733 : 													else if (g_bLeft == 1 && g_bJump == 0 && Timer[0] >= 5 && Timer[0] < 12 && g_bAtt == FALSE)

	cmp	DWORD PTR ?Timer@@3PAHA, 12		; 0000000cH
	jge	SHORT $LN1226@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	je	SHORT $LN1567@DXW_MainLo
$LN1225@DXW_MainLo:

; 3734 : 													{
; 3735 : 														::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 0, 86, 81, 0);
; 3736 : 													}
; 3737 : 													else if (g_bLeft == 1 && g_bJump == 0 && Timer[0] >= 12 && Timer[0] < 19 && g_bAtt == FALSE)

	cmp	DWORD PTR ?Timer@@3PAHA, 12		; 0000000cH
	jl	SHORT $LN1227@DXW_MainLo
$LN1226@DXW_MainLo:
	cmp	DWORD PTR ?Timer@@3PAHA, 19		; 00000013H
	jge	SHORT $LN1228@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN1227@DXW_MainLo

; 3738 : 													{
; 3739 : 														::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 2, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	2
	jmp	SHORT $LN1566@DXW_MainLo
$LN1227@DXW_MainLo:

; 3740 : 													}
; 3741 : 													else if (g_bLeft == 1 && g_bJump == 0 && Timer[0] >= 19 && g_bAtt == FALSE)

	cmp	DWORD PTR ?Timer@@3PAHA, 19		; 00000013H
	jl	SHORT $LN830@DXW_MainLo
$LN1228@DXW_MainLo:
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN830@DXW_MainLo
$LN1567@DXW_MainLo:

; 3742 : 													{
; 3743 : 														::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 0, 86, 81, 0);
; 3744 : 													}
; 3745 : 													if (g_bRight == 1 && g_bJump == 0 && Timer[0] < 5 && g_bAtt == FALSE)

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	0
$LN1566@DXW_MainLo:
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A ; g_pDDSOne
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN830@DXW_MainLo:
	cmp	DWORD PTR ?g_bRight@@3HA, 1		; g_bRight
	jne	$LN837@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	jne	$LN837@DXW_MainLo
	cmp	DWORD PTR ?Timer@@3PAHA, 5
	jge	SHORT $LN1233@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN1234@DXW_MainLo

; 3746 : 													{
; 3747 : 														::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 7, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	7
	jmp	SHORT $LN1568@DXW_MainLo
$LN1233@DXW_MainLo:

; 3748 : 													}
; 3749 : 													else if (g_bRight == 1 && g_bJump == 0 && Timer[0] >= 5 && Timer[0] < 12 && g_bAtt == FALSE)

	cmp	DWORD PTR ?Timer@@3PAHA, 12		; 0000000cH
	jge	SHORT $LN1235@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	je	SHORT $LN1569@DXW_MainLo
$LN1234@DXW_MainLo:

; 3750 : 													{
; 3751 : 														::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 8, 86, 81, 0);
; 3752 : 													}
; 3753 : 													else if (g_bRight == 1 && g_bJump == 0 && Timer[0] >= 12 && Timer[0] < 19 && g_bAtt == FALSE)

	cmp	DWORD PTR ?Timer@@3PAHA, 12		; 0000000cH
	jl	SHORT $LN1236@DXW_MainLo
$LN1235@DXW_MainLo:
	cmp	DWORD PTR ?Timer@@3PAHA, 19		; 00000013H
	jge	SHORT $LN1237@DXW_MainLo
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN1236@DXW_MainLo

; 3754 : 													{
; 3755 : 														::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 6, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	6
	jmp	SHORT $LN1568@DXW_MainLo
$LN1236@DXW_MainLo:

; 3756 : 													}
; 3757 : 													else if (g_bRight == 1 && g_bJump == 0 && Timer[0] >= 19 && g_bAtt == FALSE)

	cmp	DWORD PTR ?Timer@@3PAHA, 19		; 00000013H
	jl	SHORT $LN837@DXW_MainLo
$LN1237@DXW_MainLo:
	cmp	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	jne	SHORT $LN837@DXW_MainLo
$LN1569@DXW_MainLo:

; 3758 : 													{
; 3759 : 														::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 8, 86, 81, 0);
; 3760 : 													}
; 3761 : 													if (g_bAtt == TRUE && g_bAR == TRUE && Timer[4] < 7)

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	8
$LN1568@DXW_MainLo:
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOneR@@3PAUIDirectDrawSurface7@@A ; g_pDDSOneR
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN837@DXW_MainLo:
	cmp	DWORD PTR ?g_bAtt@@3HA, 1		; g_bAtt
	jne	$LN1383@DXW_MainLo
	cmp	DWORD PTR ?g_bAR@@3HA, 1		; g_bAR
	mov	eax, DWORD PTR ?Timer@@3PAHA+16
	jne	SHORT $LN1242@DXW_MainLo
	cmp	eax, 7
	jge	SHORT $LN1244@DXW_MainLo

; 3762 : 													{
; 3763 : 														::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 1, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	1
	jmp	SHORT $LN1570@DXW_MainLo
$LN1244@DXW_MainLo:

; 3764 : 													}
; 3765 : 													else if (g_bAtt == TRUE && g_bAR == TRUE && Timer[4] >= 7 && Timer[4] < 14)

	cmp	eax, 14					; 0000000eH
	jge	SHORT $LN1246@DXW_MainLo

; 3766 : 													{
; 3767 : 														::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 2, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	2
	jmp	SHORT $LN1570@DXW_MainLo
$LN1246@DXW_MainLo:

; 3768 : 													}
; 3769 : 													else if (g_bAtt == TRUE && g_bAR == TRUE && Timer[4] >= 14 && Timer[4] < 21)

	cmp	eax, 21					; 00000015H
	jge	SHORT $LN1248@DXW_MainLo

; 3770 : 													{
; 3771 : 														::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 3, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	3
	jmp	SHORT $LN1570@DXW_MainLo
$LN1248@DXW_MainLo:

; 3772 : 													}
; 3773 : 													else if (g_bAtt == TRUE && g_bAR == TRUE && Timer[4] >= 21 && Timer[4] < 27)

	cmp	eax, 27					; 0000001bH
	jge	SHORT $LN1250@DXW_MainLo

; 3774 : 													{
; 3775 : 														::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 4, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	4
	jmp	SHORT $LN1570@DXW_MainLo
$LN1250@DXW_MainLo:

; 3776 : 													}
; 3777 : 													else if (g_bAtt == TRUE && g_bAR == TRUE && Timer[4] >= 27 && Timer[4] < 39)

	cmp	eax, 39					; 00000027H
	jge	SHORT $LN1242@DXW_MainLo

; 3778 : 													{
; 3779 : 														::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 0, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	0
$LN1570@DXW_MainLo:

; 3780 : 													}
; 3781 : 													if (g_bAtt == TRUE && g_bAL == TRUE && Timer[4] < 7)

	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOneR@@3PAUIDirectDrawSurface7@@A ; g_pDDSOneR
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	cmp	DWORD PTR ?g_bAtt@@3HA, 1		; g_bAtt
	jne	$LN1383@DXW_MainLo

; 3758 : 													{
; 3759 : 														::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 8, 86, 81, 0);
; 3760 : 													}
; 3761 : 													if (g_bAtt == TRUE && g_bAR == TRUE && Timer[4] < 7)

	mov	eax, DWORD PTR ?Timer@@3PAHA+16
$LN1242@DXW_MainLo:

; 3780 : 													}
; 3781 : 													if (g_bAtt == TRUE && g_bAL == TRUE && Timer[4] < 7)

	cmp	DWORD PTR ?g_bAL@@3HA, 1		; g_bAL
	jne	SHORT $LN1255@DXW_MainLo
	cmp	eax, 7
	jge	SHORT $LN1257@DXW_MainLo

; 3782 : 													{
; 3783 : 														::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 4, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	4
	jmp	SHORT $LN1571@DXW_MainLo
$LN1257@DXW_MainLo:

; 3784 : 													}
; 3785 : 													else if (g_bAtt == TRUE && g_bAL == TRUE && Timer[4] >= 7 && Timer[4] < 14)

	cmp	eax, 14					; 0000000eH
	jge	SHORT $LN1259@DXW_MainLo

; 3786 : 													{
; 3787 : 														::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 5, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	5
	jmp	SHORT $LN1571@DXW_MainLo
$LN1259@DXW_MainLo:

; 3788 : 													}
; 3789 : 													else if (g_bAtt == TRUE && g_bAL == TRUE && Timer[4] >= 14 && Timer[4] < 21)

	cmp	eax, 21					; 00000015H
	jge	SHORT $LN1261@DXW_MainLo

; 3790 : 													{
; 3791 : 														::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 6, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	6
	jmp	SHORT $LN1571@DXW_MainLo
$LN1261@DXW_MainLo:

; 3792 : 													}
; 3793 : 													else if (g_bAtt == TRUE && g_bAL == TRUE && Timer[4] >= 21 && Timer[4] < 27)

	cmp	eax, 27					; 0000001bH
	jge	SHORT $LN1263@DXW_MainLo

; 3794 : 													{
; 3795 : 														::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 7, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	7
	jmp	SHORT $LN1571@DXW_MainLo
$LN1263@DXW_MainLo:

; 3796 : 													}
; 3797 : 													else if (g_bAtt == TRUE && g_bAL == TRUE && Timer[4] >= 27 && Timer[4] < 39)

	cmp	eax, 39					; 00000027H
	jge	SHORT $LN1255@DXW_MainLo

; 3798 : 													{
; 3799 : 														::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 8, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	8
$LN1571@DXW_MainLo:

; 3800 : 													}
; 3801 : 													if (g_bAtt == TRUE && Timer[4] < 38)

	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A ; g_pDDSOne
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	cmp	DWORD PTR ?g_bAtt@@3HA, 1		; g_bAtt
	jne	SHORT $LN1383@DXW_MainLo
	mov	eax, DWORD PTR ?Timer@@3PAHA+16
$LN1255@DXW_MainLo:
	cmp	eax, 38					; 00000026H
	jge	SHORT $LN1383@DXW_MainLo

; 3802 : 													{
; 3803 : 														Timer[4]++;

	inc	eax
	mov	DWORD PTR ?Timer@@3PAHA+16, eax

; 3804 : 													}
; 3805 : 													else

	jmp	SHORT $LN1384@DXW_MainLo
$LN1383@DXW_MainLo:

; 3806 : 													{
; 3807 : 														Timer[4] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+16, 0
$LN1384@DXW_MainLo:

; 3808 : 													}
; 3809 : 												}
; 3810 : 												if (g_bRushL == TRUE)

	cmp	DWORD PTR ?g_bRushL@@3HA, 1		; g_bRushL
	jne	SHORT $LN858@DXW_MainLo

; 3811 : 												{
; 3812 : 													::__PutAnimeSprite(g_pDDSOne, nX, nY, 9, 7, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	7
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A ; g_pDDSOne
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite

; 3813 : 													::__PutAnimeSprite(g_pDDSCHARGE, nX - 170, nY - 100, 8, Cframe, 511, 263, 0);

	push	0
	push	263					; 00000107H
	push	511					; 000001ffH
	push	DWORD PTR ?Cframe@@3HA			; Cframe
	lea	eax, DWORD PTR [edi-100]
	push	8
	push	eax
	lea	eax, DWORD PTR [esi-170]
	push	eax
	push	DWORD PTR ?g_pDDSCHARGE@@3PAUIDirectDrawSurface7@@A ; g_pDDSCHARGE
	jmp	SHORT $LN1572@DXW_MainLo
$LN858@DXW_MainLo:

; 3814 : 												}
; 3815 : 												else if (g_bRushR == TRUE)

	cmp	DWORD PTR ?g_bRushR@@3HA, 1		; g_bRushR
	jne	SHORT $LN860@DXW_MainLo

; 3816 : 												{
; 3817 : 													::__PutAnimeSprite(g_pDDSOneR, nX, nY, 9, 1, 86, 81, 0);

	push	0
	push	81					; 00000051H
	push	86					; 00000056H
	push	1
	push	9
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSOneR@@3PAUIDirectDrawSurface7@@A ; g_pDDSOneR
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite

; 3818 : 													::__PutAnimeSprite(g_pDDSCHARGER, nX - 250, nY - 100, 8, Cframe, 511, 263, 0);

	push	0
	push	263					; 00000107H
	push	511					; 000001ffH
	push	DWORD PTR ?Cframe@@3HA			; Cframe
	lea	eax, DWORD PTR [edi-100]
	push	8
	push	eax
	lea	eax, DWORD PTR [esi-250]
	push	eax
	push	DWORD PTR ?g_pDDSCHARGER@@3PAUIDirectDrawSurface7@@A ; g_pDDSCHARGER
$LN1572@DXW_MainLo:

; 3819 : 												}
; 3820 : 												if (g_bAtt == TRUE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 64					; 00000040H
$LN860@DXW_MainLo:
	cmp	DWORD PTR ?g_bAtt@@3HA, 1		; g_bAtt
	jne	$LN870@DXW_MainLo

; 3821 : 												{
; 3822 : 													if (g_bAL == TRUE)

	cmp	DWORD PTR ?g_bAL@@3HA, 1		; g_bAL
	jne	$LN862@DXW_MainLo

; 3823 : 													{
; 3824 : 														if (g_bHit == FALSE)

	cmp	DWORD PTR ?g_bHit@@3HA, 0		; g_bHit
	lea	ecx, DWORD PTR [edi-65]
	jne	SHORT $LN864@DXW_MainLo

; 3825 : 														{
; 3826 : 															HIT = { SnX - 130,SnY + 10,SnX + 90,SnY + 180 };

	lea	eax, DWORD PTR [esi-130]
	mov	DWORD PTR $T2[ebp], eax
	lea	eax, DWORD PTR [ecx+10]
	mov	DWORD PTR $T2[ebp+4], eax
	lea	eax, DWORD PTR [esi+90]
	mov	DWORD PTR $T2[ebp+8], eax
	lea	eax, DWORD PTR [ecx+180]
	mov	DWORD PTR $T2[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T2[ebp]

; 3827 : 														}
; 3828 : 														else

	jmp	SHORT $LN1573@DXW_MainLo
$LN864@DXW_MainLo:

; 3829 : 														{
; 3830 : 															HIT = { 0, 0, 1, 1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000
$LN1573@DXW_MainLo:

; 3831 : 														}
; 3832 : 														if (Timer[2] < 2)

	mov	eax, DWORD PTR ?Timer@@3PAHA+8
	movups	XMMWORD PTR ?HIT@@3UtagRECT@@A, xmm0
	cmp	eax, 2
	jge	SHORT $LN866@DXW_MainLo

; 3833 : 														{
; 3834 : 															Timer[2]++;

	inc	eax
	mov	DWORD PTR ?Timer@@3PAHA+8, eax

; 3835 : 														}
; 3836 : 														else

	mov	eax, DWORD PTR ?Aframe@@3HA		; Aframe
	jmp	SHORT $LN869@DXW_MainLo
$LN866@DXW_MainLo:

; 3837 : 														{
; 3838 : 															Timer[2] = 0;
; 3839 : 															if (Aframe < 12)

	mov	eax, DWORD PTR ?Aframe@@3HA		; Aframe
	mov	DWORD PTR ?Timer@@3PAHA+8, 0
	cmp	eax, 12					; 0000000cH
	jge	SHORT $LN868@DXW_MainLo

; 3840 : 															{
; 3841 : 																Aframe++;

	inc	eax
	mov	DWORD PTR ?Aframe@@3HA, eax		; Aframe
	jmp	SHORT $LN869@DXW_MainLo
$LN868@DXW_MainLo:

; 3842 : 															}
; 3843 : 															else { Aframe == 0; g_bAL = FALSE, g_bAR = FALSE, g_bAtt = FALSE; g_bHit = FALSE; }

	mov	DWORD PTR ?g_bAL@@3HA, 0		; g_bAL
	mov	DWORD PTR ?g_bAR@@3HA, 0		; g_bAR
	mov	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	mov	DWORD PTR ?g_bHit@@3HA, 0		; g_bHit
$LN869@DXW_MainLo:

; 3844 : 														}
; 3845 : 														::__PutAnimeSprite(g_pDDSSkill, SnX - 140, SnY, 13, Aframe, 301, 218, 0);

	push	0
	push	218					; 000000daH
	push	301					; 0000012dH
	push	eax
	push	13					; 0000000dH
	push	ecx
	lea	eax, DWORD PTR [esi-140]
	push	eax
	push	DWORD PTR ?g_pDDSSkill@@3PAUIDirectDrawSurface7@@A ; g_pDDSSkill
	jmp	$LN1574@DXW_MainLo
$LN862@DXW_MainLo:

; 3846 : 													}
; 3847 : 													else if (g_bAR == TRUE)

	cmp	DWORD PTR ?g_bAR@@3HA, 1		; g_bAR
	jne	$LN870@DXW_MainLo

; 3848 : 													{
; 3849 : 														if (g_bHit == FALSE)

	cmp	DWORD PTR ?g_bHit@@3HA, 0		; g_bHit
	lea	ecx, DWORD PTR [edi-65]
	jne	SHORT $LN871@DXW_MainLo

; 3850 : 														{
; 3851 : 															HIT = { SnX - 10,SnY + 10,SnX + 220,SnY + 180 };

	lea	eax, DWORD PTR [esi-10]
	mov	DWORD PTR $T1[ebp], eax
	lea	eax, DWORD PTR [ecx+10]
	mov	DWORD PTR $T1[ebp+4], eax
	lea	eax, DWORD PTR [esi+220]
	mov	DWORD PTR $T1[ebp+8], eax
	lea	eax, DWORD PTR [ecx+180]
	mov	DWORD PTR $T1[ebp+12], eax
	movups	xmm0, XMMWORD PTR $T1[ebp]

; 3852 : 														}
; 3853 : 														else

	jmp	SHORT $LN1575@DXW_MainLo
$LN871@DXW_MainLo:

; 3854 : 														{
; 3855 : 															HIT = { 0, 0, 1, 1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000
$LN1575@DXW_MainLo:

; 3856 : 														}
; 3857 : 														if (Timer[2] < 2)

	mov	eax, DWORD PTR ?Timer@@3PAHA+8
	movups	XMMWORD PTR ?HIT@@3UtagRECT@@A, xmm0
	cmp	eax, 2
	jge	SHORT $LN873@DXW_MainLo

; 3858 : 														{
; 3859 : 															Timer[2]++;

	inc	eax
	mov	DWORD PTR ?Timer@@3PAHA+8, eax

; 3860 : 														}
; 3861 : 														else

	mov	eax, DWORD PTR ?Aframe@@3HA		; Aframe
	jmp	SHORT $LN876@DXW_MainLo
$LN873@DXW_MainLo:

; 3862 : 														{
; 3863 : 															Timer[2] = 0;
; 3864 : 															if (Aframe > 0)

	mov	eax, DWORD PTR ?Aframe@@3HA		; Aframe
	mov	DWORD PTR ?Timer@@3PAHA+8, 0
	test	eax, eax
	jle	SHORT $LN875@DXW_MainLo

; 3865 : 															{
; 3866 : 																Aframe--;

	dec	eax
	mov	DWORD PTR ?Aframe@@3HA, eax		; Aframe
	jmp	SHORT $LN876@DXW_MainLo
$LN875@DXW_MainLo:

; 3867 : 															}
; 3868 : 															else { Aframe == 0; g_bAL = FALSE, g_bAR = FALSE, g_bAtt = FALSE; g_bHit = FALSE; }

	mov	DWORD PTR ?g_bAL@@3HA, 0		; g_bAL
	mov	DWORD PTR ?g_bAR@@3HA, 0		; g_bAR
	mov	DWORD PTR ?g_bAtt@@3HA, 0		; g_bAtt
	mov	DWORD PTR ?g_bHit@@3HA, 0		; g_bHit
$LN876@DXW_MainLo:

; 3869 : 														}
; 3870 : 														::__PutAnimeSprite(g_pDDSSkillR, SnX - 70, SnY, 13, Aframe, 301, 218, 0);

	push	0
	push	218					; 000000daH
	push	301					; 0000012dH
	push	eax
	push	13					; 0000000dH
	push	ecx
	lea	eax, DWORD PTR [esi-70]
	push	eax
	push	DWORD PTR ?g_pDDSSkillR@@3PAUIDirectDrawSurface7@@A ; g_pDDSSkillR
$LN1574@DXW_MainLo:

; 3871 : 													}
; 3872 : 												}
; 3873 : 												if (bossimmu == FALSE && g_bHit == FALSE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN870@DXW_MainLo:
	cmp	DWORD PTR ?bossimmu@@3HA, 0		; bossimmu
	jne	$LN1385@DXW_MainLo
	cmp	DWORD PTR ?g_bHit@@3HA, 0		; g_bHit
	jne	$LN1385@DXW_MainLo

; 3874 : 												{
; 3875 : 													if (IntersectRect(&rcDest, &BOSS, &HIT))

	push	OFFSET ?HIT@@3UtagRECT@@A		; HIT
	push	OFFSET ?BOSS@@3UtagRECT@@A		; BOSS
	push	OFFSET ?rcDest@@3UtagRECT@@A		; rcDest
	call	DWORD PTR __imp__IntersectRect@12
	test	eax, eax
	je	$LN1385@DXW_MainLo

; 3876 : 													{
; 3877 : 														P3HP -= 100;

	sub	DWORD PTR ?P3HP@@3HA, 100		; P3HP, 00000064H

; 3878 : 														bossimmu = TRUE;
; 3879 : 														Timer[5] = 20;
; 3880 : 														g_bHit = TRUE;
; 3881 : 														if (BHMPlay == FALSE)

	cmp	DWORD PTR ?BHMPlay@@3HA, 0		; BHMPlay
	mov	DWORD PTR ?bossimmu@@3HA, 1		; bossimmu
	mov	DWORD PTR ?Timer@@3PAHA+20, 20		; 00000014H
	mov	DWORD PTR ?g_bHit@@3HA, 1		; g_bHit
	jne	SHORT $LN879@DXW_MainLo

; 3882 : 														{
; 3883 : 															BHMPlay = TRUE;

	mov	DWORD PTR ?BHMPlay@@3HA, 1		; BHMPlay

; 3884 : 															BHplay[0] = TRUE;
; 3885 : 															Timer[24] = 2;

	jmp	SHORT $LN1576@DXW_MainLo
$LN879@DXW_MainLo:

; 3886 : 														}
; 3887 : 														else if (BHMPlay == TRUE)

	cmp	DWORD PTR ?BHMPlay@@3HA, 1		; BHMPlay
	jne	SHORT $LN1385@DXW_MainLo

; 3888 : 														{
; 3889 : 															BHplay[0] = TRUE;
; 3890 : 															BHplay[1] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA+4, 0

; 3891 : 															BHplay[2] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA+8, 0

; 3892 : 															BHframe[0] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA, 0

; 3893 : 															BHframe[1] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA+4, 0

; 3894 : 															BHframe[2] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA+8, 0

; 3895 : 															Timer[24] = 2;
; 3896 : 															Timer[26] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+104, 2

; 3897 : 															Timer[27] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+108, 2
$LN1576@DXW_MainLo:

; 3898 : 														}
; 3899 : 													}
; 3900 : 												}
; 3901 : 												if (g_bRight == 1 || g_bLeft == 1 && g_bJump == 0)

	mov	DWORD PTR ?Timer@@3PAHA+96, 2
	mov	DWORD PTR ?BHplay@@3PAHA, 1
$LN1385@DXW_MainLo:
	cmp	DWORD PTR ?g_bRight@@3HA, 1		; g_bRight
	je	SHORT $LN884@DXW_MainLo
	cmp	DWORD PTR ?g_bLeft@@3HA, 1		; g_bLeft
	jne	SHORT $LN882@DXW_MainLo
	cmp	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	je	SHORT $LN884@DXW_MainLo
$LN882@DXW_MainLo:

; 3904 : 												}
; 3905 : 												else
; 3906 : 												{
; 3907 : 													Timer[0] = 0;

	mov	DWORD PTR ?Timer@@3PAHA, 0
	jmp	SHORT $LN883@DXW_MainLo
$LN884@DXW_MainLo:

; 3902 : 												{
; 3903 : 													Timer[0] += 1;

	inc	DWORD PTR ?Timer@@3PAHA
$LN883@DXW_MainLo:

; 3908 : 												}
; 3909 : 												if (p3die == 0)

	cmp	DWORD PTR ?p3die@@3HA, 0		; p3die
	jne	$LN1392@DXW_MainLo

; 3910 : 												{
; 3911 : 													if (Timer[7] == 0)

	cmp	DWORD PTR ?Timer@@3PAHA+28, 0
	jne	$LN1392@DXW_MainLo

; 3912 : 													{
; 3913 : 														if (g_bBAT == TRUE)

	cmp	DWORD PTR ?g_bBAT@@3HA, 1		; g_bBAT
	jne	$LN887@DXW_MainLo

; 3914 : 														{
; 3915 : 															if (BAframe < 10 && Timer[6] < 3)

	mov	eax, DWORD PTR ?BAframe@@3HA		; BAframe
	cmp	eax, 10					; 0000000aH
	jge	SHORT $LN1388@DXW_MainLo
	cmp	DWORD PTR ?Timer@@3PAHA+24, 3
	jge	SHORT $LN889@DXW_MainLo

; 3916 : 															{
; 3917 : 																BAHIT[0] = { 35,200,115,700 };

	movaps	xmm0, XMMWORD PTR __xmm@000002bc00000073000000c800000023

; 3918 : 																BAHIT[1] = { 255,200,335,700 };
; 3919 : 																BAHIT[2] = { 475,200,555,700 };
; 3920 : 																BAHIT[3] = { 695,200,775,700 };
; 3921 : 																BAHIT[4] = { 915,200,995,700 };
; 3922 : 																Timer[6]++;

	inc	DWORD PTR ?Timer@@3PAHA+24
	movups	XMMWORD PTR ?BAHIT@@3PAUtagRECT@@A, xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000002bc0000014f000000c8000000ff
	movups	XMMWORD PTR ?BAHIT@@3PAUtagRECT@@A+16, xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000002bc0000022b000000c8000001db
	movups	XMMWORD PTR ?BAHIT@@3PAUtagRECT@@A+32, xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000002bc00000307000000c8000002b7
	movups	XMMWORD PTR ?BAHIT@@3PAUtagRECT@@A+48, xmm0
	movaps	xmm0, XMMWORD PTR __xmm@000002bc000003e3000000c800000393
	movups	XMMWORD PTR ?BAHIT@@3PAUtagRECT@@A+64, xmm0
	jmp	SHORT $LN1388@DXW_MainLo
$LN889@DXW_MainLo:

; 3923 : 															}
; 3924 : 															else if (BAframe < 10 && Timer[6] >= 3)
; 3925 : 															{
; 3926 : 																BAframe++;

	inc	eax

; 3927 : 																Timer[6] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+24, 0
	mov	DWORD PTR ?BAframe@@3HA, eax		; BAframe
$LN1388@DXW_MainLo:

; 3928 : 															}
; 3929 : 															if (BAframe >= 13)

	cmp	eax, 13					; 0000000dH
	jl	$LN38@DXW_MainLo

; 3930 : 															{
; 3931 : 																int i = 0;
; 3932 : 																for (i = 0; i < 5; i++)

	mov	eax, OFFSET ?RandNum@@3PAHA		; RandNum
	mov	edi, OFFSET ?BAHIT@@3PAUtagRECT@@A	; BAHIT
	mov	DWORD PTR tv12032[ebp], eax
$LL39@DXW_MainLo:

; 3933 : 																{
; 3934 : 																	if (RandNum[i] == FALSE)

	cmp	DWORD PTR [eax], 0
	jne	SHORT $LN37@DXW_MainLo

; 3935 : 																	{
; 3936 : 																		if (IntersectRect(&rcDest, &BAHIT[i], &PHIT))

	push	OFFSET ?PHIT@@3UtagRECT@@A		; PHIT
	push	edi
	push	OFFSET ?rcDest@@3UtagRECT@@A		; rcDest
	call	DWORD PTR __imp__IntersectRect@12
	test	eax, eax
	je	SHORT $LN1403@DXW_MainLo

; 3937 : 																		{
; 3938 : 																			PlayerHP -= 500;

	sub	DWORD PTR ?PlayerHP@@3HA, 500		; PlayerHP, 000001f4H

; 3939 : 																			BAHIT[i] = { 0,0,1,1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000

; 3940 : 																			if (PHplay == FALSE)

	mov	eax, DWORD PTR ?PHplay@@3HA		; PHplay
	movups	XMMWORD PTR [edi], xmm0
	test	eax, eax
	je	SHORT $LN1281@DXW_MainLo

; 3941 : 																			{
; 3942 : 																				PHplay = TRUE;
; 3943 : 																				Timer[25] = 3;
; 3944 : 																				PHframe = 0;
; 3945 : 																			}
; 3946 : 																			else if (PHplay == TRUE)

	cmp	eax, 1
	jne	SHORT $LN1403@DXW_MainLo
$LN1281@DXW_MainLo:

; 3947 : 																			{
; 3948 : 																				PHplay = TRUE;

	mov	DWORD PTR ?PHplay@@3HA, 1		; PHplay

; 3949 : 																				Timer[25] = 3;

	mov	DWORD PTR ?Timer@@3PAHA+100, 3

; 3950 : 																				PHframe = 0;

	mov	DWORD PTR ?PHframe@@3HA, 0		; PHframe
$LN1403@DXW_MainLo:

; 3930 : 															{
; 3931 : 																int i = 0;
; 3932 : 																for (i = 0; i < 5; i++)

	mov	eax, DWORD PTR tv12032[ebp]
$LN37@DXW_MainLo:
	add	eax, 4
	add	edi, 16					; 00000010H
	mov	DWORD PTR tv12032[ebp], eax
	cmp	eax, OFFSET ?RandNum@@3PAHA+20
	jl	SHORT $LL39@DXW_MainLo
	mov	eax, DWORD PTR ?BAframe@@3HA		; BAframe
	mov	edi, DWORD PTR _nY$3$[ebp]
$LN38@DXW_MainLo:

; 3951 : 																			}
; 3952 : 																		}
; 3953 : 																	}
; 3954 : 																}
; 3955 : 															}
; 3956 : 															if (BAframe >= 10 && Timer[6] < 2 && BAframe < 19)

	cmp	eax, 10					; 0000000aH
	jl	SHORT $LN900@DXW_MainLo
	cmp	DWORD PTR ?Timer@@3PAHA+24, 2
	jge	SHORT $LN1275@DXW_MainLo
	cmp	eax, 19					; 00000013H
	jge	SHORT $LN900@DXW_MainLo

; 3957 : 															{
; 3958 : 																Timer[6]++;

	inc	DWORD PTR ?Timer@@3PAHA+24
	jmp	SHORT $LN900@DXW_MainLo
$LN1275@DXW_MainLo:

; 3959 : 															}
; 3960 : 															else if (BAframe >= 10 && Timer[6] >= 2 && BAframe < 19)

	cmp	eax, 19					; 00000013H
	jge	SHORT $LN900@DXW_MainLo

; 3961 : 															{
; 3962 : 																BAframe++;

	inc	eax

; 3963 : 																Timer[6] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+24, 0
	mov	DWORD PTR ?BAframe@@3HA, eax		; BAframe
$LN900@DXW_MainLo:

; 3964 : 															}
; 3965 : 															switch (Randpat)

	mov	ecx, DWORD PTR ?Randpat@@3HA		; Randpat
	sub	ecx, 0
	je	$LN901@DXW_MainLo
	sub	ecx, 1
	je	$LN902@DXW_MainLo
	sub	ecx, 1
	jne	$LN913@DXW_MainLo

; 3976 : 															case 2:
; 3977 : 																if (RandNum[0] == TRUE)

	cmp	DWORD PTR ?RandNum@@3PAHA, 1
	push	ecx
	push	656					; 00000290H
	push	600					; 00000258H
	push	eax
	push	20					; 00000014H
	push	50					; 00000032H
	push	-170					; ffffff56H
	jne	SHORT $LN904@DXW_MainLo

; 3978 : 																{
; 3979 : 																	::__PutAnimeSprite(g_BossAtt2, -170, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt2@@3PAUIDirectDrawSurface7@@A ; g_BossAtt2

; 3980 : 																}
; 3981 : 																else

	jmp	SHORT $LN1577@DXW_MainLo
$LN904@DXW_MainLo:

; 3982 : 																{
; 3983 : 																	::__PutAnimeSprite(g_BossAtt, -170, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
$LN1577@DXW_MainLo:

; 3984 : 																}
; 3985 : 																if (RandNum[1] == TRUE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	cmp	DWORD PTR ?RandNum@@3PAHA+4, 1
	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	50					; 00000032H
	jne	SHORT $LN906@DXW_MainLo

; 3986 : 																{
; 3987 : 																	::__PutAnimeSprite(g_BossAtt2, 50, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt2@@3PAUIDirectDrawSurface7@@A ; g_BossAtt2

; 3988 : 																}
; 3989 : 																else

	jmp	SHORT $LN1578@DXW_MainLo
$LN906@DXW_MainLo:

; 3990 : 																{
; 3991 : 																	::__PutAnimeSprite(g_BossAtt, 50, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
$LN1578@DXW_MainLo:

; 3992 : 																}
; 3993 : 																if (RandNum[2] == TRUE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	cmp	DWORD PTR ?RandNum@@3PAHA+8, 1
	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	270					; 0000010eH
	jne	SHORT $LN908@DXW_MainLo

; 3994 : 																{
; 3995 : 																	::__PutAnimeSprite(g_BossAtt2, 270, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt2@@3PAUIDirectDrawSurface7@@A ; g_BossAtt2

; 3996 : 																}
; 3997 : 																else

	jmp	SHORT $LN1579@DXW_MainLo
$LN908@DXW_MainLo:

; 3998 : 																{
; 3999 : 																	::__PutAnimeSprite(g_BossAtt, 270, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
$LN1579@DXW_MainLo:

; 4000 : 																}
; 4001 : 																if (RandNum[3] == TRUE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	cmp	DWORD PTR ?RandNum@@3PAHA+12, 1
	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	490					; 000001eaH
	jne	SHORT $LN910@DXW_MainLo

; 4002 : 																{
; 4003 : 																	::__PutAnimeSprite(g_BossAtt2, 490, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt2@@3PAUIDirectDrawSurface7@@A ; g_BossAtt2

; 4004 : 																}
; 4005 : 																else

	jmp	SHORT $LN1580@DXW_MainLo
$LN910@DXW_MainLo:

; 4006 : 																{
; 4007 : 																	::__PutAnimeSprite(g_BossAtt, 490, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
$LN1580@DXW_MainLo:

; 4008 : 																}
; 4009 : 																if (RandNum[4] == TRUE)

	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
	cmp	DWORD PTR ?RandNum@@3PAHA+16, 1
	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	710					; 000002c6H
	jne	$LN912@DXW_MainLo

; 4010 : 																{
; 4011 : 																	::__PutAnimeSprite(g_BossAtt2, 710, 50, 20, BAframe, 600, 656, 0);

	push	DWORD PTR ?g_BossAtt2@@3PAUIDirectDrawSurface7@@A ; g_BossAtt2

; 4012 : 																}
; 4013 : 																else

	jmp	$LN1581@DXW_MainLo
$LN902@DXW_MainLo:

; 3971 : 																break;
; 3972 : 															case 1:
; 3973 : 																::__PutAnimeSprite(g_BossAtt, 50, 50, 20, BAframe, 600, 656, 0);

	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	eax
	push	20					; 00000014H
	push	50					; 00000032H
	push	50					; 00000032H
	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite

; 3974 : 																::__PutAnimeSprite(g_BossAtt, 490, 50, 20, BAframe, 600, 656, 0);

	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	490					; 000001eaH
	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 64					; 00000040H

; 3975 : 																break;

	jmp	SHORT $LN1582@DXW_MainLo
$LN901@DXW_MainLo:

; 3966 : 															{
; 3967 : 															case 0:
; 3968 : 																::__PutAnimeSprite(g_BossAtt, -170, 50, 20, BAframe, 600, 656, 0);

	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	eax
	push	20					; 00000014H
	push	50					; 00000032H
	push	-170					; ffffff56H
	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite

; 3969 : 																::__PutAnimeSprite(g_BossAtt, 270, 50, 20, BAframe, 600, 656, 0);

	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	270					; 0000010eH
	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 64					; 00000040H

; 3970 : 																::__PutAnimeSprite(g_BossAtt, 710, 50, 20, BAframe, 600, 656, 0);

	push	0
	push	656					; 00000290H
	push	600					; 00000258H
	push	DWORD PTR ?BAframe@@3HA			; BAframe
	push	20					; 00000014H
	push	50					; 00000032H
	push	710					; 000002c6H
$LN912@DXW_MainLo:

; 4014 : 																{
; 4015 : 																	::__PutAnimeSprite(g_BossAtt, 710, 50, 20, BAframe, 600, 656, 0);
; 4016 : 																}
; 4017 : 																break;
; 4018 : 															}
; 4019 : 															if (BAframe >= 19)

	push	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A ; g_BossAtt
$LN1581@DXW_MainLo:
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN1582@DXW_MainLo:
	mov	eax, DWORD PTR ?BAframe@@3HA		; BAframe
$LN913@DXW_MainLo:
	cmp	eax, 19					; 00000013H
	jl	$LN1392@DXW_MainLo

; 4020 : 															{
; 4021 : 																if (Timer[6] > 2)

	cmp	DWORD PTR ?Timer@@3PAHA+24, 2
	jle	SHORT $LN915@DXW_MainLo

; 4022 : 																{
; 4023 : 																	BAframe = 0;
; 4024 : 																	Randpat2 = Randpat;

	mov	eax, DWORD PTR ?Randpat@@3HA		; Randpat

; 4025 : 																	g_bBAT = FALSE;
; 4026 : 																	Timer[7] = 60;
; 4027 : 																	if (P3HP < 1000)

	mov	ecx, 5
	cmp	DWORD PTR ?P3HP@@3HA, 1000		; P3HP, 000003e8H
	mov	DWORD PTR ?Randpat2@@3HA, eax		; Randpat2
	mov	eax, 60					; 0000003cH
	cmovl	eax, ecx
	mov	DWORD PTR ?BAframe@@3HA, 0		; BAframe
	mov	DWORD PTR ?g_bBAT@@3HA, 0		; g_bBAT
	mov	DWORD PTR ?Timer@@3PAHA+28, eax

; 4028 : 																	{
; 4029 : 																		Timer[7] -= 55;
; 4030 : 																	}
; 4031 : 																	Maximum = 0;

	mov	DWORD PTR ?Maximum@@3HA, 0		; Maximum

; 4032 : 																	RandNum[0, 1, 2, 3, 4] = { 0 };

	mov	DWORD PTR ?RandNum@@3PAHA+16, 0

; 4033 : 																}
; 4034 : 																else

	jmp	$LN1392@DXW_MainLo
$LN915@DXW_MainLo:

; 4035 : 																{
; 4036 : 																	Timer[6]++;

	inc	DWORD PTR ?Timer@@3PAHA+24

; 4037 : 																}
; 4038 : 															}
; 4039 : 														}
; 4040 : 														else

	jmp	$LN1392@DXW_MainLo
$LN887@DXW_MainLo:

; 4041 : 														{
; 4042 : 															Randpat = rand() % 3;

	call	_rand
	cdq
	mov	ecx, 3
	idiv	ecx
	mov	DWORD PTR ?Randpat@@3HA, edx		; Randpat
	cmp	edx, DWORD PTR ?Randpat2@@3HA		; Randpat2

; 4043 : 															if (Randpat == Randpat2)

	jne	SHORT $LN42@DXW_MainLo

; 4044 : 															{
; 4045 : 																switch (Randpat)

	mov	eax, edx
	sub	eax, 0
	je	SHORT $LN919@DXW_MainLo
	sub	eax, 1
	je	SHORT $LN920@DXW_MainLo
	sub	eax, 1
	jne	SHORT $LN42@DXW_MainLo

; 4053 : 																case 2:
; 4054 : 																	Randpat = 0;

	mov	DWORD PTR ?Randpat@@3HA, eax		; Randpat
	jmp	$LN1391@DXW_MainLo
$LN920@DXW_MainLo:

; 4049 : 																	break;
; 4050 : 																case 1:
; 4051 : 																	Randpat = 2;

	mov	DWORD PTR ?Randpat@@3HA, 2		; Randpat

; 4052 : 																	break;

	jmp	SHORT $LN1276@DXW_MainLo
$LN919@DXW_MainLo:

; 4046 : 																{
; 4047 : 																case 0:
; 4048 : 																	Randpat = 1;

	mov	DWORD PTR ?Randpat@@3HA, 1		; Randpat

; 4055 : 																	break;
; 4056 : 																}
; 4057 : 															}
; 4058 : 															if (Randpat == 2)

	jmp	$LN1391@DXW_MainLo
$LN42@DXW_MainLo:
	cmp	edx, 2
	jne	$LN1391@DXW_MainLo
$LN1276@DXW_MainLo:

; 4059 : 															{
; 4060 : 																RandNum[0] = rand() % 2;

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN1434@DXW_MainLo
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN1434@DXW_MainLo:

; 4061 : 																if (RandNum[0] == 1 && Maximum < 2)

	mov	ecx, DWORD PTR ?Maximum@@3HA		; Maximum
	mov	DWORD PTR ?RandNum@@3PAHA, eax
	cmp	eax, 1
	jne	SHORT $LN925@DXW_MainLo
	cmp	ecx, 2
	jge	SHORT $LN923@DXW_MainLo

; 4062 : 																{
; 4063 : 																	Maximum++;

	inc	ecx
	mov	DWORD PTR ?Maximum@@3HA, ecx		; Maximum
	jmp	SHORT $LN925@DXW_MainLo
$LN923@DXW_MainLo:

; 4064 : 																}
; 4065 : 																else if (RandNum[0] == 1 && Maximum >= 2)

	cmp	eax, 1
	jne	SHORT $LN925@DXW_MainLo
	xor	edx, edx
	cmp	ecx, 2
	cmovge	eax, edx
	mov	DWORD PTR ?RandNum@@3PAHA, eax
$LN925@DXW_MainLo:

; 4066 : 																{
; 4067 : 																	RandNum[0] = 0;
; 4068 : 																}
; 4069 : 																RandNum[1] = rand() % 2;

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN1435@DXW_MainLo
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN1435@DXW_MainLo:

; 4070 : 																if (RandNum[1] == 1 && Maximum < 2)

	mov	ecx, DWORD PTR ?Maximum@@3HA		; Maximum
	mov	DWORD PTR ?RandNum@@3PAHA+4, eax
	cmp	eax, 1
	jne	SHORT $LN928@DXW_MainLo
	cmp	ecx, 2
	jge	SHORT $LN926@DXW_MainLo

; 4071 : 																{
; 4072 : 																	Maximum++;

	inc	ecx
	mov	DWORD PTR ?Maximum@@3HA, ecx		; Maximum
	jmp	SHORT $LN928@DXW_MainLo
$LN926@DXW_MainLo:

; 4073 : 																}
; 4074 : 																else if (RandNum[1] == 1 && Maximum >= 2)

	cmp	eax, 1
	jne	SHORT $LN928@DXW_MainLo
	xor	edx, edx
	cmp	ecx, 2
	cmovge	eax, edx
	mov	DWORD PTR ?RandNum@@3PAHA+4, eax
$LN928@DXW_MainLo:

; 4075 : 																{
; 4076 : 																	RandNum[1] = 0;
; 4077 : 																}
; 4078 : 																RandNum[2] = rand() % 2;

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN1436@DXW_MainLo
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN1436@DXW_MainLo:

; 4079 : 																if (RandNum[2] == 1 && Maximum < 2)

	mov	ecx, DWORD PTR ?Maximum@@3HA		; Maximum
	mov	DWORD PTR ?RandNum@@3PAHA+8, eax
	cmp	eax, 1
	jne	SHORT $LN931@DXW_MainLo
	cmp	ecx, 2
	jge	SHORT $LN929@DXW_MainLo

; 4080 : 																{
; 4081 : 																	Maximum++;

	inc	ecx
	mov	DWORD PTR ?Maximum@@3HA, ecx		; Maximum
	jmp	SHORT $LN931@DXW_MainLo
$LN929@DXW_MainLo:

; 4082 : 																}
; 4083 : 																else if (RandNum[2] == 1 && Maximum >= 2)

	cmp	eax, 1
	jne	SHORT $LN931@DXW_MainLo
	xor	edx, edx
	cmp	ecx, 2
	cmovge	eax, edx
	mov	DWORD PTR ?RandNum@@3PAHA+8, eax
$LN931@DXW_MainLo:

; 4084 : 																{
; 4085 : 																	RandNum[2] = 0;
; 4086 : 																}
; 4087 : 																RandNum[3] = rand() % 2;

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN1437@DXW_MainLo
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN1437@DXW_MainLo:

; 4088 : 																if (RandNum[3] == 1 && Maximum < 2)

	mov	ecx, DWORD PTR ?Maximum@@3HA		; Maximum
	mov	DWORD PTR ?RandNum@@3PAHA+12, eax
	cmp	eax, 1
	jne	SHORT $LN934@DXW_MainLo
	cmp	ecx, 2
	jge	SHORT $LN932@DXW_MainLo

; 4089 : 																{
; 4090 : 																	Maximum++;

	inc	ecx
	mov	DWORD PTR ?Maximum@@3HA, ecx		; Maximum
	jmp	SHORT $LN934@DXW_MainLo
$LN932@DXW_MainLo:

; 4091 : 																}
; 4092 : 																else if (RandNum[3] == 1 && Maximum >= 2)

	cmp	eax, 1
	jne	SHORT $LN934@DXW_MainLo
	xor	edx, edx
	cmp	ecx, 2
	cmovge	eax, edx
	mov	DWORD PTR ?RandNum@@3PAHA+12, eax
$LN934@DXW_MainLo:

; 4093 : 																{
; 4094 : 																	RandNum[3] = 0;
; 4095 : 																}
; 4096 : 																RandNum[4] = rand() % 2;

	call	_rand
	and	eax, -2147483647			; 80000001H
	jns	SHORT $LN1438@DXW_MainLo
	dec	eax
	or	eax, -2					; fffffffeH
	inc	eax
$LN1438@DXW_MainLo:

; 4097 : 																if (RandNum[4] == 1 && Maximum < 2)

	mov	ecx, DWORD PTR ?Maximum@@3HA		; Maximum
	mov	DWORD PTR ?RandNum@@3PAHA+16, eax
	cmp	eax, 1
	jne	SHORT $LN937@DXW_MainLo
	cmp	ecx, 2
	jge	SHORT $LN935@DXW_MainLo

; 4098 : 																{
; 4099 : 																	Maximum++;

	inc	ecx
	mov	DWORD PTR ?Maximum@@3HA, ecx		; Maximum
	jmp	SHORT $LN937@DXW_MainLo
$LN935@DXW_MainLo:

; 4100 : 																}
; 4101 : 																else if (RandNum[4] == 1 && Maximum >= 2)

	cmp	eax, 1
	jne	SHORT $LN937@DXW_MainLo
	xor	edx, edx
	cmp	ecx, 2
	cmovge	eax, edx
	mov	DWORD PTR ?RandNum@@3PAHA+16, eax
$LN937@DXW_MainLo:

; 4102 : 																{
; 4103 : 																	RandNum[4] = 0;
; 4104 : 																}
; 4105 : 																if (Maximum == 0)

	test	ecx, ecx
	jne	SHORT $LN1391@DXW_MainLo

; 4106 : 																{
; 4107 : 																	int n = 0;
; 4108 : 																	n = rand() % 4;

	call	_rand
	and	eax, -2147483645			; 80000003H
	jns	SHORT $LN1439@DXW_MainLo
	dec	eax
	or	eax, -4					; fffffffcH
	inc	eax
$LN1439@DXW_MainLo:

; 4109 : 																	RandNum[n] = 1;

	mov	DWORD PTR ?RandNum@@3PAHA[eax*4], 1
$LN1391@DXW_MainLo:

; 4110 : 																}
; 4111 : 															}
; 4112 : 															switch (Randpat)

	mov	eax, DWORD PTR ?Randpat@@3HA		; Randpat
	sub	eax, 0
	je	SHORT $LN939@DXW_MainLo
	sub	eax, 1
	jne	SHORT $LN44@DXW_MainLo

; 4120 : 																break;
; 4121 : 															case 1:
; 4122 : 																RandNum[0] = 1;

	movaps	xmm0, XMMWORD PTR __xmm@00000000000000010000000000000001

; 4123 : 																RandNum[1] = 0;
; 4124 : 																RandNum[2] = 1;
; 4125 : 																RandNum[3] = 0;
; 4126 : 																RandNum[4] = 1;

	mov	DWORD PTR ?RandNum@@3PAHA+16, 1
	jmp	SHORT $LN1588@DXW_MainLo
$LN939@DXW_MainLo:

; 4113 : 															{
; 4114 : 															case 0:
; 4115 : 																RandNum[0] = 0;

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000000000000100000000

; 4116 : 																RandNum[1] = 1;
; 4117 : 																RandNum[2] = 0;
; 4118 : 																RandNum[3] = 1;
; 4119 : 																RandNum[4] = 0;

	mov	DWORD PTR ?RandNum@@3PAHA+16, 0
$LN1588@DXW_MainLo:

; 4127 : 																break;
; 4128 : 															}
; 4129 : 															g_bBAT = TRUE;

	movups	XMMWORD PTR ?RandNum@@3PAHA, xmm0
$LN44@DXW_MainLo:
	mov	DWORD PTR ?g_bBAT@@3HA, 1		; g_bBAT
$LN1392@DXW_MainLo:

; 4130 : 														}
; 4131 : 													}
; 4132 : 												}
; 4133 : 												if (PHplay == TRUE)

	cmp	DWORD PTR ?PHplay@@3HA, 1		; PHplay
	jne	$LN947@DXW_MainLo

; 4134 : 												{
; 4135 : 													if (Timer[25] == 0)

	cmp	DWORD PTR ?Timer@@3PAHA+100, 0
	jne	SHORT $LN942@DXW_MainLo

; 4136 : 													{
; 4137 : 														PHframe++;

	mov	eax, DWORD PTR ?PHframe@@3HA		; PHframe
	inc	eax

; 4138 : 														Timer[25] = 3;

	mov	DWORD PTR ?Timer@@3PAHA+100, 3
	mov	DWORD PTR ?PHframe@@3HA, eax		; PHframe
	cmp	eax, 5

; 4139 : 														if (PHframe > 5)

	jle	SHORT $LN1264@DXW_MainLo

; 4140 : 														{
; 4141 : 															PHplay = FALSE;

	mov	DWORD PTR ?PHplay@@3HA, 0		; PHplay

; 4142 : 															PHframe = 0;

	mov	DWORD PTR ?PHframe@@3HA, 0		; PHframe

; 4143 : 															Timer[25] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+100, 0

; 4144 : 														}
; 4145 : 													}

	jmp	SHORT $LN947@DXW_MainLo
$LN942@DXW_MainLo:

; 4146 : 													else { Timer[25] --; }

	dec	DWORD PTR ?Timer@@3PAHA+100
$LN1264@DXW_MainLo:

; 4147 : 													if (PHplay == TRUE)
; 4148 : 													{
; 4149 : 														if (g_bLookL)

	add	edi, -70				; ffffffbaH
	cmp	DWORD PTR ?g_bLookL@@3HA, 0		; g_bLookL
	je	SHORT $LN1059@DXW_MainLo

; 4150 : 														{
; 4151 : 															::__PutAnimeSprite(g_pDDSDPlayerHit, nX - 50, nY - 70, 6, PHframe, 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?PHframe@@3HA			; PHframe
	lea	eax, DWORD PTR [esi-50]
	push	6
	push	edi
	push	eax
	push	DWORD PTR ?g_pDDSDPlayerHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDPlayerHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN1059@DXW_MainLo:

; 4152 : 														}
; 4153 : 														if (g_bLookR)

	cmp	DWORD PTR ?g_bLookR@@3HA, 0		; g_bLookR
	je	SHORT $LN947@DXW_MainLo

; 4154 : 														{
; 4155 : 															::__PutAnimeSprite(g_pDDSDPlayerHit, nX - 40, nY - 70, 6, PHframe, 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?PHframe@@3HA			; PHframe
	lea	eax, DWORD PTR [esi-40]
	push	6
	push	edi
	push	eax
	push	DWORD PTR ?g_pDDSDPlayerHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDPlayerHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN947@DXW_MainLo:

; 4156 : 														}
; 4157 : 													}
; 4158 : 												}
; 4159 : 												if (BHMPlay == TRUE)

	cmp	DWORD PTR ?BHMPlay@@3HA, 1		; BHMPlay
	jne	$LN972@DXW_MainLo

; 4160 : 												{
; 4161 : 													if (Timer[24] == 0 && BHplay[0] == TRUE)

	cmp	DWORD PTR ?Timer@@3PAHA+96, 0
	jne	SHORT $LN949@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA, 1
	jne	SHORT $LN953@DXW_MainLo

; 4162 : 													{
; 4163 : 														BHframe[0]++;

	mov	eax, DWORD PTR ?BHframe@@3PAHA
	inc	eax

; 4164 : 														Timer[24] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+96, 2
	mov	DWORD PTR ?BHframe@@3PAHA, eax

; 4165 : 														if (BHframe[0] == 6)

	cmp	eax, 6
	jne	SHORT $LN951@DXW_MainLo

; 4166 : 														{
; 4167 : 															BHframe[0] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA, 0

; 4168 : 															Timer[24] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+96, 0

; 4169 : 															BHplay[0] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA, 0

; 4170 : 														}
; 4171 : 														if (BHframe[0] == 4 && BHplay[1] == FALSE)

	jmp	SHORT $LN953@DXW_MainLo
$LN951@DXW_MainLo:
	cmp	eax, 4
	jne	SHORT $LN953@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+4, 0
	jne	SHORT $LN953@DXW_MainLo

; 4172 : 														{
; 4173 : 															Timer[26] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+104, 2

; 4174 : 															BHplay[1] = TRUE;

	mov	DWORD PTR ?BHplay@@3PAHA+4, 1

; 4175 : 														}
; 4176 : 													}

	jmp	$LN1266@DXW_MainLo
$LN949@DXW_MainLo:

; 4177 : 													else if (Timer[24] > 0 && BHplay[0] == TRUE) { Timer[24]--; }

	jle	SHORT $LN953@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA, 1
	jne	SHORT $LN953@DXW_MainLo
	dec	DWORD PTR ?Timer@@3PAHA+96
$LN953@DXW_MainLo:

; 4178 : 													if (Timer[26] == 0 && BHplay[1] == TRUE)

	cmp	DWORD PTR ?Timer@@3PAHA+104, 0
	jne	SHORT $LN954@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+4, 1
	jne	SHORT $LN958@DXW_MainLo

; 4179 : 													{
; 4180 : 														BHframe[1]++;

	mov	eax, DWORD PTR ?BHframe@@3PAHA+4
	inc	eax

; 4181 : 														Timer[26] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+104, 2
	mov	DWORD PTR ?BHframe@@3PAHA+4, eax

; 4182 : 														if (BHframe[1] == 6)

	cmp	eax, 6
	jne	SHORT $LN956@DXW_MainLo

; 4183 : 														{
; 4184 : 															BHframe[1] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA+4, 0

; 4185 : 															Timer[26] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+104, 0

; 4186 : 															BHplay[1] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA+4, 0

; 4187 : 														}
; 4188 : 														if (BHframe[1] == 4 && BHplay[2] == FALSE)

	jmp	SHORT $LN958@DXW_MainLo
$LN956@DXW_MainLo:
	cmp	eax, 4
	jne	SHORT $LN958@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+8, 0
	jne	SHORT $LN958@DXW_MainLo

; 4189 : 														{
; 4190 : 															Timer[27] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+108, 2

; 4191 : 															BHplay[2] = TRUE;

	mov	DWORD PTR ?BHplay@@3PAHA+8, 1

; 4192 : 														}
; 4193 : 													}

	jmp	SHORT $LN1268@DXW_MainLo
$LN954@DXW_MainLo:

; 4194 : 													else if (Timer[26] > 0 && BHplay[1] == TRUE) { Timer[26]--; }

	jle	SHORT $LN958@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+4, 1
	jne	SHORT $LN958@DXW_MainLo
$LN1266@DXW_MainLo:
	dec	DWORD PTR ?Timer@@3PAHA+104
$LN958@DXW_MainLo:

; 4195 : 													if (Timer[27] == 0 && BHplay[2] == TRUE)

	cmp	DWORD PTR ?Timer@@3PAHA+108, 0
	jne	SHORT $LN959@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+8, 1
	jne	SHORT $LN962@DXW_MainLo

; 4196 : 													{
; 4197 : 														BHframe[2]++;

	mov	eax, DWORD PTR ?BHframe@@3PAHA+8
	inc	eax

; 4198 : 														Timer[27] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+108, 2
	mov	DWORD PTR ?BHframe@@3PAHA+8, eax

; 4199 : 														if (BHframe[2] == 6)

	cmp	eax, 6
	jne	SHORT $LN962@DXW_MainLo

; 4200 : 														{
; 4201 : 															BHframe[2] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA+8, 0

; 4202 : 															Timer[27] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+108, 0

; 4203 : 															BHplay[2] = FALSE;

	mov	DWORD PTR ?BHplay@@3PAHA+8, 0

; 4204 : 														}
; 4205 : 													}

	jmp	SHORT $LN962@DXW_MainLo
$LN959@DXW_MainLo:

; 4206 : 													else if (Timer[27] > 0 && BHplay[2] == TRUE) { Timer[27]--; }

	jle	SHORT $LN962@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+8, 1
	jne	SHORT $LN962@DXW_MainLo
$LN1268@DXW_MainLo:
	dec	DWORD PTR ?Timer@@3PAHA+108
$LN962@DXW_MainLo:

; 4207 : 													if (BHplay[0] == FALSE && BHplay[1] == FALSE && BHplay[2] == FALSE)

	cmp	DWORD PTR ?BHplay@@3PAHA, 0
	jne	SHORT $LN963@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+4, 0
	jne	$LN966@DXW_MainLo
	cmp	DWORD PTR ?BHplay@@3PAHA+8, 0
	jne	$LN969@DXW_MainLo

; 4208 : 													{
; 4209 : 														BHMPlay = FALSE;

	mov	DWORD PTR ?BHMPlay@@3HA, 0		; BHMPlay

; 4210 : 													}
; 4211 : 													if (BHplay[0] == TRUE)

	jmp	$LN972@DXW_MainLo
$LN963@DXW_MainLo:
	cmp	DWORD PTR ?BHplay@@3PAHA, 1
	jne	SHORT $LN966@DXW_MainLo

; 4212 : 													{
; 4213 : 														if (g_bLookL)

	mov	edi, DWORD PTR _bnY$3$[ebp]
	mov	esi, DWORD PTR _bnX$3$[ebp]
	add	edi, -40				; ffffffd8H
	cmp	DWORD PTR ?g_bLookL@@3HA, 0		; g_bLookL
	je	SHORT $LN1060@DXW_MainLo

; 4214 : 														{
; 4215 : 															::__PutAnimeSprite(g_pDDSDBossHit, bnX, bnY - 40, 6, BHframe[0], 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?BHframe@@3PAHA
	push	6
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDBossHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN1060@DXW_MainLo:

; 4216 : 														}
; 4217 : 														if (g_bLookR)

	cmp	DWORD PTR ?g_bLookR@@3HA, 0		; g_bLookR
	je	SHORT $LN966@DXW_MainLo

; 4218 : 														{
; 4219 : 															::__PutAnimeSprite(g_pDDSDBossHit, bnX + 20, bnY - 40, 6, BHframe[0], 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?BHframe@@3PAHA
	lea	eax, DWORD PTR [esi+20]
	push	6
	push	edi
	push	eax
	push	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDBossHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN966@DXW_MainLo:

; 4220 : 														}
; 4221 : 													}
; 4222 : 													if (BHplay[1] == TRUE)

	cmp	DWORD PTR ?BHplay@@3PAHA+4, 1
	jne	SHORT $LN969@DXW_MainLo

; 4223 : 													{
; 4224 : 														if (g_bLookL)

	mov	edi, DWORD PTR _bnY$3$[ebp]
	mov	esi, DWORD PTR _bnX$3$[ebp]
	add	edi, -40				; ffffffd8H
	cmp	DWORD PTR ?g_bLookL@@3HA, 0		; g_bLookL
	je	SHORT $LN1061@DXW_MainLo

; 4225 : 														{
; 4226 : 															::__PutAnimeSprite(g_pDDSDBossHit, bnX, bnY - 40, 6, BHframe[1], 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?BHframe@@3PAHA+4
	push	6
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDBossHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN1061@DXW_MainLo:

; 4227 : 														}
; 4228 : 														if (g_bLookR)

	cmp	DWORD PTR ?g_bLookR@@3HA, 0		; g_bLookR
	je	SHORT $LN969@DXW_MainLo

; 4229 : 														{
; 4230 : 															::__PutAnimeSprite(g_pDDSDBossHit, bnX + 20, bnY - 40, 6, BHframe[1], 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?BHframe@@3PAHA+4
	lea	eax, DWORD PTR [esi+20]
	push	6
	push	edi
	push	eax
	push	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDBossHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN969@DXW_MainLo:

; 4231 : 														}
; 4232 : 													}
; 4233 : 													if (BHplay[2] == TRUE)

	cmp	DWORD PTR ?BHplay@@3PAHA+8, 1
	jne	SHORT $LN972@DXW_MainLo

; 4234 : 													{
; 4235 : 														if (g_bLookL)

	mov	edi, DWORD PTR _bnY$3$[ebp]
	mov	esi, DWORD PTR _bnX$3$[ebp]
	add	edi, -40				; ffffffd8H
	cmp	DWORD PTR ?g_bLookL@@3HA, 0		; g_bLookL
	je	SHORT $LN1062@DXW_MainLo

; 4236 : 														{
; 4237 : 															::__PutAnimeSprite(g_pDDSDBossHit, bnX, bnY - 40, 6, BHframe[2], 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?BHframe@@3PAHA+8
	push	6
	push	edi
	push	esi
	push	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDBossHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN1062@DXW_MainLo:

; 4238 : 														}
; 4239 : 														if (g_bLookR)

	cmp	DWORD PTR ?g_bLookR@@3HA, 0		; g_bLookR
	je	SHORT $LN972@DXW_MainLo

; 4240 : 														{
; 4241 : 															::__PutAnimeSprite(g_pDDSDBossHit, bnX + 20, bnY - 40, 6, BHframe[2], 180, 226, 0);

	push	0
	push	226					; 000000e2H
	push	180					; 000000b4H
	push	DWORD PTR ?BHframe@@3PAHA+8
	lea	eax, DWORD PTR [esi+20]
	push	6
	push	edi
	push	eax
	push	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A ; g_pDDSDBossHit
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	add	esp, 32					; 00000020H
$LN972@DXW_MainLo:

; 4242 : 														}
; 4243 : 													}
; 4244 : 												}
; 4245 : 												if (P3HP < 1)

	cmp	DWORD PTR ?P3HP@@3HA, 1			; P3HP
	jge	$LN973@DXW_MainLo

; 4246 : 												{
; 4247 : 													if (g_pDS[0])

	mov	eax, DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A
	test	eax, eax
	je	SHORT $LN974@DXW_MainLo

; 4248 : 														m_HHSound.Stop(g_pDS[0]);

	push	eax
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Stop@CHHSound@@QAEXPAUIDirectSoundBuffer@@@Z ; CHHSound::Stop
$LN974@DXW_MainLo:

; 4249 : 													p3die = 1;
; 4250 : 													g_nPhaze = 4;
; 4251 : 													g_Pos.x = 0;
; 4252 : 													g_Pos.y = 0;
; 4253 : 													g_BPos.x = 0;
; 4254 : 													g_BPos.y = 0;
; 4255 : 													Gravity = 0;
; 4256 : 													g_bSetSpeed = FALSE;
; 4257 : 													g_bJump = FALSE;
; 4258 : 													g_bJaccel = FALSE;
; 4259 : 													g_bJLeft = FALSE;
; 4260 : 													g_bJRight = FALSE;
; 4261 : 													g_bCast = FALSE;
; 4262 : 													Timer[17] = 0;
; 4263 : 													Timer[16] = 0;
; 4264 : 													BossAtt = FALSE;
; 4265 : 													BAL = FALSE;
; 4266 : 													BAR = FALSE;
; 4267 : 													BKframe = 0;
; 4268 : 													KnockHIT = FALSE;
; 4269 : 													Knock = { 0,0,1,1 };

	movaps	xmm0, XMMWORD PTR __xmm@00000001000000010000000000000000

; 4270 : 													BHplay[0] = FALSE;
; 4271 : 													BHplay[1] = FALSE;
; 4272 : 													BHplay[2] = FALSE;
; 4273 : 													BAframe = 0;
; 4274 : 													Randpat2 = Randpat;

	mov	eax, DWORD PTR ?Randpat@@3HA		; Randpat
	mov	DWORD PTR ?p3die@@3HA, 1		; p3die
	mov	DWORD PTR ?g_nPhaze@@3HA, 4		; g_nPhaze
	mov	DWORD PTR ?g_Pos@@3UtagPOINT@@A, 0
	mov	DWORD PTR ?g_Pos@@3UtagPOINT@@A+4, 0
	mov	DWORD PTR ?g_BPos@@3UtagPOINT@@A, 0
	mov	DWORD PTR ?g_BPos@@3UtagPOINT@@A+4, 0
	mov	DWORD PTR ?Gravity@@3HA, 0		; Gravity
	mov	DWORD PTR ?g_bSetSpeed@@3HA, 0		; g_bSetSpeed
	mov	DWORD PTR ?g_bJump@@3HA, 0		; g_bJump
	mov	DWORD PTR ?g_bJaccel@@3HA, 0		; g_bJaccel
	mov	DWORD PTR ?g_bJLeft@@3HA, 0		; g_bJLeft
	mov	DWORD PTR ?g_bJRight@@3HA, 0		; g_bJRight
	mov	DWORD PTR ?g_bCast@@3HA, 0		; g_bCast
	mov	DWORD PTR ?Timer@@3PAHA+68, 0
	mov	DWORD PTR ?Timer@@3PAHA+64, 0
	mov	DWORD PTR ?BossAtt@@3HA, 0		; BossAtt
	mov	DWORD PTR ?BAL@@3HA, 0			; BAL
	mov	DWORD PTR ?BAR@@3HA, 0			; BAR
	mov	DWORD PTR ?BKframe@@3HA, 0		; BKframe
	mov	DWORD PTR ?KnockHIT@@3HA, 0		; KnockHIT
	movups	XMMWORD PTR ?Knock@@3UtagRECT@@A, xmm0
	mov	DWORD PTR ?BHplay@@3PAHA, 0
	mov	DWORD PTR ?BHplay@@3PAHA+4, 0
	mov	DWORD PTR ?BHplay@@3PAHA+8, 0
	mov	DWORD PTR ?BAframe@@3HA, 0		; BAframe
	mov	DWORD PTR ?Randpat2@@3HA, eax		; Randpat2

; 4275 : 													g_bBAT = FALSE;

	mov	DWORD PTR ?g_bBAT@@3HA, 0		; g_bBAT

; 4276 : 													Timer[7] = 60;

	mov	DWORD PTR ?Timer@@3PAHA+28, 60		; 0000003cH

; 4277 : 													Maximum = 0;

	mov	DWORD PTR ?Maximum@@3HA, 0		; Maximum

; 4278 : 													RandNum[0, 1, 2, 3, 4] = { 0 };

	mov	DWORD PTR ?RandNum@@3PAHA+16, 0

; 4279 : 													BHMPlay = FALSE;

	mov	DWORD PTR ?BHMPlay@@3HA, 0		; BHMPlay

; 4280 : 													BHframe[0] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA, 0

; 4281 : 													BHframe[1] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA+4, 0

; 4282 : 													BHframe[2] = 0;

	mov	DWORD PTR ?BHframe@@3PAHA+8, 0

; 4283 : 													Timer[24] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+96, 2

; 4284 : 													Timer[26] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+104, 2

; 4285 : 													Timer[27] = 2;

	mov	DWORD PTR ?Timer@@3PAHA+108, 2

; 4286 : 
; 4287 : 												}
; 4288 : 												//·ºÆ® È®ÀÎ¿ë
; 4289 : 												/*
; 4290 : 												::__Lock(g_pDDSBack);
; 4291 : 												__DrawRect16(PHIT.left, PHIT.top, PHIT.right, PHIT.bottom, wPixel);
; 4292 : 												__DrawRect16(HIT.left, HIT.top, HIT.right, HIT.bottom, wPixel);
; 4293 : 												__DrawRect16(Cast.left, Cast.top, Cast.right, Cast.bottom, wPixel);
; 4294 : 												__DrawRect16(BOSS.left, BOSS.top, BOSS.right, BOSS.bottom, wPixel);
; 4295 : 												__DrawRect16(Knock.left, Knock.top, Knock.right, Knock.bottom, wPixel);
; 4296 : 												for (i = 0; i < 5; i++)
; 4297 : 												{
; 4298 : 													__DrawRect16(BAHIT[i].left, BAHIT[i].top, BAHIT[i].right, BAHIT[i].bottom, wPixel);
; 4299 : 													__DrawRect16(Spike[i].left, Spike[i].top, Spike[i].right, Spike[i].bottom, wPixel);
; 4300 : 												}
; 4301 : 												::__Unlock(g_pDDSBack);
; 4302 : 												*/
; 4303 : 												if (Timer[7] > 0)

	jmp	SHORT $LN1269@DXW_MainLo
$LN973@DXW_MainLo:
	cmp	DWORD PTR ?Timer@@3PAHA+28, 0
	jle	SHORT $LN975@DXW_MainLo
$LN1269@DXW_MainLo:

; 4304 : 												{
; 4305 : 													Timer[7]--;

	dec	DWORD PTR ?Timer@@3PAHA+28
$LN975@DXW_MainLo:

; 4306 : 												}
; 4307 : 												if (Timer[5] > 0)

	cmp	DWORD PTR ?Timer@@3PAHA+20, 0
	jle	SHORT $LN1069@DXW_MainLo

; 4308 : 												{
; 4309 : 													Timer[5] -= 1;

	dec	DWORD PTR ?Timer@@3PAHA+20
	jmp	SHORT $LN978@DXW_MainLo
$LN1069@DXW_MainLo:

; 4310 : 												}
; 4311 : 												else if (Timer[5] <= 0 && bossimmu == TRUE)

	cmp	DWORD PTR ?bossimmu@@3HA, 1		; bossimmu
	jne	SHORT $LN978@DXW_MainLo

; 4312 : 												{
; 4313 : 													bossimmu = FALSE;

	mov	DWORD PTR ?bossimmu@@3HA, 0		; bossimmu

; 4314 : 													Timer[5] = 0;

	mov	DWORD PTR ?Timer@@3PAHA+20, 0
$LN978@DXW_MainLo:

; 4315 : 												}
; 4316 : 												::__PutSprite(g_pDDSHP, 130, 0);

	push	0
	push	130					; 00000082H
	push	DWORD PTR ?g_pDDSHP@@3PAUIDirectDrawSurface7@@A ; g_pDDSHP
	call	?__PutSprite@@YAXPAUIDirectDrawSurface7@@HH@Z ; __PutSprite

; 4317 : 												if (P3HP > 1)

	mov	eax, DWORD PTR ?P3HP@@3HA		; P3HP
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jle	SHORT $LN979@DXW_MainLo

; 4318 : 												{
; 4319 : 													::__Putbar(g_pDDSHPbar, 132, 2, P3MHP, P3HP, P3HPrate);

	movss	xmm0, DWORD PTR ?P3HPrate@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	eax
	push	DWORD PTR ?P3MHP@@3HA			; P3MHP
$LN1496@DXW_MainLo:

; 4320 : 												}
; 4321 : 												::__PutSprite(g_pDDSPHP, 400, 737);
; 4322 : 												if (PlayerHP > 1)
; 4323 : 												{
; 4324 : 													::__Putbar(g_pDDSPHPbar, 425, 744, PlayerMHP, PlayerHP, PlayerHPrate);
; 4325 : 												}
; 4326 : 												//////////////////////////////////////////////////////////
; 4327 : 												///// ±âÅ¸Á¤º¸ 
; 4328 : 												DXW_DisplayInfo();

	push	2
	push	132					; 00000084H
	push	DWORD PTR ?g_pDDSHPbar@@3PAUIDirectDrawSurface7@@A ; g_pDDSHPbar
	call	?__Putbar@@YAXPAUIDirectDrawSurface7@@HHHHM@Z ; __Putbar
	add	esp, 24					; 00000018H
$LN979@DXW_MainLo:
	push	737					; 000002e1H
	push	400					; 00000190H
	push	DWORD PTR ?g_pDDSPHP@@3PAUIDirectDrawSurface7@@A ; g_pDDSPHP
	call	?__PutSprite@@YAXPAUIDirectDrawSurface7@@HH@Z ; __PutSprite
	mov	eax, DWORD PTR ?PlayerHP@@3HA		; PlayerHP
	add	esp, 12					; 0000000cH
	cmp	eax, 1
	jle	SHORT $LN980@DXW_MainLo
	movss	xmm0, DWORD PTR ?PlayerHPrate@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	eax
	push	DWORD PTR ?PlayerMHP@@3HA		; PlayerMHP
	push	744					; 000002e8H
	push	425					; 000001a9H
	push	DWORD PTR ?g_pDDSPHPbar@@3PAUIDirectDrawSurface7@@A ; g_pDDSPHPbar
	call	?__Putbar@@YAXPAUIDirectDrawSurface7@@HHHHM@Z ; __Putbar
	add	esp, 24					; 00000018H
$LN980@DXW_MainLo:
	call	?DXW_DisplayInfo@@YAXXZ			; DXW_DisplayInfo

; 4329 : 												break;

	mov	edi, 5
	jmp	$LN1589@DXW_MainLo
$LN981@DXW_MainLo:

; 4330 : 												//////////////////////////////////////////////////////////
; 4331 : 												//////////////////////////////////////////////////////////
; 4332 : 												//////////////////////////////////////////////////////////
; 4333 : 												//////////////////////////////////////////////////////////
; 4334 : 												//////////////////////////////////////////////////////////
; 4335 : 												//////////////////////////////////////////////////////////
; 4336 : 												//////////////////////////////////////////////////////////
; 4337 : 												//////////////////////////////////////////////////////////
; 4338 : 												//////////////////////////////////////////////////////////
; 4339 : 												//////////////////////////////////////////////////////////
; 4340 : 												//////////////////////////////////////////////////////////
; 4341 : 												//////////////////////////////////////////////////////////
; 4342 : 												case 4:
; 4343 : 													if (P4Mus == FALSE)

	cmp	DWORD PTR ?P4Mus@@3HA, 0		; P4Mus
	jne	SHORT $LN982@DXW_MainLo

; 4344 : 													{
; 4345 : 														m_HHSound.Stop(g_pDS[2]);

	push	DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+8
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Stop@CHHSound@@QAEXPAUIDirectSoundBuffer@@@Z ; CHHSound::Stop

; 4346 : 														P4Mus = TRUE;

	mov	DWORD PTR ?P4Mus@@3HA, 1		; P4Mus
$LN982@DXW_MainLo:

; 4347 : 													}
; 4348 : 													__PutImage(g_pDDSEnd, 0, 0);

	push	0
	push	0
	push	DWORD PTR ?g_pDDSEnd@@3PAUIDirectDrawSurface7@@A ; g_pDDSEnd

; 4349 : 													break;

	jmp	SHORT $LN1590@DXW_MainLo
$LN983@DXW_MainLo:

; 4350 : 
; 4351 : 												case 5:
; 4352 : 													if (P5Mus == FALSE)

	cmp	DWORD PTR ?P5Mus@@3HA, 0		; P5Mus
	jne	SHORT $LN984@DXW_MainLo

; 4353 : 													{
; 4354 : 														m_HHSound.Stop(g_pDS[0]);

	push	DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Stop@CHHSound@@QAEXPAUIDirectSoundBuffer@@@Z ; CHHSound::Stop

; 4355 : 														m_HHSound.Stop(g_pDS[1]);

	push	DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+4
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Stop@CHHSound@@QAEXPAUIDirectSoundBuffer@@@Z ; CHHSound::Stop

; 4356 : 														m_HHSound.Stop(g_pDS[2]);

	push	DWORD PTR ?g_pDS@@3PAPAUIDirectSoundBuffer@@A+8
	mov	ecx, OFFSET ?m_HHSound@@3VCHHSound@@A	; m_HHSound
	call	?Stop@CHHSound@@QAEXPAUIDirectSoundBuffer@@@Z ; CHHSound::Stop

; 4357 : 														P5Mus = TRUE;

	mov	DWORD PTR ?P5Mus@@3HA, 1		; P5Mus
$LN984@DXW_MainLo:

; 4358 : 													}
; 4359 : 													__PutImage(g_pDDSGameover, 0, 0);

	push	0
	push	0
	push	DWORD PTR ?g_pDDSGameover@@3PAUIDirectDrawSurface7@@A ; g_pDDSGameover
$LN1590@DXW_MainLo:

; 4360 : 													break;
; 4361 : 
; 4362 : 	}
; 4363 : 	if (g_nPhaze > 0 && g_nPhaze < 4)

	call	?__PutImage@@YAXPAUIDirectDrawSurface7@@HH@Z ; __PutImage
	add	esp, 12					; 0000000cH
$LN1589@DXW_MainLo:
	mov	ecx, DWORD PTR ?g_nPhaze@@3HA		; g_nPhaze
$LN2@DXW_MainLo:
	test	ecx, ecx
$LN1452@DXW_MainLo:
	jle	SHORT $LN985@DXW_MainLo
	cmp	ecx, 4
	jge	SHORT $LN985@DXW_MainLo
$LN1087@DXW_MainLo:

; 4364 : 	{
; 4365 : 		::__PutSprite(g_pDDSSkillBut, 250, 720);

	push	720					; 000002d0H
	push	250					; 000000faH
	push	DWORD PTR ?g_pDDSSkillBut@@3PAUIDirectDrawSurface7@@A ; g_pDDSSkillBut
	call	?__PutSprite@@YAXPAUIDirectDrawSurface7@@HH@Z ; __PutSprite
	mov	ecx, DWORD PTR ?g_nPhaze@@3HA		; g_nPhaze
	add	esp, 12					; 0000000cH
$LN985@DXW_MainLo:

; 4366 : 	}
; 4367 : 	if (Timer[28] > 10 && g_nPhaze > 0 && g_nPhaze < 4)

	mov	edx, DWORD PTR ?Timer@@3PAHA+112
	cmp	edx, 10					; 0000000aH
	jle	SHORT $LN986@DXW_MainLo
	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, 2
	ja	SHORT $LN986@DXW_MainLo

; 4368 : 	{
; 4369 : 		__Putbar(g_pDDSSkillCool, 251, 721, MaxTime, Timer[28], Timerrate);

	movss	xmm0, DWORD PTR ?Timerrate@@3MA
	push	ecx
	movss	DWORD PTR [esp], xmm0
	push	edx
	push	DWORD PTR ?MaxTime@@3HA			; MaxTime
	push	721					; 000002d1H
	push	251					; 000000fbH
	push	DWORD PTR ?g_pDDSSkillCool@@3PAUIDirectDrawSurface7@@A ; g_pDDSSkillCool
	call	?__Putbar@@YAXPAUIDirectDrawSurface7@@HHHHM@Z ; __Putbar
	mov	ecx, DWORD PTR ?g_nPhaze@@3HA		; g_nPhaze
	add	esp, 24					; 00000018H
$LN986@DXW_MainLo:

; 4370 : 	}
; 4371 : 	if (Skilluse == TRUE && g_nPhaze > 0 && g_nPhaze < 4)

	cmp	DWORD PTR ?Skilluse@@3HA, 1		; Skilluse
	jne	SHORT $LN987@DXW_MainLo
	lea	eax, DWORD PTR [ecx-1]
	cmp	eax, 2
	ja	SHORT $LN987@DXW_MainLo

; 4372 : 	{
; 4373 : 		::__PutAnimeSprite(g_pDDSPlayerskill, 0, 0, 20, PSframe, 1024, 768, 0);

	push	0
	push	768					; 00000300H
	push	1024					; 00000400H
	push	DWORD PTR ?PSframe@@3HA			; PSframe
	push	20					; 00000014H
	push	0
	push	0
	push	DWORD PTR ?g_pDDSPlayerskill@@3PAUIDirectDrawSurface7@@A ; g_pDDSPlayerskill
	call	?__PutAnimeSprite@@YAXPAUIDirectDrawSurface7@@HHHHHHH@Z ; __PutAnimeSprite
	mov	ecx, DWORD PTR ?g_nPhaze@@3HA		; g_nPhaze
	add	esp, 32					; 00000020H
$LN987@DXW_MainLo:

; 4374 : 	}
; 4375 : 	if (PlayerHP < 1 && g_nPhaze < 4)

	cmp	DWORD PTR ?PlayerHP@@3HA, 1		; PlayerHP
	jge	SHORT $LN988@DXW_MainLo
	cmp	ecx, 4
	cmovl	ecx, edi
	mov	DWORD PTR ?g_nPhaze@@3HA, ecx		; g_nPhaze
$LN988@DXW_MainLo:

; 4376 : 	{
; 4377 : 		g_nPhaze = 5;
; 4378 : 	}
; 4379 : 		if (g_bFadeIn)

	mov	ecx, DWORD PTR ?g_bFadeIn@@3HA		; g_bFadeIn
	mov	eax, DWORD PTR ?g_dwFadeRate@@3KA	; g_dwFadeRate
	test	ecx, ecx
	je	SHORT $LN990@DXW_MainLo

; 4380 : 		{
; 4381 : 			__FxFadeInOutEx(g_pDDSBack, g_pDDSBack, g_dwFadeRate);
; 4382 : 			g_dwFadeRate += 2;

	add	eax, 2

; 4383 : 			if (g_dwFadeRate > 99) g_bFadeIn = FALSE;

	xor	edx, edx
	cmp	eax, 99					; 00000063H
	mov	DWORD PTR ?g_dwFadeRate@@3KA, eax	; g_dwFadeRate
	cmova	ecx, edx
	mov	DWORD PTR ?g_bFadeIn@@3HA, ecx		; g_bFadeIn
$LN990@DXW_MainLo:

; 4384 : 		}
; 4385 : 
; 4386 : 		if (g_bFadeOut)

	mov	ecx, DWORD PTR ?g_bFadeOut@@3HA		; g_bFadeOut
	test	ecx, ecx
	je	SHORT $LN992@DXW_MainLo

; 4387 : 		{
; 4388 : 			__FxFadeInOutEx(g_pDDSBack, g_pDDSBack, g_dwFadeRate);
; 4389 : 			g_dwFadeRate -= 2;

	sub	eax, 2

; 4390 : 			if (g_dwFadeRate < 1) g_bFadeOut = FALSE;

	xor	edx, edx
	cmp	eax, 1
	mov	DWORD PTR ?g_dwFadeRate@@3KA, eax	; g_dwFadeRate
	cmovb	ecx, edx
	mov	DWORD PTR ?g_bFadeOut@@3HA, ecx		; g_bFadeOut
$LN992@DXW_MainLo:

; 4391 : 		}
; 4392 : 
; 4393 : 		if (g_bFadeLoop)

	cmp	DWORD PTR ?g_bFadeLoop@@3HA, 0		; g_bFadeLoop
	je	SHORT $LN997@DXW_MainLo

; 4394 : 		{
; 4395 : 			__FxFadeInOutEx(g_pDDSBack, g_pDDSBack, g_dwFadeRate);
; 4396 : 			if (g_bInc)

	cmp	DWORD PTR ?g_bInc@@3HA, 0		; g_bInc
	je	SHORT $LN994@DXW_MainLo

; 4397 : 				g_dwFadeRate += 2;

	add	eax, 2

; 4398 : 			else

	jmp	SHORT $LN995@DXW_MainLo
$LN994@DXW_MainLo:

; 4399 : 				g_dwFadeRate -= 2;

	add	eax, -2					; fffffffeH
$LN995@DXW_MainLo:

; 4400 : 
; 4401 : 			if (g_dwFadeRate <= 0) { g_bInc = TRUE;  g_dwFadeRate = 0; }

	mov	DWORD PTR ?g_dwFadeRate@@3KA, eax	; g_dwFadeRate
	test	eax, eax
	jne	SHORT $LN996@DXW_MainLo
	mov	DWORD PTR ?g_bInc@@3HA, 1		; g_bInc
	mov	DWORD PTR ?g_dwFadeRate@@3KA, eax	; g_dwFadeRate

; 4402 : 			if (g_dwFadeRate > 100) { g_bInc = FALSE; g_dwFadeRate = 100; }

	jmp	SHORT $LN997@DXW_MainLo
$LN996@DXW_MainLo:
	cmp	eax, 100				; 00000064H
	jbe	SHORT $LN997@DXW_MainLo
	mov	DWORD PTR ?g_bInc@@3HA, 0		; g_bInc
	mov	DWORD PTR ?g_dwFadeRate@@3KA, 100	; g_dwFadeRate, 00000064H
$LN997@DXW_MainLo:

; 4403 : 		}
; 4404 : 
; 4405 : 		if (g_bGrayScale) __FxGrayScale(g_pDDSBack, g_pDDSBack);
; 4406 : 
; 4407 : 		if (g_bColorize) __FxColorize(g_pDDSBack, g_pDDSBack, g_dwR, g_dwG, g_dwB);
; 4408 : 	///// ÇÃ¸³ÇÎ ¶Ç´Â ¹öÆÛ¸µ
; 4409 : #ifdef _DEBUG
; 4410 : 	hRet = __DDSWBlt();
; 4411 : #elif _NOVSYNC
; 4412 : 	hRet = g_pDDSPrimary->Flip(NULL, DDFLIP_NOVSYNC);
; 4413 : #else
; 4414 : 	hRet = g_pDDSPrimary->Flip(NULL, DDFLIP_WAIT);

	mov	eax, DWORD PTR ?g_pDDSPrimary@@3PAUIDirectDrawSurface7@@A ; g_pDDSPrimary
	push	1
	push	0
	push	eax
	mov	ecx, DWORD PTR [eax]
	call	DWORD PTR [ecx+44]
	mov	esi, eax

; 4415 : #endif
; 4416 : 
; 4417 : 	///// Ç¥¸éº¹±¸	
; 4418 : 	if (hRet == DDERR_SURFACELOST) g_pDD->RestoreAllSurfaces();

	cmp	esi, -2005532222			; 887601c2H
	jne	SHORT $LN1000@DXW_MainLo
	mov	ecx, DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A ; g_pDD
	push	ecx
	mov	edx, DWORD PTR [ecx]
	call	DWORD PTR [edx+100]

; 4419 : 	if (hRet != DD_OK) { DDERRCHK(hRet); return; }

	jmp	SHORT $LN1270@DXW_MainLo
$LN1000@DXW_MainLo:
	test	esi, esi
	je	SHORT $LN1001@DXW_MainLo
$LN1270@DXW_MainLo:
	push	4419					; 00001143H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	esi
	call	?___DDError@@YAHJPADH@Z			; ___DDError
	add	esp, 12					; 0000000cH

; 4423 : 
; 4424 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
$LN1001@DXW_MainLo:

; 4420 : 
; 4421 : 	///// ÇÁ·¹ÀÓ Á¶Á¤
; 4422 : 	gFpsMng.FrameTuningEx();

	mov	ecx, OFFSET ?gFpsMng@@3VCFpsMng@@A	; gFpsMng
	call	?FrameTuningEx@CFpsMng@@QAEXXZ		; CFpsMng::FrameTuningEx

; 4423 : 
; 4424 : }

	pop	edi
	pop	esi
	mov	esp, ebp
	pop	ebp
	mov	esp, ebx
	pop	ebx
	ret	0
	npad	2
$LN1595@DXW_MainLo:
	DD	$LN160@DXW_MainLo
	DD	$LN162@DXW_MainLo
	DD	$LN422@DXW_MainLo
	DD	$LN677@DXW_MainLo
	DD	$LN981@DXW_MainLo
	DD	$LN983@DXW_MainLo
?DXW_MainLoop@@YAXXZ ENDP				; DXW_MainLoop
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\time.h
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\time.h
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT ?DXW_Init@@YAHXZ
_TEXT	SEGMENT
?DXW_Init@@YAHXZ PROC					; DXW_Init, COMDAT

; 499  :     ///// DX °´Ã¼ »ý¼º ¹× ÃÊ±âÈ­
; 500  : 	BOOL bRval;
; 501  : 
; 502  : 	///// 
; 503  : #ifdef _DEBUG
; 504  : 	bRval = __DDInitWin(TRUE);
; 505  : 	if (!bRval) 
; 506  : 	{		
; 507  : 		bRval = __DDInit();
; 508  : 		if (!bRval) return FALSE;
; 509  : 	}
; 510  : 	//bRval = __DDCSetClipper(g_pDDSBack, 0, 0, HRES, VRES);
; 511  : 	bRval = __DDCSetClipperWin();
; 512  : 	if (!bRval) return FALSE;
; 513  : #else
; 514  : 	bRval = __DDInit();

	call	?__DDInit@@YAHXZ			; __DDInit

; 515  : 	if (!bRval) return FALSE;

	test	eax, eax
	je	$LN10@DXW_Init

; 516  : 	bRval = __DDCSetClipper(g_pDDSBack, 0, 0, HRES, VRES);

	push	768					; 00000300H
	push	1024					; 00000400H
	push	0
	push	0
	push	DWORD PTR ?g_pDDSBack@@3PAUIDirectDrawSurface7@@A ; g_pDDSBack
	call	?__DDCSetClipper@@YAHPAUIDirectDrawSurface7@@HHHH@Z ; __DDCSetClipper
	add	esp, 20					; 00000014H

; 517  : 	if (!bRval) return FALSE;

	test	eax, eax
	je	$LN10@DXW_Init

; 518  : #endif
; 519  : 	
; 520  : 	///// ÇÈ¼¿Æ÷¸Ë Ã¼Å©
; 521  : 	g_dwPixelFormat = ::__CheckRGBBit(g_pDDSPrimary);

	push	DWORD PTR ?g_pDDSPrimary@@3PAUIDirectDrawSurface7@@A ; g_pDDSPrimary
	call	?__CheckRGBBit@@YAKPAUIDirectDrawSurface7@@@Z ; __CheckRGBBit

; 522  : 
; 523  : 	///// µ¥ÀÌÅÍ ºÒ·¯¿À±â
; 524  : 	/*switch (g_dwPixelFormat)
; 525  : 	{
; 526  : 	case RGB565 : g_pDDSOne = __DDLoadBin("man16.bin", TRUE); break;				  
; 527  : 	case RGB888 : g_pDDSOne = __DDLoadBin("man32.bin", TRUE); break;
; 528  : 	default : return FALSE;
; 529  : 	}*/
; 530  : 	g_pDDSOne = ::DDLoadBitmap(g_pDD, "image/Hero.bmp", 774, 81, TRUE);

	push	1
	push	81					; 00000051H
	push	774					; 00000306H
	push	OFFSET ??_C@_0P@MIMHEJLI@image?1Hero?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	mov	DWORD PTR ?g_dwPixelFormat@@3KA, eax	; g_dwPixelFormat
	call	_DDLoadBitmap

; 531  : 	::DDSetColorKey(g_pDDSOne, RGB(181, 230, 29));

	push	1959605					; 001de6b5H
	push	eax
	mov	DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSOne
	call	_DDSetColorKey

; 532  : 	g_pDDSDHole = ::DDLoadBitmap(g_pDD, "image/Hole.bmp", 87, 36, TRUE);

	push	1
	push	36					; 00000024H
	push	87					; 00000057H
	push	OFFSET ??_C@_0P@MPHNJBIF@image?1Hole?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 533  : 	::DDSetColorKey(g_pDDSDHole, RGB(0, 255, 0));

	push	65280					; 0000ff00H
	push	eax
	mov	DWORD PTR ?g_pDDSDHole@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSDHole
	call	_DDSetColorKey

; 534  : 	g_pDDSSkillBut = ::DDLoadBitmap(g_pDD, "image/SkillButton.bmp", 64, 34, TRUE);

	push	1
	push	34					; 00000022H
	push	64					; 00000040H
	push	OFFSET ??_C@_0BG@MCGLLKNE@image?1SkillButton?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap
	add	esp, 80					; 00000050H
	mov	DWORD PTR ?g_pDDSSkillBut@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSSkillBut

; 535  : 	::DDSetColorKey(g_pDDSSkillBut, RGB(0, 255, 0));

	push	65280					; 0000ff00H
	push	eax
	call	_DDSetColorKey

; 536  : 	g_pDDSSkillCool = ::DDLoadBitmap(g_pDD, "image/SkillCool.bmp", 62, 32, TRUE);

	push	1
	push	32					; 00000020H
	push	62					; 0000003eH
	push	OFFSET ??_C@_0BE@EFMCEHEN@image?1SkillCool?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 537  : 	::DDSetColorKey(g_pDDSSkillCool, RGB(0, 255, 0));

	push	65280					; 0000ff00H
	push	eax
	mov	DWORD PTR ?g_pDDSSkillCool@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSSkillCool
	call	_DDSetColorKey

; 538  : 	g_pDDSCast = ::DDLoadBitmap(g_pDD, "image/Cast3.bmp", 3840,192, TRUE); //¾Ö´Ï¸ÞÀÌ¼Ç 20°³.

	push	1
	push	192					; 000000c0H
	push	3840					; 00000f00H
	push	OFFSET ??_C@_0BA@IIOEGDCI@image?1Cast3?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 539  : 	::DDSetColorKey(g_pDDSCast, RGB(0, 255, 0));

	push	65280					; 0000ff00H
	push	eax
	mov	DWORD PTR ?g_pDDSCast@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSCast
	call	_DDSetColorKey
	add	esp, 64					; 00000040H

; 540  : 	g_pDDSCast2 = ::DDLoadBitmap(g_pDD, "image/Cast4.bmp", 3840, 192, TRUE); //¾Ö´Ï¸ÞÀÌ¼Ç 20°³.

	push	1
	push	192					; 000000c0H
	push	3840					; 00000f00H
	push	OFFSET ??_C@_0BA@JFOBFDJA@image?1Cast4?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 541  : 	::DDSetColorKey(g_pDDSCast2, RGB(255, 0, 255));

	push	16711935				; 00ff00ffH
	push	eax
	mov	DWORD PTR ?g_pDDSCast2@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSCast2
	call	_DDSetColorKey

; 542  : 	g_pDDSCastAtt = ::DDLoadBitmap(g_pDD, "image/CastAttack.bmp", 3440, 525, TRUE); //¾Ö´Ï¸ÞÀÌ¼Ç 10°³.

	push	1
	push	525					; 0000020dH
	push	3440					; 00000d70H
	push	OFFSET ??_C@_0BF@LBHFHDLC@image?1CastAttack?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 543  : 	::DDSetColorKey(g_pDDSCastAtt, RGB(0,255,0));

	push	65280					; 0000ff00H
	push	eax
	mov	DWORD PTR ?g_pDDSCastAtt@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSCastAtt
	call	_DDSetColorKey

; 544  : 	g_pDDSBossAtt = ::DDLoadBitmap(g_pDD, "image/BossAttackMotionL.bmp", 7116, 321, TRUE); //¾Ö´Ï¸ÞÀÌ¼Ç 12°³.

	push	1
	push	321					; 00000141H
	push	7116					; 00001bccH
	push	OFFSET ??_C@_0BM@EFMPOJLK@image?1BossAttackMotionL?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap
	add	esp, 76					; 0000004cH
	mov	DWORD PTR ?g_pDDSBossAtt@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSBossAtt

; 545  : 	::DDSetColorKey(g_pDDSBossAtt, RGB(0, 255, 0));

	push	65280					; 0000ff00H
	push	eax
	call	_DDSetColorKey

; 546  : 	g_pDDSBossAttR = ::DDLoadBitmap(g_pDD, "image/BossAttackMotionR.bmp", 7116, 321, TRUE); //¾Ö´Ï¸ÞÀÌ¼Ç 12°³.

	push	1
	push	321					; 00000141H
	push	7116					; 00001bccH
	push	OFFSET ??_C@_0BM@HMBDIKFB@image?1BossAttackMotionR?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 547  : 	::DDSetColorKey(g_pDDSBossAttR, RGB(0, 255, 0));

	push	65280					; 0000ff00H
	push	eax
	mov	DWORD PTR ?g_pDDSBossAttR@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSBossAttR
	call	_DDSetColorKey

; 548  : 	g_pDDSDragAttR = ::DDLoadBitmap(g_pDD, "image/BossAttack2R.bmp", 12240, 315, TRUE); //¾Ö´Ï¸ÞÀÌ¼Ç 17°³.

	push	1
	push	315					; 0000013bH
	push	12240					; 00002fd0H
	push	OFFSET ??_C@_0BH@PDGBKHPO@image?1BossAttack2R?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 549  : 	::DDSetColorKey(g_pDDSDragAttR, RGB(0, 255, 0));

	push	65280					; 0000ff00H
	push	eax
	mov	DWORD PTR ?g_pDDSDragAttR@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSDragAttR
	call	_DDSetColorKey
	add	esp, 64					; 00000040H

; 550  : 	g_pDDSDragAtt = ::DDLoadBitmap(g_pDD, "image/BossAttack2L.bmp", 12240, 315, TRUE); //¾Ö´Ï¸ÞÀÌ¼Ç 17°³.

	push	1
	push	315					; 0000013bH
	push	12240					; 00002fd0H
	push	OFFSET ??_C@_0BH@MKLNMEBF@image?1BossAttack2L?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 551  : 	::DDSetColorKey(g_pDDSDragAtt, RGB(0, 255, 0));

	push	65280					; 0000ff00H
	push	eax
	mov	DWORD PTR ?g_pDDSDragAtt@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSDragAtt
	call	_DDSetColorKey

; 552  : 	g_pDDSPlayerskill = ::DDLoadBitmap(g_pDD, "image/Worldreaver.bmp", 20480, 768, TRUE); //¾Ö´Ï¸ÞÀÌ¼Ç 20°³.

	push	1
	push	768					; 00000300H
	push	20480					; 00005000H
	push	OFFSET ??_C@_0BG@MIHCLFFG@image?1Worldreaver?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 553  : 	::DDSetColorKey(g_pDDSPlayerskill, RGB(0, 255, 0));

	push	65280					; 0000ff00H
	push	eax
	mov	DWORD PTR ?g_pDDSPlayerskill@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSPlayerskill
	call	_DDSetColorKey

; 554  : 	g_pDDSBoss3Att = ::DDLoadBitmap(g_pDD, "image/Boss3AttackL.bmp", 16100, 384, TRUE); //¾Ö´Ï¸ÞÀÌ¼Ç 24°³.

	push	1
	push	384					; 00000180H
	push	16100					; 00003ee4H
	push	OFFSET ??_C@_0BH@BGEGJJDF@image?1Boss3AttackL?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap
	add	esp, 76					; 0000004cH
	mov	DWORD PTR ?g_pDDSBoss3Att@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSBoss3Att

; 555  : 	::DDSetColorKey(g_pDDSBoss3Att, RGB(0, 255, 0));

	push	65280					; 0000ff00H
	push	eax
	call	_DDSetColorKey

; 556  : 	g_pDDSBoss3AttR = ::DDLoadBitmap(g_pDD, "image/Boss3AttackR.bmp", 16100, 384, TRUE); //¾Ö´Ï¸ÞÀÌ¼Ç 24°³.

	push	1
	push	384					; 00000180H
	push	16100					; 00003ee4H
	push	OFFSET ??_C@_0BH@CPJKPKNO@image?1Boss3AttackR?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 557  : 	::DDSetColorKey(g_pDDSBoss3AttR, RGB(0, 255, 0));

	push	65280					; 0000ff00H
	push	eax
	mov	DWORD PTR ?g_pDDSBoss3AttR@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSBoss3AttR
	call	_DDSetColorKey

; 558  : 	g_pDDSBoss3Att3 = ::DDLoadBitmap(g_pDD, "image/Boss3Attack33L.bmp", 35247, 798, TRUE); //¾Ö´Ï¸ÞÀÌ¼Ç 31°³.

	push	1
	push	798					; 0000031eH
	push	35247					; 000089afH
	push	OFFSET ??_C@_0BJ@OPEOHJGM@image?1Boss3Attack33L?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 559  : 	::DDSetColorKey(g_pDDSBoss3Att3, RGB(0, 255, 0));

	push	65280					; 0000ff00H
	push	eax
	mov	DWORD PTR ?g_pDDSBoss3Att3@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSBoss3Att3
	call	_DDSetColorKey
	add	esp, 64					; 00000040H

; 560  : 	g_pDDSBoss3AttR3 = ::DDLoadBitmap(g_pDD, "image/Boss3Attack33R.bmp", 35247, 798, TRUE); //¾Ö´Ï¸ÞÀÌ¼Ç 31°³.

	push	1
	push	798					; 0000031eH
	push	35247					; 000089afH
	push	OFFSET ??_C@_0BJ@NGJCBKIH@image?1Boss3Attack33R?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 561  : 	::DDSetColorKey(g_pDDSBoss3AttR3, RGB(0, 255, 0));

	push	65280					; 0000ff00H
	push	eax
	mov	DWORD PTR ?g_pDDSBoss3AttR3@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSBoss3AttR3
	call	_DDSetColorKey

; 562  : 	g_pDDSGroundAtt= ::DDLoadBitmap(g_pDD, "image/GroundAttack.bmp", 6330, 629, TRUE); //¾Ö´Ï¸ÞÀÌ¼Ç 15°³.

	push	1
	push	629					; 00000275H
	push	6330					; 000018baH
	push	OFFSET ??_C@_0BH@OOONBDHA@image?1GroundAttack?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 563  : 	::DDSetColorKey(g_pDDSGroundAtt, RGB(0, 0, 255));

	push	16711680				; 00ff0000H
	push	eax
	mov	DWORD PTR ?g_pDDSGroundAtt@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSGroundAtt
	call	_DDSetColorKey

; 564  : 	g_pDDSOneR = ::DDLoadBitmap(g_pDD, "image/HeroRR.bmp", 774, 81, TRUE);

	push	1
	push	81					; 00000051H
	push	774					; 00000306H
	push	OFFSET ??_C@_0BB@IGNNDELJ@image?1HeroRR?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap
	add	esp, 76					; 0000004cH
	mov	DWORD PTR ?g_pDDSOneR@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSOneR

; 565  : 	::DDSetColorKey(g_pDDSOneR, RGB(181, 230, 29));

	push	1959605					; 001de6b5H
	push	eax
	call	_DDSetColorKey

; 566  : 	g_BossAtt = ::DDLoadBitmap(g_pDD, "image/BossAtt2.bmp", 12000, 656, TRUE);

	push	1
	push	656					; 00000290H
	push	12000					; 00002ee0H
	push	OFFSET ??_C@_0BD@JDMLGABL@image?1BossAtt2?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 567  : 	::DDSetColorKey(g_BossAtt, RGB(255, 255, 255));

	push	16777215				; 00ffffffH
	push	eax
	mov	DWORD PTR ?g_BossAtt@@3PAUIDirectDrawSurface7@@A, eax ; g_BossAtt
	call	_DDSetColorKey

; 568  : 	g_BossAtt2 = ::DDLoadBitmap(g_pDD, "image/BossAtt3.bmp", 12000, 656, TRUE);

	push	1
	push	656					; 00000290H
	push	12000					; 00002ee0H
	push	OFFSET ??_C@_0BD@FIJHLDLO@image?1BossAtt3?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 569  : 	::DDSetColorKey(g_BossAtt2, RGB(0, 0, 0));

	push	0
	push	eax
	mov	DWORD PTR ?g_BossAtt2@@3PAUIDirectDrawSurface7@@A, eax ; g_BossAtt2
	call	_DDSetColorKey
	add	esp, 64					; 00000040H

; 570  : 	g_pDDSTwo = ::DDLoadBitmap(g_pDD, "image/BossStand.bmp", 1392, 148, TRUE);

	push	1
	push	148					; 00000094H
	push	1392					; 00000570H
	push	OFFSET ??_C@_0BE@CJOBCKBE@image?1BossStand?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 571  : 	::DDSetColorKey(g_pDDSTwo, RGB(34, 177, 76));

	push	5026082					; 004cb122H
	push	eax
	mov	DWORD PTR ?g_pDDSTwo@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSTwo
	call	_DDSetColorKey

; 572  : 	g_pDDSTwoR = ::DDLoadBitmap(g_pDD, "image/BossStandR.bmp", 1392, 148, TRUE);

	push	1
	push	148					; 00000094H
	push	1392					; 00000570H
	push	OFFSET ??_C@_0BF@JILCBECG@image?1BossStandR?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 573  : 	::DDSetColorKey(g_pDDSTwoR, RGB(34, 177, 76));

	push	5026082					; 004cb122H
	push	eax
	mov	DWORD PTR ?g_pDDSTwoR@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSTwoR
	call	_DDSetColorKey

; 574  : 	g_pDDSHP = ::DDLoadBitmap(g_pDD, "image/BossHP.bmp", 762, 16, TRUE);

	push	1
	push	16					; 00000010H
	push	762					; 000002faH
	push	OFFSET ??_C@_0BB@MBFJKOFI@image?1BossHP?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap
	add	esp, 76					; 0000004cH
	mov	DWORD PTR ?g_pDDSHP@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSHP

; 575  : 	::DDSetColorKey(g_pDDSHP, RGB(34, 177, 76));

	push	5026082					; 004cb122H
	push	eax
	call	_DDSetColorKey

; 576  : 	g_pDDSCHARGE = ::DDLoadBitmap(g_pDD, "image/Charge.bmp", 4088, 263, TRUE);

	push	1
	push	263					; 00000107H
	push	4088					; 00000ff8H
	push	OFFSET ??_C@_0BB@MBNFNPOD@image?1Charge?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 577  : 	::DDSetColorKey(g_pDDSCHARGE, RGB(181, 230, 29));

	push	1959605					; 001de6b5H
	push	eax
	mov	DWORD PTR ?g_pDDSCHARGE@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSCHARGE
	call	_DDSetColorKey

; 578  : 	g_pDDSCHARGER = ::DDLoadBitmap(g_pDD, "image/ChargeR.bmp", 4088, 263, TRUE);

	push	1
	push	263					; 00000107H
	push	4088					; 00000ff8H
	push	OFFSET ??_C@_0BC@LLIDEHGM@image?1ChargeR?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 579  : 	::DDSetColorKey(g_pDDSCHARGER, RGB(181, 230, 29));

	push	1959605					; 001de6b5H
	push	eax
	mov	DWORD PTR ?g_pDDSCHARGER@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSCHARGER
	call	_DDSetColorKey
	add	esp, 64					; 00000040H

; 580  : 	g_pDDSHPbar = ::DDLoadBitmap(g_pDD, "image/BossHPbar.bmp", 758, 12, TRUE);

	push	1
	push	12					; 0000000cH
	push	758					; 000002f6H
	push	OFFSET ??_C@_0BE@IEPKBFCI@image?1BossHPbar?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 581  : 	::DDSetColorKey(g_pDDSHPbar, RGB(34, 177, 76));

	push	5026082					; 004cb122H
	push	eax
	mov	DWORD PTR ?g_pDDSHPbar@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSHPbar
	call	_DDSetColorKey

; 582  : 	g_pDDSPHP = ::DDLoadBitmap(g_pDD, "image/PlayerHP.bmp", 202, 29, TRUE);

	push	1
	push	29					; 0000001dH
	push	202					; 000000caH
	push	OFFSET ??_C@_0BD@OCDLPHOG@image?1PlayerHP?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 583  : 	::DDSetColorKey(g_pDDSPHP, RGB(34, 177, 76));

	push	5026082					; 004cb122H
	push	eax
	mov	DWORD PTR ?g_pDDSPHP@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSPHP
	call	_DDSetColorKey

; 584  : 	g_pDDSPHPbar = ::DDLoadBitmap(g_pDD, "image/PlayerHPbar.bmp", 169, 11, TRUE);

	push	1
	push	11					; 0000000bH
	push	169					; 000000a9H
	push	OFFSET ??_C@_0BG@IDPPCAHI@image?1PlayerHPbar?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap
	add	esp, 76					; 0000004cH
	mov	DWORD PTR ?g_pDDSPHPbar@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSPHPbar

; 585  : 	::DDSetColorKey(g_pDDSPHPbar, RGB(34, 177, 76));

	push	5026082					; 004cb122H
	push	eax
	call	_DDSetColorKey

; 586  : 	g_pDDSSkill = ::DDLoadBitmap(g_pDD, "image/RagingBlow.bmp", 3913, 218, TRUE);

	push	1
	push	218					; 000000daH
	push	3913					; 00000f49H
	push	OFFSET ??_C@_0BF@GICFCKM@image?1RagingBlow?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 587  : 	::DDSetColorKey(g_pDDSSkill, RGB(34, 177, 76));

	push	5026082					; 004cb122H
	push	eax
	mov	DWORD PTR ?g_pDDSSkill@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSSkill
	call	_DDSetColorKey

; 588  : 	g_pDDSSkillR = ::DDLoadBitmap(g_pDD, "image/RagingBlowR.bmp", 3913, 218, TRUE);

	push	1
	push	218					; 000000daH
	push	3913					; 00000f49H
	push	OFFSET ??_C@_0BG@FNCHEMOA@image?1RagingBlowR?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 589  : 	::DDSetColorKey(g_pDDSSkillR, RGB(34, 177, 76));

	push	5026082					; 004cb122H
	push	eax
	mov	DWORD PTR ?g_pDDSSkillR@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSSkillR
	call	_DDSetColorKey
	add	esp, 64					; 00000040H

; 590  : 	g_pDDSP3standL = ::DDLoadBitmap(g_pDD, "image/Boss3StandL.bmp", 3888, 314, TRUE);

	push	1
	push	314					; 0000013aH
	push	3888					; 00000f30H
	push	OFFSET ??_C@_0BG@KKLAIKPC@image?1Boss3StandL?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 591  : 	::DDSetColorKey(g_pDDSP3standL, RGB(0, 255, 0));

	push	65280					; 0000ff00H
	mov	DWORD PTR ?g_pDDSP3standL@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSP3standL
	push	eax
	call	_DDSetColorKey

; 592  : 	g_pDDSP3standR = ::DDLoadBitmap(g_pDD, "image/Boss3StandR.bmp", 3888, 314, TRUE);

	push	1
	push	314					; 0000013aH
	push	3888					; 00000f30H
	push	OFFSET ??_C@_0BG@JDGMOJBJ@image?1Boss3StandR?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 593  : 	::DDSetColorKey(g_pDDSP3standR, RGB(0, 255, 0));

	push	65280					; 0000ff00H
	push	eax
	mov	DWORD PTR ?g_pDDSP3standR@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSP3standR
	call	_DDSetColorKey

; 594  : 	g_pDDSDBossHit = ::DDLoadBitmap(g_pDD, "image/BossHit.bmp", 1080, 226, TRUE);

	push	1
	push	226					; 000000e2H
	push	1080					; 00000438H
	push	OFFSET ??_C@_0BC@LDOKHLD@image?1BossHit?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap
	add	esp, 76					; 0000004cH
	mov	DWORD PTR ?g_pDDSDBossHit@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSDBossHit

; 595  : 	::DDSetColorKey(g_pDDSDBossHit, RGB(0, 255, 0));

	push	65280					; 0000ff00H
	push	eax
	call	_DDSetColorKey

; 596  : 	g_pDDSDPlayerHit = ::DDLoadBitmap(g_pDD, "image/PlayerHit.bmp", 1080, 226, TRUE);

	push	1
	push	226					; 000000e2H
	push	1080					; 00000438H
	push	OFFSET ??_C@_0BE@CHMEFLGB@image?1PlayerHit?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 597  : 	::DDSetColorKey(g_pDDSDPlayerHit, RGB(0, 255, 0));

	push	65280					; 0000ff00H
	push	eax
	mov	DWORD PTR ?g_pDDSDPlayerHit@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSDPlayerHit
	call	_DDSetColorKey
	add	esp, 36					; 00000024H

; 598  : 	if (!g_pDDSOne) return MSGERROR("¿ÀÇÁ½ºÅ©¸°»ý¼º½ÇÆÐ");

	cmp	DWORD PTR ?g_pDDSOne@@3PAUIDirectDrawSurface7@@A, 0 ; g_pDDSOne
	jne	SHORT $LN4@DXW_Init
	push	598					; 00000256H
	push	OFFSET ??_C@_0EE@LHDKHKAN@c?3?2users?2administrator?2desktop?2@
	push	OFFSET ??_C@_0BD@CJHDELKA@?$LP?$MA?G?A?$LN?$LK?E?$KJ?$LI?$LA?$LL?$PN?$LM?$LK?$LN?G?F?P@
	call	?___Error@@YAHPAD0H@Z			; ___Error
	add	esp, 12					; 0000000cH

; 633  : }

	ret	0
$LN4@DXW_Init:

; 599  : 	g_pDDSTITLE = ::DDLoadBitmap(g_pDD, "image/Title.bmp", HRES, VRES, TRUE);

	push	1
	push	768					; 00000300H
	push	1024					; 00000400H
	push	OFFSET ??_C@_0BA@HCGNGLPL@image?1Title?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 600  : 	g_pDDSBG = ::DDLoadBitmap(g_pDD, "image/MI1.bmp", HRES, VRES, TRUE);

	push	1
	push	768					; 00000300H
	push	1024					; 00000400H
	push	OFFSET ??_C@_0O@MJENNBBN@image?1MI1?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	mov	DWORD PTR ?g_pDDSTITLE@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSTITLE
	call	_DDLoadBitmap

; 601  : 	g_pDDSBG2 = ::DDLoadBitmap(g_pDD, "image/MI2.bmp", HRES, VRES, TRUE);

	push	1
	push	768					; 00000300H
	push	1024					; 00000400H
	push	OFFSET ??_C@_0O@EPNJKDLD@image?1MI2?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	mov	DWORD PTR ?g_pDDSBG@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSBG
	call	_DDLoadBitmap

; 602  : 	g_pDDSBG3 = ::DDLoadBitmap(g_pDD, "image/MI3.bmp", HRES, VRES, TRUE);

	push	1
	push	768					; 00000300H
	push	1024					; 00000400H
	push	OFFSET ??_C@_0O@IEIFHABG@image?1MI3?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	mov	DWORD PTR ?g_pDDSBG2@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSBG2
	call	_DDLoadBitmap
	add	esp, 80					; 00000050H
	mov	DWORD PTR ?g_pDDSBG3@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSBG3

; 603  : 	g_pDDSGameover = ::DDLoadBitmap(g_pDD, "image/GameOver.bmp", HRES, VRES, TRUE);

	push	1
	push	768					; 00000300H
	push	1024					; 00000400H
	push	OFFSET ??_C@_0BD@PFPDFPIN@image?1GameOver?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	call	_DDLoadBitmap

; 604  : 	g_pDDSEnd = ::DDLoadBitmap(g_pDD, "image/End.bmp", HRES, VRES, TRUE);

	push	1
	push	768					; 00000300H
	push	1024					; 00000400H
	push	OFFSET ??_C@_0O@EMPBFEPO@image?1End?4bmp@
	push	DWORD PTR ?g_pDD@@3PAUIDirectDraw7@@A	; g_pDD
	mov	DWORD PTR ?g_pDDSGameover@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSGameover
	call	_DDLoadBitmap

; 605  : 	//// VRAM Cache »ý¼º, ÄÃ·¯Å°2
; 606  : 	::__CreateFastVBuffer(HRES, VRES, RGB(255, 255, 0));

	push	65535					; 0000ffffH
	push	768					; 00000300H
	push	1024					; 00000400H
	mov	DWORD PTR ?g_pDDSEnd@@3PAUIDirectDrawSurface7@@A, eax ; g_pDDSEnd
	call	?__CreateFastVBuffer@@YAHKKK@Z		; __CreateFastVBuffer

; 607  : 	::__CreateFastSBuffer(HRES, VRES, RGB(255, 255, 0));

	push	65535					; 0000ffffH
	push	768					; 00000300H
	push	1024					; 00000400H
	call	?__CreateFastSBuffer@@YAHKKK@Z		; __CreateFastSBuffer
	add	esp, 64					; 00000040H

; 608  : 	::__CreateFastSBuffer2(HRES, VRES, RGB(255, 255, 0));

	push	65535					; 0000ffffH
	push	768					; 00000300H
	push	1024					; 00000400H
	call	?__CreateFastSBuffer2@@YAHKKK@Z		; __CreateFastSBuffer2

; 609  : 
; 610  : 	g_Pos.x = 20;

	mov	DWORD PTR ?g_Pos@@3UtagPOINT@@A, 20	; 00000014H

; 611  : 	g_Pos.y = 590;

	mov	DWORD PTR ?g_Pos@@3UtagPOINT@@A+4, 590	; 0000024eH

; 612  : 	g_BPos.x = 700;

	mov	DWORD PTR ?g_BPos@@3UtagPOINT@@A, 700	; 000002bcH

; 613  : 	g_BPos.y = 530;

	mov	DWORD PTR ?g_BPos@@3UtagPOINT@@A+4, 530	; 00000212H

; 614  : 	Timer[7] = 60;

	mov	DWORD PTR ?Timer@@3PAHA+28, 60		; 0000003cH

; 615  : 	Timer[17] = 150;

	mov	DWORD PTR ?Timer@@3PAHA+68, 150		; 00000096H

; 616  : 	Timer[20] = 300;

	mov	DWORD PTR ?Timer@@3PAHA+80, 300		; 0000012cH

; 617  : 	Timer[28] = 500;

	mov	DWORD PTR ?Timer@@3PAHA+112, 500	; 000001f4H

; 618  : 	//// LUT
; 619  : 	DXW_LUTInit();

	call	?DXW_LUTInit@@YAXXZ			; DXW_LUTInit
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\time.h

; 536  :             return _time64(_Time);

	push	0
	call	__time64
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp

; 621  : 	srand(time(NULL));

	push	eax
	call	_srand
	add	esp, 20					; 00000014H

; 622  : 	///// ±âÅ¸
; 623  : 	gFpsMng.SetFPS(_FPS);

	mov	ecx, OFFSET ?gFpsMng@@3VCFpsMng@@A	; gFpsMng
	push	60					; 0000003cH
	call	?SetFPS@CFpsMng@@QAEXK@Z		; CFpsMng::SetFPS
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\time.h

; 536  :             return _time64(_Time);

	push	0
	call	__time64
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp

; 624  : 	srand((unsigned)time(NULL));

	push	eax
	call	_srand

; 625  : 	__CreateFont("bahnschrift", FNTSZ, FNTWH);	

	push	20					; 00000014H
	push	16					; 00000010H
	push	OFFSET ??_C@_0M@DJJLNBDH@bahnschrift@
	call	?__CreateFont@@YAXPBDHH@Z		; __CreateFont
	add	esp, 20					; 00000014H

; 626  : 
; 627  : #ifdef _DISPLAYINFO
; 628  : 	gAppSet.bIsDisplayInfo = TRUE;

	mov	DWORD PTR ?gAppSet@@3UtagAPP_SET@@A+8, 1

; 629  : #endif
; 630  : 
; 631  : 	TRACE0("DXW_Init()\n");
; 632  :     return TRUE;

	mov	eax, 1

; 633  : }

	ret	0
$LN10@DXW_Init:

; 517  : 	if (!bRval) return FALSE;

	xor	eax, eax

; 633  : }

	ret	0
?DXW_Init@@YAHXZ ENDP					; DXW_Init
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\time.h
;	COMDAT _time
_TEXT	SEGMENT
__Time$ = 8						; size = 4
_time	PROC						; COMDAT

; 535  :         {

	push	ebp
	mov	ebp, esp

; 537  :         }

	pop	ebp

; 536  :             return _time64(_Time);

	jmp	__time64
_time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT _vsprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__ArgList$ = 16						; size = 4
_vsprintf PROC						; COMDAT

; 1477 :     {

	push	ebp
	mov	ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

	push	DWORD PTR __ArgList$[ebp]
	push	0
	push	DWORD PTR __Format$[ebp]
	push	-1
	push	DWORD PTR __Buffer$[ebp]
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax]
	push	DWORD PTR [eax+4]
	or	ecx, 1
	push	ecx
	call	___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

	or	ecx, -1
	add	esp, 28					; 0000001cH
	test	eax, eax
	cmovs	eax, ecx

; 1478 :         #pragma warning(push)
; 1479 :         #pragma warning(disable: 4996) // Deprecation
; 1480 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, NULL, _ArgList);
; 1481 :         #pragma warning(pop)
; 1482 :     }

	pop	ebp
	ret	0
_vsprintf ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

	push	ebp
	mov	ebp, esp

; 1390 :         int const _Result = __stdio_common_vsprintf(

	push	DWORD PTR __ArgList$[ebp]
	push	DWORD PTR __Locale$[ebp]
	push	DWORD PTR __Format$[ebp]
	push	DWORD PTR __BufferCount$[ebp]
	push	DWORD PTR __Buffer$[ebp]
	call	___local_stdio_printf_options
	mov	ecx, DWORD PTR [eax]
	push	DWORD PTR [eax+4]
	or	ecx, 1
	push	ecx
	call	___stdio_common_vsprintf

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

	or	ecx, -1
	add	esp, 28					; 0000001cH
	test	eax, eax
	cmovs	eax, ecx

; 1395 :     }

	pop	ebp
	ret	0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\program files (x86)\windows kits\10\include\10.0.17763.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

	mov	eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

	ret	0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtp
; File c:\users\administrator\desktop\±èÁöÈÆ - ¹Ì·¯¿ùµå\1.src\dxwframe.cpp
;	COMDAT _WinMain@16
_TEXT	SEGMENT
_msg$ = -28						; size = 28
_hInstance$ = 8						; size = 4
_hPrevInstance$ = 12					; size = 4
_lpCmdLine$ = 16					; size = 4
_nCmdShow$ = 20						; size = 4
_WinMain@16 PROC					; COMDAT

; 331  : {

	push	ebp
	mov	ebp, esp
	sub	esp, 28					; 0000001cH

; 332  :     MSG		msg;
; 333  :     
; 334  : 	//// Ã¢¸ðµå ¼³Á¤
; 335  : 
; 336  : 	////
; 337  :     if(!__Init(hInstance, nCmdShow)) return FALSE;

	push	DWORD PTR _nCmdShow$[ebp]
	push	DWORD PTR _hInstance$[ebp]
	call	?__Init@@YAHPAUHINSTANCE__@@H@Z		; __Init
	add	esp, 8
	test	eax, eax
	jne	SHORT $LN23@WinMain

; 361  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
$LN23@WinMain:
	push	ebx
	mov	ebx, DWORD PTR __imp__GetMessageA@16
	push	esi
	mov	esi, DWORD PTR __imp__WaitMessage@0
	push	edi
	mov	edi, DWORD PTR __imp__PeekMessageA@20
$LL2@WinMain:

; 338  : 
; 339  : 	TRACE1("===== Open Process ===== [ DxWFrame - %x]\n", ::GetCurrentProcessId());
; 340  : 	TRACE3("HRes %4d VRes %4d Bpp %2d\n", HRES, VRES, BPP);
; 341  : 
; 342  :     while(1)
; 343  :     {
; 344  :     	if( PeekMessage( &msg, NULL, 0, 0, PM_NOREMOVE ) )

	push	0
	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	edi
	test	eax, eax
	je	SHORT $LN5@WinMain

; 345  :     	{
; 346  :     	    if( !GetMessage( &msg, NULL, 0, 0 ) ) break;			

	push	0
	push	0
	push	0
	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	ebx
	test	eax, eax
	je	SHORT $LN13@WinMain

; 347  :     	    TranslateMessage(&msg);

	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__TranslateMessage@4

; 348  :     	    DispatchMessage(&msg);

	lea	eax, DWORD PTR _msg$[ebp]
	push	eax
	call	DWORD PTR __imp__DispatchMessageA@4
	jmp	SHORT $LL2@WinMain
$LN5@WinMain:

; 349  :     	}
; 350  :     	else if( gAppSet.bIsActive && !gAppSet.bIsPause)

	cmp	DWORD PTR ?gAppSet@@3UtagAPP_SET@@A+4, 0
	je	SHORT $LN8@WinMain
	cmp	DWORD PTR ?gAppSet@@3UtagAPP_SET@@A, 0
	jne	SHORT $LN8@WinMain

; 351  : 		//else
; 352  :     	{
; 353  : 			DXW_MainLoop();	

	call	?DXW_MainLoop@@YAXXZ			; DXW_MainLoop
	jmp	SHORT $LL2@WinMain
$LN8@WinMain:

; 354  :         }
; 355  :         else WaitMessage();		

	call	esi

; 356  :     }

	jmp	SHORT $LL2@WinMain
$LN13@WinMain:

; 357  : 
; 358  : 	TRACE1("===== Close Process ===== [ DxWFrame - %x]\n", ::GetCurrentProcessId());
; 359  : 
; 360  :     return msg.wParam ;

	mov	eax, DWORD PTR _msg$[ebp+8]
	pop	edi
	pop	esi
	pop	ebx

; 361  : }

	mov	esp, ebp
	pop	ebp
	ret	16					; 00000010H
_WinMain@16 ENDP
_TEXT	ENDS
END
